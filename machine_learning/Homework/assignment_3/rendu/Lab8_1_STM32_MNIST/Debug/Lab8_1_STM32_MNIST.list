
Lab8_1_STM32_MNIST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c820  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0017c0e4  0800c9d0  0800c9d0  0001c9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08188ab4  08188ab4  00198ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08188abc  08188abc  00198abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08188ac0  08188ac0  00198ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d90  20000000  08188ac4  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  001a0d90  2**0
                  CONTENTS
  8 .bss          0000c560  20000d90  20000d90  001a0d90  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  2000d2f0  2000d2f0  001a0d90  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  001a0d90  2**0
                  CONTENTS, READONLY
 11 .debug_info   00032618  00000000  00000000  001a0dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005c82  00000000  00000000  001d33d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0001d412  00000000  00000000  001d905a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  001f6470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b78  00000000  00000000  001f81d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b651  00000000  00000000  001f9d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fd9e  00000000  00000000  002253a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8e24  00000000  00000000  0025513f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0034df63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065f0  00000000  00000000  0034e034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000d90 	.word	0x20000d90
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c9b8 	.word	0x0800c9b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000d94 	.word	0x20000d94
 80001ec:	0800c9b8 	.word	0x0800c9b8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8000ec0:	20f0      	movs	r0, #240	; 0xf0
 8000ec2:	4770      	bx	lr

08000ec4 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8000ec4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000ec8:	4770      	bx	lr

08000eca <ili9341_WriteReg>:
{
 8000eca:	b508      	push	{r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8000ecc:	f000 fe6c 	bl	8001ba8 <LCD_IO_WriteReg>
}
 8000ed0:	bd08      	pop	{r3, pc}

08000ed2 <ili9341_DisplayOn>:
{
 8000ed2:	b508      	push	{r3, lr}
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000ed4:	2029      	movs	r0, #41	; 0x29
 8000ed6:	f7ff fff8 	bl	8000eca <ili9341_WriteReg>
}
 8000eda:	bd08      	pop	{r3, pc}

08000edc <ili9341_DisplayOff>:
{
 8000edc:	b508      	push	{r3, lr}
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000ede:	2028      	movs	r0, #40	; 0x28
 8000ee0:	f7ff fff3 	bl	8000eca <ili9341_WriteReg>
}
 8000ee4:	bd08      	pop	{r3, pc}

08000ee6 <ili9341_WriteData>:
{
 8000ee6:	b508      	push	{r3, lr}
  LCD_IO_WriteData(RegValue);
 8000ee8:	f000 fe42 	bl	8001b70 <LCD_IO_WriteData>
}
 8000eec:	bd08      	pop	{r3, pc}

08000eee <ili9341_Init>:
{
 8000eee:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000ef0:	f000 fdd8 	bl	8001aa4 <LCD_IO_Init>
  ili9341_WriteReg(0xCA);
 8000ef4:	20ca      	movs	r0, #202	; 0xca
 8000ef6:	f7ff ffe8 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000efa:	20c3      	movs	r0, #195	; 0xc3
 8000efc:	f7ff fff3 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000f00:	2008      	movs	r0, #8
 8000f02:	f7ff fff0 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000f06:	2050      	movs	r0, #80	; 0x50
 8000f08:	f7ff ffed 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000f0c:	20cf      	movs	r0, #207	; 0xcf
 8000f0e:	f7ff ffdc 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff ffe7 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000f18:	20c1      	movs	r0, #193	; 0xc1
 8000f1a:	f7ff ffe4 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000f1e:	2030      	movs	r0, #48	; 0x30
 8000f20:	f7ff ffe1 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000f24:	20ed      	movs	r0, #237	; 0xed
 8000f26:	f7ff ffd0 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000f2a:	2064      	movs	r0, #100	; 0x64
 8000f2c:	f7ff ffdb 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f7ff ffd8 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000f36:	2012      	movs	r0, #18
 8000f38:	f7ff ffd5 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000f3c:	2081      	movs	r0, #129	; 0x81
 8000f3e:	f7ff ffd2 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000f42:	20e8      	movs	r0, #232	; 0xe8
 8000f44:	f7ff ffc1 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000f48:	2085      	movs	r0, #133	; 0x85
 8000f4a:	f7ff ffcc 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffc9 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f54:	2078      	movs	r0, #120	; 0x78
 8000f56:	f7ff ffc6 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000f5a:	20cb      	movs	r0, #203	; 0xcb
 8000f5c:	f7ff ffb5 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000f60:	2039      	movs	r0, #57	; 0x39
 8000f62:	f7ff ffc0 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000f66:	202c      	movs	r0, #44	; 0x2c
 8000f68:	f7ff ffbd 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff ffba 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000f72:	2034      	movs	r0, #52	; 0x34
 8000f74:	f7ff ffb7 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f7ff ffb4 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000f7e:	20f7      	movs	r0, #247	; 0xf7
 8000f80:	f7ff ffa3 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000f84:	2020      	movs	r0, #32
 8000f86:	f7ff ffae 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000f8a:	20ea      	movs	r0, #234	; 0xea
 8000f8c:	f7ff ff9d 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa8 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff ffa5 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000f9c:	20b1      	movs	r0, #177	; 0xb1
 8000f9e:	f7ff ff94 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9f 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000fa8:	201b      	movs	r0, #27
 8000faa:	f7ff ff9c 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000fae:	20b6      	movs	r0, #182	; 0xb6
 8000fb0:	f7ff ff8b 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f7ff ff96 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000fba:	20a2      	movs	r0, #162	; 0xa2
 8000fbc:	f7ff ff93 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000fc0:	20c0      	movs	r0, #192	; 0xc0
 8000fc2:	f7ff ff82 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000fc6:	2010      	movs	r0, #16
 8000fc8:	f7ff ff8d 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000fcc:	20c1      	movs	r0, #193	; 0xc1
 8000fce:	f7ff ff7c 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000fd2:	2010      	movs	r0, #16
 8000fd4:	f7ff ff87 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000fd8:	20c5      	movs	r0, #197	; 0xc5
 8000fda:	f7ff ff76 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000fde:	2045      	movs	r0, #69	; 0x45
 8000fe0:	f7ff ff81 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000fe4:	2015      	movs	r0, #21
 8000fe6:	f7ff ff7e 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000fea:	20c7      	movs	r0, #199	; 0xc7
 8000fec:	f7ff ff6d 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000ff0:	2090      	movs	r0, #144	; 0x90
 8000ff2:	f7ff ff78 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000ff6:	2036      	movs	r0, #54	; 0x36
 8000ff8:	f7ff ff67 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000ffc:	20c8      	movs	r0, #200	; 0xc8
 8000ffe:	f7ff ff72 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001002:	20f2      	movs	r0, #242	; 0xf2
 8001004:	f7ff ff61 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ff6c 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800100e:	20b0      	movs	r0, #176	; 0xb0
 8001010:	f7ff ff5b 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001014:	20c2      	movs	r0, #194	; 0xc2
 8001016:	f7ff ff66 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800101a:	20b6      	movs	r0, #182	; 0xb6
 800101c:	f7ff ff55 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001020:	200a      	movs	r0, #10
 8001022:	f7ff ff60 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001026:	20a7      	movs	r0, #167	; 0xa7
 8001028:	f7ff ff5d 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800102c:	2027      	movs	r0, #39	; 0x27
 800102e:	f7ff ff5a 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001032:	2004      	movs	r0, #4
 8001034:	f7ff ff57 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001038:	202a      	movs	r0, #42	; 0x2a
 800103a:	f7ff ff46 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ff51 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff ff4e 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff4b 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001050:	20ef      	movs	r0, #239	; 0xef
 8001052:	f7ff ff48 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001056:	202b      	movs	r0, #43	; 0x2b
 8001058:	f7ff ff37 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff ff42 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ff3f 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ff3c 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800106e:	203f      	movs	r0, #63	; 0x3f
 8001070:	f7ff ff39 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001074:	20f6      	movs	r0, #246	; 0xf6
 8001076:	f7ff ff28 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800107a:	2001      	movs	r0, #1
 800107c:	f7ff ff33 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff30 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001086:	2006      	movs	r0, #6
 8001088:	f7ff ff2d 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_GRAM);
 800108c:	202c      	movs	r0, #44	; 0x2c
 800108e:	f7ff ff1c 	bl	8000eca <ili9341_WriteReg>
  LCD_Delay(200);
 8001092:	20c8      	movs	r0, #200	; 0xc8
 8001094:	f000 fdcc 	bl	8001c30 <LCD_Delay>
  ili9341_WriteReg(LCD_GAMMA);
 8001098:	2026      	movs	r0, #38	; 0x26
 800109a:	f7ff ff16 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff21 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PGAMMA);
 80010a4:	20e0      	movs	r0, #224	; 0xe0
 80010a6:	f7ff ff10 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80010aa:	200f      	movs	r0, #15
 80010ac:	f7ff ff1b 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80010b0:	2029      	movs	r0, #41	; 0x29
 80010b2:	f7ff ff18 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80010b6:	2024      	movs	r0, #36	; 0x24
 80010b8:	f7ff ff15 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80010bc:	200c      	movs	r0, #12
 80010be:	f7ff ff12 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80010c2:	200e      	movs	r0, #14
 80010c4:	f7ff ff0f 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80010c8:	2009      	movs	r0, #9
 80010ca:	f7ff ff0c 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80010ce:	204e      	movs	r0, #78	; 0x4e
 80010d0:	f7ff ff09 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80010d4:	2078      	movs	r0, #120	; 0x78
 80010d6:	f7ff ff06 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80010da:	203c      	movs	r0, #60	; 0x3c
 80010dc:	f7ff ff03 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80010e0:	2009      	movs	r0, #9
 80010e2:	f7ff ff00 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80010e6:	2013      	movs	r0, #19
 80010e8:	f7ff fefd 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80010ec:	2005      	movs	r0, #5
 80010ee:	f7ff fefa 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80010f2:	2017      	movs	r0, #23
 80010f4:	f7ff fef7 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80010f8:	2011      	movs	r0, #17
 80010fa:	f7ff fef4 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fef1 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001104:	20e1      	movs	r0, #225	; 0xe1
 8001106:	f7ff fee0 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff feeb 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001110:	2016      	movs	r0, #22
 8001112:	f7ff fee8 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001116:	201b      	movs	r0, #27
 8001118:	f7ff fee5 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff fee2 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001122:	2011      	movs	r0, #17
 8001124:	f7ff fedf 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001128:	2007      	movs	r0, #7
 800112a:	f7ff fedc 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800112e:	2031      	movs	r0, #49	; 0x31
 8001130:	f7ff fed9 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001134:	2033      	movs	r0, #51	; 0x33
 8001136:	f7ff fed6 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800113a:	2042      	movs	r0, #66	; 0x42
 800113c:	f7ff fed3 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001140:	2005      	movs	r0, #5
 8001142:	f7ff fed0 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001146:	200c      	movs	r0, #12
 8001148:	f7ff fecd 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800114c:	200a      	movs	r0, #10
 800114e:	f7ff feca 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001152:	2028      	movs	r0, #40	; 0x28
 8001154:	f7ff fec7 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001158:	202f      	movs	r0, #47	; 0x2f
 800115a:	f7ff fec4 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800115e:	200f      	movs	r0, #15
 8001160:	f7ff fec1 	bl	8000ee6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001164:	2011      	movs	r0, #17
 8001166:	f7ff feb0 	bl	8000eca <ili9341_WriteReg>
  LCD_Delay(200);
 800116a:	20c8      	movs	r0, #200	; 0xc8
 800116c:	f000 fd60 	bl	8001c30 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001170:	2029      	movs	r0, #41	; 0x29
 8001172:	f7ff feaa 	bl	8000eca <ili9341_WriteReg>
  ili9341_WriteReg(LCD_GRAM);
 8001176:	202c      	movs	r0, #44	; 0x2c
 8001178:	f7ff fea7 	bl	8000eca <ili9341_WriteReg>
}
 800117c:	bd08      	pop	{r3, pc}

0800117e <ili9341_ReadData>:
{
 800117e:	b508      	push	{r3, lr}
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001180:	f000 fd2e 	bl	8001be0 <LCD_IO_ReadData>
}
 8001184:	bd08      	pop	{r3, pc}

08001186 <ili9341_ReadID>:
{
 8001186:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8001188:	f000 fc8c 	bl	8001aa4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800118c:	2103      	movs	r1, #3
 800118e:	20d3      	movs	r0, #211	; 0xd3
 8001190:	f7ff fff5 	bl	800117e <ili9341_ReadData>
}
 8001194:	b280      	uxth	r0, r0
 8001196:	bd08      	pop	{r3, pc}

08001198 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8001198:	4603      	mov	r3, r0
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800119a:	2000      	movs	r0, #0
 800119c:	2801      	cmp	r0, #1
 800119e:	d806      	bhi.n	80011ae <stmpe811_GetInstance+0x16>
  {
    if(stmpe811[idx] == DeviceAddr)
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <stmpe811_GetInstance+0x1c>)
 80011a2:	5c12      	ldrb	r2, [r2, r0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d003      	beq.n	80011b0 <stmpe811_GetInstance+0x18>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80011a8:	3001      	adds	r0, #1
 80011aa:	b2c0      	uxtb	r0, r0
 80011ac:	e7f6      	b.n	800119c <stmpe811_GetInstance+0x4>
    {
      return idx; 
    }
  }
  
  return 0xFF;
 80011ae:	20ff      	movs	r0, #255	; 0xff
}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000dac 	.word	0x20000dac

080011b8 <stmpe811_IO_WritePin>:
{
 80011b8:	b508      	push	{r3, lr}
  if (PinState != 0)
 80011ba:	b12a      	cbz	r2, 80011c8 <stmpe811_IO_WritePin+0x10>
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 80011bc:	b2ca      	uxtb	r2, r1
 80011be:	2110      	movs	r1, #16
 80011c0:	b2c0      	uxtb	r0, r0
 80011c2:	f000 fd41 	bl	8001c48 <IOE_Write>
}
 80011c6:	bd08      	pop	{r3, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_IO_CLR_PIN, (uint8_t)IO_Pin);
 80011c8:	b2ca      	uxtb	r2, r1
 80011ca:	2111      	movs	r1, #17
 80011cc:	b2c0      	uxtb	r0, r0
 80011ce:	f000 fd3b 	bl	8001c48 <IOE_Write>
}
 80011d2:	e7f8      	b.n	80011c6 <stmpe811_IO_WritePin+0xe>

080011d4 <stmpe811_Reset>:
{
 80011d4:	b510      	push	{r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80011d6:	b2c4      	uxtb	r4, r0
 80011d8:	2202      	movs	r2, #2
 80011da:	2103      	movs	r1, #3
 80011dc:	4620      	mov	r0, r4
 80011de:	f000 fd33 	bl	8001c48 <IOE_Write>
  IOE_Delay(10); 
 80011e2:	200a      	movs	r0, #10
 80011e4:	f000 fd3d 	bl	8001c62 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2103      	movs	r1, #3
 80011ec:	4620      	mov	r0, r4
 80011ee:	f000 fd2b 	bl	8001c48 <IOE_Write>
  IOE_Delay(2); 
 80011f2:	2002      	movs	r0, #2
 80011f4:	f000 fd35 	bl	8001c62 <IOE_Delay>
}
 80011f8:	bd10      	pop	{r4, pc}
	...

080011fc <stmpe811_Init>:
{
 80011fc:	b510      	push	{r4, lr}
 80011fe:	4604      	mov	r4, r0
  instance = stmpe811_GetInstance(DeviceAddr);
 8001200:	f7ff ffca 	bl	8001198 <stmpe811_GetInstance>
  if(instance == 0xFF)
 8001204:	28ff      	cmp	r0, #255	; 0xff
 8001206:	d000      	beq.n	800120a <stmpe811_Init+0xe>
}
 8001208:	bd10      	pop	{r4, pc}
    empty = stmpe811_GetInstance(0);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff ffc4 	bl	8001198 <stmpe811_GetInstance>
    if(empty < STMPE811_MAX_INSTANCE)
 8001210:	2801      	cmp	r0, #1
 8001212:	d8f9      	bhi.n	8001208 <stmpe811_Init+0xc>
      stmpe811[empty] = DeviceAddr;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <stmpe811_Init+0x28>)
 8001216:	541c      	strb	r4, [r3, r0]
      IOE_Init(); 
 8001218:	f000 fd0e 	bl	8001c38 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 800121c:	4620      	mov	r0, r4
 800121e:	f7ff ffd9 	bl	80011d4 <stmpe811_Reset>
}
 8001222:	e7f1      	b.n	8001208 <stmpe811_Init+0xc>
 8001224:	20000dac 	.word	0x20000dac

08001228 <stmpe811_ReadID>:
{
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4604      	mov	r4, r0
  IOE_Init(); 
 800122c:	f000 fd04 	bl	8001c38 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001230:	b2e4      	uxtb	r4, r4
 8001232:	2100      	movs	r1, #0
 8001234:	4620      	mov	r0, r4
 8001236:	f000 fd0b 	bl	8001c50 <IOE_Read>
 800123a:	0205      	lsls	r5, r0, #8
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800123c:	2101      	movs	r1, #1
 800123e:	4620      	mov	r0, r4
 8001240:	f000 fd06 	bl	8001c50 <IOE_Read>
 8001244:	b200      	sxth	r0, r0
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001246:	4328      	orrs	r0, r5
}
 8001248:	b280      	uxth	r0, r0
 800124a:	bd38      	pop	{r3, r4, r5, pc}

0800124c <stmpe811_IO_ReadPin>:
{
 800124c:	b510      	push	{r4, lr}
 800124e:	460c      	mov	r4, r1
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 8001250:	2112      	movs	r1, #18
 8001252:	b2c0      	uxtb	r0, r0
 8001254:	f000 fcfc 	bl	8001c50 <IOE_Read>
 8001258:	b2e4      	uxtb	r4, r4
}
 800125a:	4020      	ands	r0, r4
 800125c:	bd10      	pop	{r4, pc}

0800125e <stmpe811_IO_ITStatus>:
{
 800125e:	b510      	push	{r4, lr}
 8001260:	460c      	mov	r4, r1
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 8001262:	210d      	movs	r1, #13
 8001264:	b2c0      	uxtb	r0, r0
 8001266:	f000 fcf3 	bl	8001c50 <IOE_Read>
 800126a:	b2e4      	uxtb	r4, r4
}
 800126c:	4020      	ands	r0, r4
 800126e:	bd10      	pop	{r4, pc}

08001270 <stmpe811_TS_DetectTouch>:
{
 8001270:	b510      	push	{r4, lr}
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001272:	b2c4      	uxtb	r4, r0
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	4620      	mov	r0, r4
 8001278:	f000 fcea 	bl	8001c50 <IOE_Read>
  if(state > 0)
 800127c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001280:	d10b      	bne.n	800129a <stmpe811_TS_DetectTouch+0x2a>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001282:	2201      	movs	r2, #1
 8001284:	214b      	movs	r1, #75	; 0x4b
 8001286:	4620      	mov	r0, r4
 8001288:	f000 fcde 	bl	8001c48 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800128c:	2200      	movs	r2, #0
 800128e:	214b      	movs	r1, #75	; 0x4b
 8001290:	4620      	mov	r0, r4
 8001292:	f000 fcd9 	bl	8001c48 <IOE_Write>
  uint8_t ret = 0;
 8001296:	2000      	movs	r0, #0
}
 8001298:	bd10      	pop	{r4, pc}
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800129a:	214c      	movs	r1, #76	; 0x4c
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fcd7 	bl	8001c50 <IOE_Read>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d0f8      	beq.n	8001298 <stmpe811_TS_DetectTouch+0x28>
      ret = 1;
 80012a6:	2001      	movs	r0, #1
 80012a8:	e7f6      	b.n	8001298 <stmpe811_TS_DetectTouch+0x28>

080012aa <stmpe811_TS_GetXY>:
{
 80012aa:	b570      	push	{r4, r5, r6, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	460e      	mov	r6, r1
 80012b0:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80012b2:	b2c4      	uxtb	r4, r0
 80012b4:	2304      	movs	r3, #4
 80012b6:	eb0d 0203 	add.w	r2, sp, r3
 80012ba:	21d7      	movs	r1, #215	; 0xd7
 80012bc:	4620      	mov	r0, r4
 80012be:	f000 fccb 	bl	8001c58 <IOE_ReadMultiple>
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80012c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80012c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80012ca:	041b      	lsls	r3, r3, #16
 80012cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012d0:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80012d4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80012d8:	0d1b      	lsrs	r3, r3, #20
 80012da:	8033      	strh	r3, [r6, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80012dc:	f3c0 230b 	ubfx	r3, r0, #8, #12
 80012e0:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80012e2:	2201      	movs	r2, #1
 80012e4:	214b      	movs	r1, #75	; 0x4b
 80012e6:	4620      	mov	r0, r4
 80012e8:	f000 fcae 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80012ec:	2200      	movs	r2, #0
 80012ee:	214b      	movs	r1, #75	; 0x4b
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fca9 	bl	8001c48 <IOE_Write>
}
 80012f6:	b002      	add	sp, #8
 80012f8:	bd70      	pop	{r4, r5, r6, pc}

080012fa <stmpe811_EnableGlobalIT>:
{
 80012fa:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80012fc:	b2c4      	uxtb	r4, r0
 80012fe:	2109      	movs	r1, #9
 8001300:	4620      	mov	r0, r4
 8001302:	f000 fca5 	bl	8001c50 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001306:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	2109      	movs	r1, #9
 800130e:	4620      	mov	r0, r4
 8001310:	f000 fc9a 	bl	8001c48 <IOE_Write>
}
 8001314:	bd10      	pop	{r4, pc}

08001316 <stmpe811_DisableGlobalIT>:
{
 8001316:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001318:	b2c4      	uxtb	r4, r0
 800131a:	2109      	movs	r1, #9
 800131c:	4620      	mov	r0, r4
 800131e:	f000 fc97 	bl	8001c50 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001322:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8001326:	2109      	movs	r1, #9
 8001328:	4620      	mov	r0, r4
 800132a:	f000 fc8d 	bl	8001c48 <IOE_Write>
}
 800132e:	bd10      	pop	{r4, pc}

08001330 <stmpe811_EnableITSource>:
{
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001334:	b2c4      	uxtb	r4, r0
 8001336:	210a      	movs	r1, #10
 8001338:	4620      	mov	r0, r4
 800133a:	f000 fc89 	bl	8001c50 <IOE_Read>
  tmp |= Source; 
 800133e:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	210a      	movs	r1, #10
 8001346:	4620      	mov	r0, r4
 8001348:	f000 fc7e 	bl	8001c48 <IOE_Write>
}
 800134c:	bd38      	pop	{r3, r4, r5, pc}

0800134e <stmpe811_IO_EnableIT>:
{ 
 800134e:	b510      	push	{r4, lr}
 8001350:	4604      	mov	r4, r0
  IOE_ITConfig();
 8001352:	f000 fc75 	bl	8001c40 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_GIT_IO);
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff ffe9 	bl	8001330 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr); 
 800135e:	4620      	mov	r0, r4
 8001360:	f7ff ffcb 	bl	80012fa <stmpe811_EnableGlobalIT>
}
 8001364:	bd10      	pop	{r4, pc}

08001366 <stmpe811_TS_EnableIT>:
{
 8001366:	b510      	push	{r4, lr}
 8001368:	4604      	mov	r4, r0
  IOE_ITConfig();
 800136a:	f000 fc69 	bl	8001c40 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800136e:	211f      	movs	r1, #31
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff ffdd 	bl	8001330 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff ffbf 	bl	80012fa <stmpe811_EnableGlobalIT>
}
 800137c:	bd10      	pop	{r4, pc}

0800137e <stmpe811_DisableITSource>:
{
 800137e:	b538      	push	{r3, r4, r5, lr}
 8001380:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001382:	b2c4      	uxtb	r4, r0
 8001384:	210a      	movs	r1, #10
 8001386:	4620      	mov	r0, r4
 8001388:	f000 fc62 	bl	8001c50 <IOE_Read>
  tmp &= ~Source; 
 800138c:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	210a      	movs	r1, #10
 8001394:	4620      	mov	r0, r4
 8001396:	f000 fc57 	bl	8001c48 <IOE_Write>
}
 800139a:	bd38      	pop	{r3, r4, r5, pc}

0800139c <stmpe811_IO_DisableIT>:
{
 800139c:	b510      	push	{r4, lr}
 800139e:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 80013a0:	f7ff ffb9 	bl	8001316 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7ff ffe9 	bl	800137e <stmpe811_DisableITSource>
}
 80013ac:	bd10      	pop	{r4, pc}

080013ae <stmpe811_TS_DisableIT>:
{
 80013ae:	b510      	push	{r4, lr}
 80013b0:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 80013b2:	f7ff ffb0 	bl	8001316 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80013b6:	211f      	movs	r1, #31
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff ffe0 	bl	800137e <stmpe811_DisableITSource>
}
 80013be:	bd10      	pop	{r4, pc}

080013c0 <stmpe811_SetITPolarity>:
{
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80013c4:	b2c4      	uxtb	r4, r0
 80013c6:	2109      	movs	r1, #9
 80013c8:	4620      	mov	r0, r4
 80013ca:	f000 fc41 	bl	8001c50 <IOE_Read>
  tmp &= ~(uint8_t)0x04;
 80013ce:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80013d2:	432a      	orrs	r2, r5
 80013d4:	2109      	movs	r1, #9
 80013d6:	4620      	mov	r0, r4
 80013d8:	f000 fc36 	bl	8001c48 <IOE_Write>
}
 80013dc:	bd38      	pop	{r3, r4, r5, pc}

080013de <stmpe811_SetITType>:
{
 80013de:	b538      	push	{r3, r4, r5, lr}
 80013e0:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80013e2:	b2c4      	uxtb	r4, r0
 80013e4:	2109      	movs	r1, #9
 80013e6:	4620      	mov	r0, r4
 80013e8:	f000 fc32 	bl	8001c50 <IOE_Read>
  tmp &= ~(uint8_t)0x02;
 80013ec:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80013f0:	432a      	orrs	r2, r5
 80013f2:	2109      	movs	r1, #9
 80013f4:	4620      	mov	r0, r4
 80013f6:	f000 fc27 	bl	8001c48 <IOE_Write>
}
 80013fa:	bd38      	pop	{r3, r4, r5, pc}

080013fc <stmpe811_ReadGITStatus>:
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001400:	210b      	movs	r1, #11
 8001402:	b2c0      	uxtb	r0, r0
 8001404:	f000 fc24 	bl	8001c50 <IOE_Read>
}
 8001408:	4020      	ands	r0, r4
 800140a:	bd10      	pop	{r4, pc}

0800140c <stmpe811_TS_ITStatus>:
{
 800140c:	b508      	push	{r3, lr}
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800140e:	211f      	movs	r1, #31
 8001410:	f7ff fff4 	bl	80013fc <stmpe811_ReadGITStatus>
}
 8001414:	bd08      	pop	{r3, pc}

08001416 <stmpe811_ClearGlobalIT>:
{
 8001416:	b508      	push	{r3, lr}
 8001418:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800141a:	210b      	movs	r1, #11
 800141c:	b2c0      	uxtb	r0, r0
 800141e:	f000 fc13 	bl	8001c48 <IOE_Write>
}
 8001422:	bd08      	pop	{r3, pc}

08001424 <stmpe811_IO_ClearIT>:
{
 8001424:	b538      	push	{r3, r4, r5, lr}
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_GIT_IO);
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	f7ff fff3 	bl	8001416 <stmpe811_ClearGlobalIT>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_STA, (uint8_t)IO_Pin);  
 8001430:	b2e4      	uxtb	r4, r4
 8001432:	b2ed      	uxtb	r5, r5
 8001434:	462a      	mov	r2, r5
 8001436:	210d      	movs	r1, #13
 8001438:	4620      	mov	r0, r4
 800143a:	f000 fc05 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_ED, (uint8_t)IO_Pin);
 800143e:	462a      	mov	r2, r5
 8001440:	2114      	movs	r1, #20
 8001442:	4620      	mov	r0, r4
 8001444:	f000 fc00 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, (uint8_t)IO_Pin);
 8001448:	462a      	mov	r2, r5
 800144a:	2115      	movs	r1, #21
 800144c:	4620      	mov	r0, r4
 800144e:	f000 fbfb 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8001452:	462a      	mov	r2, r5
 8001454:	2116      	movs	r1, #22
 8001456:	4620      	mov	r0, r4
 8001458:	f000 fbf6 	bl	8001c48 <IOE_Write>
}
 800145c:	bd38      	pop	{r3, r4, r5, pc}

0800145e <stmpe811_TS_ClearIT>:
{
 800145e:	b508      	push	{r3, lr}
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001460:	211f      	movs	r1, #31
 8001462:	f7ff ffd8 	bl	8001416 <stmpe811_ClearGlobalIT>
}
 8001466:	bd08      	pop	{r3, pc}

08001468 <stmpe811_IO_InitPin>:
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	460c      	mov	r4, r1
 800146c:	4616      	mov	r6, r2
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 800146e:	b2c5      	uxtb	r5, r0
 8001470:	2113      	movs	r1, #19
 8001472:	4628      	mov	r0, r5
 8001474:	f000 fbec 	bl	8001c50 <IOE_Read>
  if (Direction != STMPE811_DIRECTION_IN)
 8001478:	b13e      	cbz	r6, 800148a <stmpe811_IO_InitPin+0x22>
    tmp |= (uint8_t)IO_Pin;
 800147a:	b2e2      	uxtb	r2, r4
 800147c:	4302      	orrs	r2, r0
 800147e:	b2d2      	uxtb	r2, r2
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8001480:	2113      	movs	r1, #19
 8001482:	4628      	mov	r0, r5
 8001484:	f000 fbe0 	bl	8001c48 <IOE_Write>
}
 8001488:	bd70      	pop	{r4, r5, r6, pc}
    tmp &= ~(uint8_t)IO_Pin;
 800148a:	ea20 0204 	bic.w	r2, r0, r4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	e7f6      	b.n	8001480 <stmpe811_IO_InitPin+0x18>

08001492 <stmpe811_IO_DisableAF>:
{
 8001492:	b538      	push	{r3, r4, r5, lr}
 8001494:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001496:	b2c5      	uxtb	r5, r0
 8001498:	2117      	movs	r1, #23
 800149a:	4628      	mov	r0, r5
 800149c:	f000 fbd8 	bl	8001c50 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 80014a0:	b2e4      	uxtb	r4, r4
 80014a2:	4304      	orrs	r4, r0
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 80014a4:	b2e2      	uxtb	r2, r4
 80014a6:	2117      	movs	r1, #23
 80014a8:	4628      	mov	r0, r5
 80014aa:	f000 fbcd 	bl	8001c48 <IOE_Write>
}
 80014ae:	bd38      	pop	{r3, r4, r5, pc}

080014b0 <stmpe811_IO_Start>:
{
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	4604      	mov	r4, r0
 80014b4:	460d      	mov	r5, r1
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80014b6:	b2c6      	uxtb	r6, r0
 80014b8:	2104      	movs	r1, #4
 80014ba:	4630      	mov	r0, r6
 80014bc:	f000 fbc8 	bl	8001c50 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80014c0:	f000 02fa 	and.w	r2, r0, #250	; 0xfa
 80014c4:	2104      	movs	r1, #4
 80014c6:	4630      	mov	r0, r6
 80014c8:	f000 fbbe 	bl	8001c48 <IOE_Write>
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 80014cc:	b2e9      	uxtb	r1, r5
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff ffdf 	bl	8001492 <stmpe811_IO_DisableAF>
}
 80014d4:	bd70      	pop	{r4, r5, r6, pc}

080014d6 <stmpe811_IO_EnableAF>:
{
 80014d6:	b538      	push	{r3, r4, r5, lr}
 80014d8:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80014da:	b2c4      	uxtb	r4, r0
 80014dc:	2117      	movs	r1, #23
 80014de:	4620      	mov	r0, r4
 80014e0:	f000 fbb6 	bl	8001c50 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 80014e4:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	2117      	movs	r1, #23
 80014ec:	4620      	mov	r0, r4
 80014ee:	f000 fbab 	bl	8001c48 <IOE_Write>
}
 80014f2:	bd38      	pop	{r3, r4, r5, pc}

080014f4 <stmpe811_TS_Start>:
{
 80014f4:	b570      	push	{r4, r5, r6, lr}
 80014f6:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80014f8:	b2c4      	uxtb	r4, r0
 80014fa:	2104      	movs	r1, #4
 80014fc:	4620      	mov	r0, r4
 80014fe:	f000 fba7 	bl	8001c50 <IOE_Read>
 8001502:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001504:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
 8001508:	2104      	movs	r1, #4
 800150a:	4620      	mov	r0, r4
 800150c:	f000 fb9c 	bl	8001c48 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001510:	21f0      	movs	r1, #240	; 0xf0
 8001512:	4630      	mov	r0, r6
 8001514:	f7ff ffdf 	bl	80014d6 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001518:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 800151c:	2104      	movs	r1, #4
 800151e:	4620      	mov	r0, r4
 8001520:	f000 fb92 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001524:	2249      	movs	r2, #73	; 0x49
 8001526:	2120      	movs	r1, #32
 8001528:	4620      	mov	r0, r4
 800152a:	f000 fb8d 	bl	8001c48 <IOE_Write>
  IOE_Delay(2); 
 800152e:	2002      	movs	r0, #2
 8001530:	f000 fb97 	bl	8001c62 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001534:	2201      	movs	r2, #1
 8001536:	2121      	movs	r1, #33	; 0x21
 8001538:	4620      	mov	r0, r4
 800153a:	f000 fb85 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800153e:	229a      	movs	r2, #154	; 0x9a
 8001540:	2141      	movs	r1, #65	; 0x41
 8001542:	4620      	mov	r0, r4
 8001544:	f000 fb80 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001548:	2201      	movs	r2, #1
 800154a:	214a      	movs	r1, #74	; 0x4a
 800154c:	4620      	mov	r0, r4
 800154e:	f000 fb7b 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001552:	2201      	movs	r2, #1
 8001554:	214b      	movs	r1, #75	; 0x4b
 8001556:	4620      	mov	r0, r4
 8001558:	f000 fb76 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800155c:	2200      	movs	r2, #0
 800155e:	214b      	movs	r1, #75	; 0x4b
 8001560:	4620      	mov	r0, r4
 8001562:	f000 fb71 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001566:	2201      	movs	r2, #1
 8001568:	2156      	movs	r1, #86	; 0x56
 800156a:	4620      	mov	r0, r4
 800156c:	f000 fb6c 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001570:	2201      	movs	r2, #1
 8001572:	2158      	movs	r1, #88	; 0x58
 8001574:	4620      	mov	r0, r4
 8001576:	f000 fb67 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800157a:	2201      	movs	r2, #1
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	4620      	mov	r0, r4
 8001580:	f000 fb62 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001584:	22ff      	movs	r2, #255	; 0xff
 8001586:	210b      	movs	r1, #11
 8001588:	4620      	mov	r0, r4
 800158a:	f000 fb5d 	bl	8001c48 <IOE_Write>
  IOE_Delay(2); 
 800158e:	2002      	movs	r0, #2
 8001590:	f000 fb67 	bl	8001c62 <IOE_Delay>
}
 8001594:	bd70      	pop	{r4, r5, r6, pc}

08001596 <stmpe811_IO_SetEdgeMode>:
{
 8001596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800159a:	460e      	mov	r6, r1
 800159c:	4617      	mov	r7, r2
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 800159e:	b2c5      	uxtb	r5, r0
 80015a0:	2116      	movs	r1, #22
 80015a2:	4628      	mov	r0, r5
 80015a4:	f000 fb54 	bl	8001c50 <IOE_Read>
 80015a8:	4680      	mov	r8, r0
  tmp2 = IOE_Read(DeviceAddr, STMPE811_REG_IO_RE);
 80015aa:	2115      	movs	r1, #21
 80015ac:	4628      	mov	r0, r5
 80015ae:	f000 fb4f 	bl	8001c50 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 80015b2:	43f4      	mvns	r4, r6
 80015b4:	b264      	sxtb	r4, r4
 80015b6:	ea04 0208 	and.w	r2, r4, r8
 80015ba:	b2d2      	uxtb	r2, r2
  tmp2 &= ~(uint8_t)IO_Pin;
 80015bc:	4004      	ands	r4, r0
 80015be:	b2e4      	uxtb	r4, r4
  if (Edge & STMPE811_EDGE_FALLING)
 80015c0:	f017 0f01 	tst.w	r7, #1
 80015c4:	d001      	beq.n	80015ca <stmpe811_IO_SetEdgeMode+0x34>
    tmp1 |= (uint8_t)IO_Pin;
 80015c6:	b2f3      	uxtb	r3, r6
 80015c8:	431a      	orrs	r2, r3
  if (Edge & STMPE811_EDGE_RISING)
 80015ca:	f017 0f02 	tst.w	r7, #2
 80015ce:	d001      	beq.n	80015d4 <stmpe811_IO_SetEdgeMode+0x3e>
    tmp2 |= (uint8_t)IO_Pin;
 80015d0:	b2f6      	uxtb	r6, r6
 80015d2:	4334      	orrs	r4, r6
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 80015d4:	2116      	movs	r1, #22
 80015d6:	4628      	mov	r0, r5
 80015d8:	f000 fb36 	bl	8001c48 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 80015dc:	4622      	mov	r2, r4
 80015de:	2115      	movs	r1, #21
 80015e0:	4628      	mov	r0, r5
 80015e2:	f000 fb31 	bl	8001c48 <IOE_Write>
}
 80015e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015ea <stmpe811_IO_EnablePinIT>:
{
 80015ea:	b538      	push	{r3, r4, r5, lr}
 80015ec:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 80015ee:	b2c5      	uxtb	r5, r0
 80015f0:	210c      	movs	r1, #12
 80015f2:	4628      	mov	r0, r5
 80015f4:	f000 fb2c 	bl	8001c50 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 80015f8:	b2e4      	uxtb	r4, r4
 80015fa:	4304      	orrs	r4, r0
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 80015fc:	b2e2      	uxtb	r2, r4
 80015fe:	210c      	movs	r1, #12
 8001600:	4628      	mov	r0, r5
 8001602:	f000 fb21 	bl	8001c48 <IOE_Write>
}
 8001606:	bd38      	pop	{r3, r4, r5, pc}

08001608 <stmpe811_IO_Config>:
{
 8001608:	b570      	push	{r4, r5, r6, lr}
 800160a:	4605      	mov	r5, r0
 800160c:	460e      	mov	r6, r1
 800160e:	4614      	mov	r4, r2
  switch(IO_Mode)
 8001610:	2a05      	cmp	r2, #5
 8001612:	d864      	bhi.n	80016de <stmpe811_IO_Config+0xd6>
 8001614:	e8df f002 	tbb	[pc, r2]
 8001618:	230d0803 	.word	0x230d0803
 800161c:	4e39      	.short	0x4e39
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN);
 800161e:	2200      	movs	r2, #0
 8001620:	f7ff ff22 	bl	8001468 <stmpe811_IO_InitPin>
  uint8_t error_code = 0;
 8001624:	4620      	mov	r0, r4
}
 8001626:	bd70      	pop	{r4, r5, r6, pc}
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_OUT);
 8001628:	2201      	movs	r2, #1
 800162a:	f7ff ff1d 	bl	8001468 <stmpe811_IO_InitPin>
  uint8_t error_code = 0;
 800162e:	2000      	movs	r0, #0
    break;
 8001630:	e7f9      	b.n	8001626 <stmpe811_IO_Config+0x1e>
    stmpe811_IO_EnableIT(DeviceAddr);
 8001632:	f7ff fe8c 	bl	800134e <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8001636:	4631      	mov	r1, r6
 8001638:	4628      	mov	r0, r5
 800163a:	f7ff ffd6 	bl	80015ea <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 800163e:	2200      	movs	r2, #0
 8001640:	4631      	mov	r1, r6
 8001642:	4628      	mov	r0, r5
 8001644:	f7ff ff10 	bl	8001468 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);      
 8001648:	2102      	movs	r1, #2
 800164a:	4628      	mov	r0, r5
 800164c:	f7ff fec7 	bl	80013de <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_RISING); 
 8001650:	2202      	movs	r2, #2
 8001652:	4631      	mov	r1, r6
 8001654:	4628      	mov	r0, r5
 8001656:	f7ff ff9e 	bl	8001596 <stmpe811_IO_SetEdgeMode>
  uint8_t error_code = 0;
 800165a:	2000      	movs	r0, #0
    break;
 800165c:	e7e3      	b.n	8001626 <stmpe811_IO_Config+0x1e>
    stmpe811_IO_EnableIT(DeviceAddr);
 800165e:	f7ff fe76 	bl	800134e <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8001662:	4631      	mov	r1, r6
 8001664:	4628      	mov	r0, r5
 8001666:	f7ff ffc0 	bl	80015ea <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 800166a:	2200      	movs	r2, #0
 800166c:	4631      	mov	r1, r6
 800166e:	4628      	mov	r0, r5
 8001670:	f7ff fefa 	bl	8001468 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);    
 8001674:	2102      	movs	r1, #2
 8001676:	4628      	mov	r0, r5
 8001678:	f7ff feb1 	bl	80013de <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 800167c:	2201      	movs	r2, #1
 800167e:	4631      	mov	r1, r6
 8001680:	4628      	mov	r0, r5
 8001682:	f7ff ff88 	bl	8001596 <stmpe811_IO_SetEdgeMode>
  uint8_t error_code = 0;
 8001686:	2000      	movs	r0, #0
    break;
 8001688:	e7cd      	b.n	8001626 <stmpe811_IO_Config+0x1e>
    stmpe811_IO_EnableIT(DeviceAddr);
 800168a:	f7ff fe60 	bl	800134e <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 800168e:	4631      	mov	r1, r6
 8001690:	4628      	mov	r0, r5
 8001692:	f7ff ffaa 	bl	80015ea <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8001696:	2200      	movs	r2, #0
 8001698:	4631      	mov	r1, r6
 800169a:	4628      	mov	r0, r5
 800169c:	f7ff fee4 	bl	8001468 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 80016a0:	2100      	movs	r1, #0
 80016a2:	4628      	mov	r0, r5
 80016a4:	f7ff fe9b 	bl	80013de <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_LOW);      
 80016a8:	2100      	movs	r1, #0
 80016aa:	4628      	mov	r0, r5
 80016ac:	f7ff fe88 	bl	80013c0 <stmpe811_SetITPolarity>
  uint8_t error_code = 0;
 80016b0:	2000      	movs	r0, #0
    break;
 80016b2:	e7b8      	b.n	8001626 <stmpe811_IO_Config+0x1e>
    stmpe811_IO_EnableIT(DeviceAddr);
 80016b4:	f7ff fe4b 	bl	800134e <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 80016b8:	4631      	mov	r1, r6
 80016ba:	4628      	mov	r0, r5
 80016bc:	f7ff ff95 	bl	80015ea <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 80016c0:	2200      	movs	r2, #0
 80016c2:	4631      	mov	r1, r6
 80016c4:	4628      	mov	r0, r5
 80016c6:	f7ff fecf 	bl	8001468 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 80016ca:	2100      	movs	r1, #0
 80016cc:	4628      	mov	r0, r5
 80016ce:	f7ff fe86 	bl	80013de <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 80016d2:	2104      	movs	r1, #4
 80016d4:	4628      	mov	r0, r5
 80016d6:	f7ff fe73 	bl	80013c0 <stmpe811_SetITPolarity>
  uint8_t error_code = 0;
 80016da:	2000      	movs	r0, #0
    break;    
 80016dc:	e7a3      	b.n	8001626 <stmpe811_IO_Config+0x1e>
  uint8_t error_code = 0;
 80016de:	4610      	mov	r0, r2
 80016e0:	e7a1      	b.n	8001626 <stmpe811_IO_Config+0x1e>
	...

080016e4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80016e4:	b500      	push	{lr}
 80016e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80016e8:	2100      	movs	r1, #0
 80016ea:	9101      	str	r1, [sp, #4]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <SPIx_MspInit+0x54>)
 80016ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44
 80016f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80016fc:	9201      	str	r2, [sp, #4]
 80016fe:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001700:	9102      	str	r1, [sp, #8]
 8001702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001704:	f042 0220 	orr.w	r2, r2, #32
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001714:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001718:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800171e:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001720:	2301      	movs	r3, #1
 8001722:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001724:	2305      	movs	r3, #5
 8001726:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001728:	a903      	add	r1, sp, #12
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <SPIx_MspInit+0x58>)
 800172c:	f001 fc54 	bl	8002fd8 <HAL_GPIO_Init>
}
 8001730:	b009      	add	sp, #36	; 0x24
 8001732:	f85d fb04 	ldr.w	pc, [sp], #4
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40021400 	.word	0x40021400

08001740 <I2Cx_MspInit>:
  if (hi2c->Instance == DISCOVERY_I2Cx)
 8001740:	6802      	ldr	r2, [r0, #0]
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <I2Cx_MspInit+0xac>)
 8001744:	429a      	cmp	r2, r3
 8001746:	d000      	beq.n	800174a <I2Cx_MspInit+0xa>
 8001748:	4770      	bx	lr
{
 800174a:	b530      	push	{r4, r5, lr}
 800174c:	b089      	sub	sp, #36	; 0x24
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800174e:	2500      	movs	r5, #0
 8001750:	9500      	str	r5, [sp, #0]
 8001752:	4c27      	ldr	r4, [pc, #156]	; (80017f0 <I2Cx_MspInit+0xb0>)
 8001754:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6323      	str	r3, [r4, #48]	; 0x30
 800175c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001766:	9501      	str	r5, [sp, #4]
 8001768:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6323      	str	r3, [r4, #48]	; 0x30
 8001770:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800177a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001780:	2312      	movs	r3, #18
 8001782:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001784:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001786:	2302      	movs	r3, #2
 8001788:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800178a:	2304      	movs	r3, #4
 800178c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800178e:	a903      	add	r1, sp, #12
 8001790:	4818      	ldr	r0, [pc, #96]	; (80017f4 <I2Cx_MspInit+0xb4>)
 8001792:	f001 fc21 	bl	8002fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800179a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800179c:	a903      	add	r1, sp, #12
 800179e:	4816      	ldr	r0, [pc, #88]	; (80017f8 <I2Cx_MspInit+0xb8>)
 80017a0:	f001 fc1a 	bl	8002fd8 <HAL_GPIO_Init>
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80017a4:	9502      	str	r5, [sp, #8]
 80017a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017ac:	6423      	str	r3, [r4, #64]	; 0x40
 80017ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2Cx_FORCE_RESET();
 80017b8:	6a23      	ldr	r3, [r4, #32]
 80017ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017be:	6223      	str	r3, [r4, #32]
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80017c0:	6a23      	ldr	r3, [r4, #32]
 80017c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017c6:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80017c8:	462a      	mov	r2, r5
 80017ca:	210f      	movs	r1, #15
 80017cc:	2048      	movs	r0, #72	; 0x48
 80017ce:	f001 f91f 	bl	8002a10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80017d2:	2048      	movs	r0, #72	; 0x48
 80017d4:	f001 f950 	bl	8002a78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80017d8:	462a      	mov	r2, r5
 80017da:	210f      	movs	r1, #15
 80017dc:	2049      	movs	r0, #73	; 0x49
 80017de:	f001 f917 	bl	8002a10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80017e2:	2049      	movs	r0, #73	; 0x49
 80017e4:	f001 f948 	bl	8002a78 <HAL_NVIC_EnableIRQ>
}
 80017e8:	b009      	add	sp, #36	; 0x24
 80017ea:	bd30      	pop	{r4, r5, pc}
 80017ec:	40005c00 	.word	0x40005c00
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020800 	.word	0x40020800

080017fc <I2Cx_ITConfig>:
{
 80017fc:	b510      	push	{r4, lr}
 80017fe:	b086      	sub	sp, #24
  STMPE811_INT_CLK_ENABLE();
 8001800:	2400      	movs	r4, #0
 8001802:	9400      	str	r4, [sp, #0]
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <I2Cx_ITConfig+0x4c>)
 8001806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8001818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800181c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800181e:	2301      	movs	r3, #1
 8001820:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001822:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8001824:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001828:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800182a:	a901      	add	r1, sp, #4
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <I2Cx_ITConfig+0x50>)
 800182e:	f001 fbd3 	bl	8002fd8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8001832:	4622      	mov	r2, r4
 8001834:	210f      	movs	r1, #15
 8001836:	2028      	movs	r0, #40	; 0x28
 8001838:	f001 f8ea 	bl	8002a10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800183c:	2028      	movs	r0, #40	; 0x28
 800183e:	f001 f91b 	bl	8002a78 <HAL_NVIC_EnableIRQ>
}
 8001842:	b006      	add	sp, #24
 8001844:	bd10      	pop	{r4, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40020000 	.word	0x40020000

08001850 <SPIx_Init>:
{
 8001850:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001852:	4810      	ldr	r0, [pc, #64]	; (8001894 <SPIx_Init+0x44>)
 8001854:	f003 fdde 	bl	8005414 <HAL_SPI_GetState>
 8001858:	b100      	cbz	r0, 800185c <SPIx_Init+0xc>
}
 800185a:	bd10      	pop	{r4, pc}
    SpiHandle.Instance = DISCOVERY_SPIx;
 800185c:	4c0d      	ldr	r4, [pc, #52]	; (8001894 <SPIx_Init+0x44>)
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <SPIx_Init+0x48>)
 8001860:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001862:	2318      	movs	r3, #24
 8001864:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001866:	2300      	movs	r3, #0
 8001868:	60a3      	str	r3, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800186a:	6163      	str	r3, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800186c:	6123      	str	r3, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800186e:	62a3      	str	r3, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001870:	2207      	movs	r2, #7
 8001872:	62e2      	str	r2, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001874:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001876:	6223      	str	r3, [r4, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	61a2      	str	r2, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800187e:	6263      	str	r3, [r4, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001880:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001884:	6063      	str	r3, [r4, #4]
    SPIx_MspInit(&SpiHandle);
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff ff2c 	bl	80016e4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800188c:	4620      	mov	r0, r4
 800188e:	f003 fa9f 	bl	8004dd0 <HAL_SPI_Init>
}
 8001892:	e7e2      	b.n	800185a <SPIx_Init+0xa>
 8001894:	20000db0 	.word	0x20000db0
 8001898:	40015000 	.word	0x40015000

0800189c <SPIx_Error>:
{
 800189c:	b508      	push	{r3, lr}
  HAL_SPI_DeInit(&SpiHandle);
 800189e:	4803      	ldr	r0, [pc, #12]	; (80018ac <SPIx_Error+0x10>)
 80018a0:	f003 faf5 	bl	8004e8e <HAL_SPI_DeInit>
  SPIx_Init();
 80018a4:	f7ff ffd4 	bl	8001850 <SPIx_Init>
}
 80018a8:	bd08      	pop	{r3, pc}
 80018aa:	bf00      	nop
 80018ac:	20000db0 	.word	0x20000db0

080018b0 <SPIx_Write>:
{
 80018b0:	b500      	push	{lr}
 80018b2:	b083      	sub	sp, #12
 80018b4:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <SPIx_Write+0x28>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	f10d 0106 	add.w	r1, sp, #6
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <SPIx_Write+0x2c>)
 80018c4:	f003 faf9 	bl	8004eba <HAL_SPI_Transmit>
  if(status != HAL_OK)
 80018c8:	b910      	cbnz	r0, 80018d0 <SPIx_Write+0x20>
}
 80018ca:	b003      	add	sp, #12
 80018cc:	f85d fb04 	ldr.w	pc, [sp], #4
    SPIx_Error();
 80018d0:	f7ff ffe4 	bl	800189c <SPIx_Error>
}
 80018d4:	e7f9      	b.n	80018ca <SPIx_Write+0x1a>
 80018d6:	bf00      	nop
 80018d8:	2000008c 	.word	0x2000008c
 80018dc:	20000db0 	.word	0x20000db0

080018e0 <SPIx_Read>:
{
 80018e0:	b500      	push	{lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	4602      	mov	r2, r0
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <SPIx_Read+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	a901      	add	r1, sp, #4
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <SPIx_Read+0x28>)
 80018ee:	f003 fcd7 	bl	80052a0 <HAL_SPI_Receive>
  if(status != HAL_OK)
 80018f2:	b918      	cbnz	r0, 80018fc <SPIx_Read+0x1c>
}
 80018f4:	9801      	ldr	r0, [sp, #4]
 80018f6:	b003      	add	sp, #12
 80018f8:	f85d fb04 	ldr.w	pc, [sp], #4
    SPIx_Error();
 80018fc:	f7ff ffce 	bl	800189c <SPIx_Error>
 8001900:	e7f8      	b.n	80018f4 <SPIx_Read+0x14>
 8001902:	bf00      	nop
 8001904:	2000008c 	.word	0x2000008c
 8001908:	20000db0 	.word	0x20000db0

0800190c <I2Cx_Init>:
{
 800190c:	b510      	push	{r4, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800190e:	480d      	ldr	r0, [pc, #52]	; (8001944 <I2Cx_Init+0x38>)
 8001910:	f002 fa72 	bl	8003df8 <HAL_I2C_GetState>
 8001914:	b100      	cbz	r0, 8001918 <I2Cx_Init+0xc>
}
 8001916:	bd10      	pop	{r4, pc}
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8001918:	4c0a      	ldr	r4, [pc, #40]	; (8001944 <I2Cx_Init+0x38>)
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <I2Cx_Init+0x3c>)
 800191c:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <I2Cx_Init+0x40>)
 8001920:	6063      	str	r3, [r4, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8001922:	2300      	movs	r3, #0
 8001924:	60a3      	str	r3, [r4, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8001926:	60e3      	str	r3, [r4, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001928:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800192c:	6122      	str	r2, [r4, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800192e:	6163      	str	r3, [r4, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8001930:	61a3      	str	r3, [r4, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001932:	61e3      	str	r3, [r4, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8001934:	6223      	str	r3, [r4, #32]
    I2Cx_MspInit(&I2cHandle);
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff ff02 	bl	8001740 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800193c:	4620      	mov	r0, r4
 800193e:	f001 ff3f 	bl	80037c0 <HAL_I2C_Init>
}
 8001942:	e7e8      	b.n	8001916 <I2Cx_Init+0xa>
 8001944:	2000cf30 	.word	0x2000cf30
 8001948:	40005c00 	.word	0x40005c00
 800194c:	000186a0 	.word	0x000186a0

08001950 <I2Cx_Error>:
{
 8001950:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&I2cHandle);
 8001952:	4803      	ldr	r0, [pc, #12]	; (8001960 <I2Cx_Error+0x10>)
 8001954:	f002 f812 	bl	800397c <HAL_I2C_DeInit>
  I2Cx_Init();
 8001958:	f7ff ffd8 	bl	800190c <I2Cx_Init>
}
 800195c:	bd08      	pop	{r3, pc}
 800195e:	bf00      	nop
 8001960:	2000cf30 	.word	0x2000cf30

08001964 <I2Cx_WriteData>:
  {
 8001964:	b500      	push	{lr}
 8001966:	b087      	sub	sp, #28
 8001968:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <I2Cx_WriteData+0x30>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2301      	movs	r3, #1
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	f10d 0217 	add.w	r2, sp, #23
 800197a:	9200      	str	r2, [sp, #0]
 800197c:	460a      	mov	r2, r1
 800197e:	4601      	mov	r1, r0
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <I2Cx_WriteData+0x34>)
 8001982:	f002 f815 	bl	80039b0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001986:	b910      	cbnz	r0, 800198e <I2Cx_WriteData+0x2a>
}
 8001988:	b007      	add	sp, #28
 800198a:	f85d fb04 	ldr.w	pc, [sp], #4
    I2Cx_Error();
 800198e:	f7ff ffdf 	bl	8001950 <I2Cx_Error>
}
 8001992:	e7f9      	b.n	8001988 <I2Cx_WriteData+0x24>
 8001994:	2000008c 	.word	0x2000008c
 8001998:	2000cf30 	.word	0x2000cf30

0800199c <I2Cx_ReadData>:
{
 800199c:	b500      	push	{lr}
 800199e:	b087      	sub	sp, #28
 80019a0:	460a      	mov	r2, r1
  uint8_t value = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <I2Cx_ReadData+0x38>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	2301      	movs	r3, #1
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	f10d 0117 	add.w	r1, sp, #23
 80019b6:	9100      	str	r1, [sp, #0]
 80019b8:	4601      	mov	r1, r0
 80019ba:	4807      	ldr	r0, [pc, #28]	; (80019d8 <I2Cx_ReadData+0x3c>)
 80019bc:	f002 f8aa 	bl	8003b14 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80019c0:	b920      	cbnz	r0, 80019cc <I2Cx_ReadData+0x30>
}
 80019c2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80019c6:	b007      	add	sp, #28
 80019c8:	f85d fb04 	ldr.w	pc, [sp], #4
    I2Cx_Error();
 80019cc:	f7ff ffc0 	bl	8001950 <I2Cx_Error>
 80019d0:	e7f7      	b.n	80019c2 <I2Cx_ReadData+0x26>
 80019d2:	bf00      	nop
 80019d4:	2000008c 	.word	0x2000008c
 80019d8:	2000cf30 	.word	0x2000cf30

080019dc <I2Cx_ReadBuffer>:
{
 80019dc:	b510      	push	{r4, lr}
 80019de:	b084      	sub	sp, #16
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80019e0:	4c08      	ldr	r4, [pc, #32]	; (8001a04 <I2Cx_ReadBuffer+0x28>)
 80019e2:	6864      	ldr	r4, [r4, #4]
 80019e4:	9402      	str	r4, [sp, #8]
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	9200      	str	r2, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	460a      	mov	r2, r1
 80019ee:	4601      	mov	r1, r0
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <I2Cx_ReadBuffer+0x2c>)
 80019f2:	f002 f88f 	bl	8003b14 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 80019f6:	b908      	cbnz	r0, 80019fc <I2Cx_ReadBuffer+0x20>
}
 80019f8:	b004      	add	sp, #16
 80019fa:	bd10      	pop	{r4, pc}
    I2Cx_Error();
 80019fc:	f7ff ffa8 	bl	8001950 <I2Cx_Error>
    return 1;
 8001a00:	2001      	movs	r0, #1
 8001a02:	e7f9      	b.n	80019f8 <I2Cx_ReadBuffer+0x1c>
 8001a04:	2000008c 	.word	0x2000008c
 8001a08:	2000cf30 	.word	0x2000cf30

08001a0c <BSP_PB_Init>:
{
 8001a0c:	b530      	push	{r4, r5, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	460c      	mov	r4, r1
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001a12:	4605      	mov	r5, r0
 8001a14:	b958      	cbnz	r0, 8001a2e <BSP_PB_Init+0x22>
 8001a16:	2300      	movs	r3, #0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <BSP_PB_Init+0x78>)
 8001a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	9b00      	ldr	r3, [sp, #0]
  if (ButtonMode == BUTTON_MODE_GPIO)
 8001a2e:	b11c      	cbz	r4, 8001a38 <BSP_PB_Init+0x2c>
  if (ButtonMode == BUTTON_MODE_EXTI)
 8001a30:	2c01      	cmp	r4, #1
 8001a32:	d010      	beq.n	8001a56 <BSP_PB_Init+0x4a>
}
 8001a34:	b007      	add	sp, #28
 8001a36:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a40:	2302      	movs	r3, #2
 8001a42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001a44:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <BSP_PB_Init+0x7c>)
 8001a48:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001a4c:	a901      	add	r1, sp, #4
 8001a4e:	6918      	ldr	r0, [r3, #16]
 8001a50:	f001 fac2 	bl	8002fd8 <HAL_GPIO_Init>
 8001a54:	e7ec      	b.n	8001a30 <BSP_PB_Init+0x24>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001a56:	2301      	movs	r3, #1
 8001a58:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2400      	movs	r4, #0
 8001a5c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001a5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a62:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <BSP_PB_Init+0x7c>)
 8001a66:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001a6a:	a901      	add	r1, sp, #4
 8001a6c:	6928      	ldr	r0, [r5, #16]
 8001a6e:	f001 fab3 	bl	8002fd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001a72:	4622      	mov	r2, r4
 8001a74:	210f      	movs	r1, #15
 8001a76:	2006      	movs	r0, #6
 8001a78:	f000 ffca 	bl	8002a10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001a7c:	2006      	movs	r0, #6
 8001a7e:	f000 fffb 	bl	8002a78 <HAL_NVIC_EnableIRQ>
}
 8001a82:	e7d7      	b.n	8001a34 <BSP_PB_Init+0x28>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	2000008c 	.word	0x2000008c

08001a8c <BSP_PB_GetState>:
{
 8001a8c:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <BSP_PB_GetState+0x14>)
 8001a90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a94:	2101      	movs	r1, #1
 8001a96:	6900      	ldr	r0, [r0, #16]
 8001a98:	f001 fc3c 	bl	8003314 <HAL_GPIO_ReadPin>
}
 8001a9c:	bd08      	pop	{r3, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000008c 	.word	0x2000008c

08001aa4 <LCD_IO_Init>:
  */
void LCD_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <LCD_IO_Init+0xc0>)
 8001aa6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001aaa:	b103      	cbz	r3, 8001aae <LCD_IO_Init+0xa>
 8001aac:	4770      	bx	lr
{
 8001aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ab2:	b088      	sub	sp, #32
  {
    Is_LCD_IO_Initialized = 1; 
 8001ab4:	2601      	movs	r6, #1
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <LCD_IO_Init+0xc0>)
 8001ab8:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001abc:	2500      	movs	r5, #0
 8001abe:	9500      	str	r5, [sp, #0]
 8001ac0:	4c29      	ldr	r4, [pc, #164]	; (8001b68 <LCD_IO_Init+0xc4>)
 8001ac2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6323      	str	r3, [r4, #48]	; 0x30
 8001aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad8:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ada:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001adc:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ade:	f04f 0802 	mov.w	r8, #2
 8001ae2:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001ae6:	4f21      	ldr	r7, [pc, #132]	; (8001b6c <LCD_IO_Init+0xc8>)
 8001ae8:	a903      	add	r1, sp, #12
 8001aea:	4638      	mov	r0, r7
 8001aec:	f001 fa74 	bl	8002fd8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001af0:	9501      	str	r5, [sp, #4]
 8001af2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6323      	str	r3, [r4, #48]	; 0x30
 8001afa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b08:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b0a:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b0c:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b0e:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001b12:	a903      	add	r1, sp, #12
 8001b14:	4638      	mov	r0, r7
 8001b16:	f001 fa5f 	bl	8002fd8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b1a:	9502      	str	r5, [sp, #8]
 8001b1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6323      	str	r3, [r4, #48]	; 0x30
 8001b24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	9b02      	ldr	r3, [sp, #8]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001b2e:	2704      	movs	r7, #4
 8001b30:	9703      	str	r7, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b32:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b34:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b36:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b3a:	f5a4 5440 	sub.w	r4, r4, #12288	; 0x3000
 8001b3e:	a903      	add	r1, sp, #12
 8001b40:	4620      	mov	r0, r4
 8001b42:	f001 fa49 	bl	8002fd8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001b46:	462a      	mov	r2, r5
 8001b48:	4639      	mov	r1, r7
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f001 fbe9 	bl	8003322 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001b50:	4632      	mov	r2, r6
 8001b52:	4639      	mov	r1, r7
 8001b54:	4620      	mov	r0, r4
 8001b56:	f001 fbe4 	bl	8003322 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001b5a:	f7ff fe79 	bl	8001850 <SPIx_Init>
  }
}
 8001b5e:	b008      	add	sp, #32
 8001b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b64:	20000db0 	.word	0x20000db0
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020c00 	.word	0x40020c00

08001b70 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	4604      	mov	r4, r0
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7a:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <LCD_IO_WriteData+0x30>)
 8001b7c:	f001 fbd1 	bl	8003322 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001b80:	4d08      	ldr	r5, [pc, #32]	; (8001ba4 <LCD_IO_WriteData+0x34>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	2104      	movs	r1, #4
 8001b86:	4628      	mov	r0, r5
 8001b88:	f001 fbcb 	bl	8003322 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7ff fe8f 	bl	80018b0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b92:	2201      	movs	r2, #1
 8001b94:	2104      	movs	r1, #4
 8001b96:	4628      	mov	r0, r5
 8001b98:	f001 fbc3 	bl	8003322 <HAL_GPIO_WritePin>
}
 8001b9c:	bd38      	pop	{r3, r4, r5, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40020800 	.word	0x40020800

08001ba8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4604      	mov	r4, r0
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <LCD_IO_WriteReg+0x30>)
 8001bb4:	f001 fbb5 	bl	8003322 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001bb8:	4d08      	ldr	r5, [pc, #32]	; (8001bdc <LCD_IO_WriteReg+0x34>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	f001 fbaf 	bl	8003322 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff fe73 	bl	80018b0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2104      	movs	r1, #4
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f001 fba7 	bl	8003322 <HAL_GPIO_WritePin>
}
 8001bd4:	bd38      	pop	{r3, r4, r5, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40020800 	.word	0x40020800

08001be0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	4605      	mov	r5, r0
 8001be4:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001be6:	4e10      	ldr	r6, [pc, #64]	; (8001c28 <LCD_IO_ReadData+0x48>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	2104      	movs	r1, #4
 8001bec:	4630      	mov	r0, r6
 8001bee:	f001 fb98 	bl	8003322 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bf2:	4f0e      	ldr	r7, [pc, #56]	; (8001c2c <LCD_IO_ReadData+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bfa:	4638      	mov	r0, r7
 8001bfc:	f001 fb91 	bl	8003322 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001c00:	4628      	mov	r0, r5
 8001c02:	f7ff fe55 	bl	80018b0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001c06:	4620      	mov	r0, r4
 8001c08:	f7ff fe6a 	bl	80018e0 <SPIx_Read>
 8001c0c:	4604      	mov	r4, r0

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c14:	4638      	mov	r0, r7
 8001c16:	f001 fb84 	bl	8003322 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f001 fb7f 	bl	8003322 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 8001c24:	4620      	mov	r0, r4
 8001c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020c00 	.word	0x40020c00

08001c30 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c30:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8001c32:	f000 fec7 	bl	80029c4 <HAL_Delay>
}
 8001c36:	bd08      	pop	{r3, pc}

08001c38 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8001c38:	b508      	push	{r3, lr}
  I2Cx_Init();
 8001c3a:	f7ff fe67 	bl	800190c <I2Cx_Init>
}
 8001c3e:	bd08      	pop	{r3, pc}

08001c40 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001c40:	b508      	push	{r3, lr}
  I2Cx_ITConfig();
 8001c42:	f7ff fddb 	bl	80017fc <I2Cx_ITConfig>
}
 8001c46:	bd08      	pop	{r3, pc}

08001c48 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c48:	b508      	push	{r3, lr}
  I2Cx_WriteData(Addr, Reg, Value);
 8001c4a:	f7ff fe8b 	bl	8001964 <I2Cx_WriteData>
}
 8001c4e:	bd08      	pop	{r3, pc}

08001c50 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001c50:	b508      	push	{r3, lr}
  return I2Cx_ReadData(Addr, Reg);
 8001c52:	f7ff fea3 	bl	800199c <I2Cx_ReadData>
}
 8001c56:	bd08      	pop	{r3, pc}

08001c58 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001c58:	b508      	push	{r3, lr}
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001c5a:	f7ff febf 	bl	80019dc <I2Cx_ReadBuffer>
}
 8001c5e:	b280      	uxth	r0, r0
 8001c60:	bd08      	pop	{r3, pc}

08001c62 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8001c62:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8001c64:	f000 feae 	bl	80029c4 <HAL_Delay>
}
 8001c68:	bd08      	pop	{r3, pc}
	...

08001c6c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4616      	mov	r6, r2
 8001c76:	461f      	mov	r7, r3
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001c78:	4811      	ldr	r0, [pc, #68]	; (8001cc0 <FillBuffer+0x54>)
 8001c7a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001c7e:	6043      	str	r3, [r0, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001c80:	2300      	movs	r3, #0
 8001c82:	6083      	str	r3, [r0, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001c84:	9b08      	ldr	r3, [sp, #32]
 8001c86:	60c3      	str	r3, [r0, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <FillBuffer+0x58>)
 8001c8a:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001c8c:	f001 f85a 	bl	8002d44 <HAL_DMA2D_Init>
 8001c90:	b108      	cbz	r0, 8001c96 <FillBuffer+0x2a>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
      }
    }
  } 
}
 8001c92:	b003      	add	sp, #12
 8001c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001c96:	4621      	mov	r1, r4
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <FillBuffer+0x54>)
 8001c9a:	f001 f93b 	bl	8002f14 <HAL_DMA2D_ConfigLayer>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d1f7      	bne.n	8001c92 <FillBuffer+0x26>
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001ca2:	9700      	str	r7, [sp, #0]
 8001ca4:	4633      	mov	r3, r6
 8001ca6:	462a      	mov	r2, r5
 8001ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <FillBuffer+0x54>)
 8001cac:	f001 f877 	bl	8002d9e <HAL_DMA2D_Start>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d1ee      	bne.n	8001c92 <FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001cb4:	210a      	movs	r1, #10
 8001cb6:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <FillBuffer+0x54>)
 8001cb8:	f001 f88d 	bl	8002dd6 <HAL_DMA2D_PollForTransfer>
}
 8001cbc:	e7e9      	b.n	8001c92 <FillBuffer+0x26>
 8001cbe:	bf00      	nop
 8001cc0:	20000e0c 	.word	0x20000e0c
 8001cc4:	4002b000 	.word	0x4002b000

08001cc8 <BSP_LCD_GetXSize>:
{
 8001cc8:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8001cca:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <BSP_LCD_GetXSize+0xc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	4798      	blx	r3
}
 8001cd2:	bd08      	pop	{r3, pc}
 8001cd4:	2000d02c 	.word	0x2000d02c

08001cd8 <BSP_LCD_GetYSize>:
{
 8001cd8:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8001cda:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <BSP_LCD_GetYSize+0xc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	4798      	blx	r3
}
 8001ce2:	bd08      	pop	{r3, pc}
 8001ce4:	2000d02c 	.word	0x2000d02c

08001ce8 <BSP_LCD_LayerDefaultInit>:
{     
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	b08e      	sub	sp, #56	; 0x38
 8001cec:	4604      	mov	r4, r0
 8001cee:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 8001cf0:	2500      	movs	r5, #0
 8001cf2:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001cf4:	f7ff ffe8 	bl	8001cc8 <BSP_LCD_GetXSize>
 8001cf8:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 8001cfa:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001cfc:	f7ff ffec 	bl	8001cd8 <BSP_LCD_GetYSize>
 8001d00:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d02:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 8001d04:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 8001d06:	23ff      	movs	r3, #255	; 0xff
 8001d08:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 8001d0a:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8001d0c:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8001d10:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 8001d14:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001d18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d1c:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001d1e:	2307      	movs	r3, #7
 8001d20:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001d22:	f7ff ffd1 	bl	8001cc8 <BSP_LCD_GetXSize>
 8001d26:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001d28:	f7ff ffd6 	bl	8001cd8 <BSP_LCD_GetYSize>
 8001d2c:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001d2e:	4d0c      	ldr	r5, [pc, #48]	; (8001d60 <BSP_LCD_LayerDefaultInit+0x78>)
 8001d30:	4622      	mov	r2, r4
 8001d32:	a901      	add	r1, sp, #4
 8001d34:	4628      	mov	r0, r5
 8001d36:	f002 f9f5 	bl	8004124 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001d3a:	480a      	ldr	r0, [pc, #40]	; (8001d64 <BSP_LCD_LayerDefaultInit+0x7c>)
 8001d3c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001d40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44
  DrawProp[LayerIndex].pFont     = &Font24;
 8001d4a:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <BSP_LCD_LayerDefaultInit+0x80>)
 8001d4c:	649a      	str	r2, [r3, #72]	; 0x48
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001d4e:	461c      	mov	r4, r3
 8001d50:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001d54:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001d56:	4628      	mov	r0, r5
 8001d58:	f002 fa56 	bl	8004208 <HAL_LTDC_EnableDither>
}
 8001d5c:	b00e      	add	sp, #56	; 0x38
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
 8001d60:	2000cf84 	.word	0x2000cf84
 8001d64:	20000e0c 	.word	0x20000e0c
 8001d68:	200000a0 	.word	0x200000a0

08001d6c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8001d6c:	4b01      	ldr	r3, [pc, #4]	; (8001d74 <BSP_LCD_SelectLayer+0x8>)
 8001d6e:	6598      	str	r0, [r3, #88]	; 0x58
}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000e0c 	.word	0x20000e0c

08001d78 <BSP_LCD_SetLayerVisible>:
  if(state == ENABLE)
 8001d78:	2901      	cmp	r1, #1
 8001d7a:	d010      	beq.n	8001d9e <BSP_LCD_SetLayerVisible+0x26>
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <BSP_LCD_SetLayerVisible+0x3c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 8001d84:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <BSP_LCD_SetLayerVisible+0x3c>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001d9c:	4770      	bx	lr
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <BSP_LCD_SetLayerVisible+0x3c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 8001da6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8001db2:	e7ed      	b.n	8001d90 <BSP_LCD_SetLayerVisible+0x18>
 8001db4:	2000cf84 	.word	0x2000cf84

08001db8 <BSP_LCD_SetColorKeying>:
{  
 8001db8:	b538      	push	{r3, r4, r5, lr}
 8001dba:	4604      	mov	r4, r0
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8001dbc:	4d04      	ldr	r5, [pc, #16]	; (8001dd0 <BSP_LCD_SetColorKeying+0x18>)
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f002 f9dd 	bl	8004180 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f002 f9fe 	bl	80041ca <HAL_LTDC_EnableColorKeying>
}
 8001dce:	bd38      	pop	{r3, r4, r5, pc}
 8001dd0:	2000cf84 	.word	0x2000cf84

08001dd4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <BSP_LCD_SetTextColor+0x10>)
 8001dd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ddc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001de0:	6418      	str	r0, [r3, #64]	; 0x40
}
 8001de2:	4770      	bx	lr
 8001de4:	20000e0c 	.word	0x20000e0c

08001de8 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <BSP_LCD_SetBackColor+0x10>)
 8001dea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001df0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001df4:	6458      	str	r0, [r3, #68]	; 0x44
}
 8001df6:	4770      	bx	lr
 8001df8:	20000e0c 	.word	0x20000e0c

08001dfc <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <BSP_LCD_SetFont+0x10>)
 8001dfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001e08:	6498      	str	r0, [r3, #72]	; 0x48
}
 8001e0a:	4770      	bx	lr
 8001e0c:	20000e0c 	.word	0x20000e0c

08001e10 <BSP_LCD_Clear>:
{ 
 8001e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e12:	b083      	sub	sp, #12
 8001e14:	4605      	mov	r5, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <BSP_LCD_Clear+0x34>)
 8001e18:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <BSP_LCD_Clear+0x38>)
 8001e1c:	2334      	movs	r3, #52	; 0x34
 8001e1e:	fb03 2306 	mla	r3, r3, r6, r2
 8001e22:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001e24:	f7ff ff50 	bl	8001cc8 <BSP_LCD_GetXSize>
 8001e28:	4604      	mov	r4, r0
 8001e2a:	f7ff ff55 	bl	8001cd8 <BSP_LCD_GetYSize>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	9501      	str	r5, [sp, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	9200      	str	r2, [sp, #0]
 8001e36:	4622      	mov	r2, r4
 8001e38:	4639      	mov	r1, r7
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	f7ff ff16 	bl	8001c6c <FillBuffer>
}
 8001e40:	b003      	add	sp, #12
 8001e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e44:	20000e0c 	.word	0x20000e0c
 8001e48:	2000cf84 	.word	0x2000cf84

08001e4c <BSP_LCD_DrawHLine>:
{
 8001e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	4607      	mov	r7, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	4616      	mov	r6, r2
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001e58:	4d0e      	ldr	r5, [pc, #56]	; (8001e94 <BSP_LCD_DrawHLine+0x48>)
 8001e5a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <BSP_LCD_DrawHLine+0x4c>)
 8001e5e:	2134      	movs	r1, #52	; 0x34
 8001e60:	fb01 2303 	mla	r3, r1, r3, r2
 8001e64:	f8d3 805c 	ldr.w	r8, [r3, #92]	; 0x5c
 8001e68:	f7ff ff2e 	bl	8001cc8 <BSP_LCD_GetXSize>
 8001e6c:	fb00 7104 	mla	r1, r0, r4, r7
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e72:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001e76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2301      	movs	r3, #1
 8001e84:	4632      	mov	r2, r6
 8001e86:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8001e8a:	f7ff feef 	bl	8001c6c <FillBuffer>
}
 8001e8e:	b002      	add	sp, #8
 8001e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e94:	20000e0c 	.word	0x20000e0c
 8001e98:	2000cf84 	.word	0x2000cf84

08001e9c <BSP_LCD_DrawVLine>:
{
 8001e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	4607      	mov	r7, r0
 8001ea4:	460d      	mov	r5, r1
 8001ea6:	4616      	mov	r6, r2
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ea8:	4c11      	ldr	r4, [pc, #68]	; (8001ef0 <BSP_LCD_DrawVLine+0x54>)
 8001eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001eac:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <BSP_LCD_DrawVLine+0x58>)
 8001eae:	2134      	movs	r1, #52	; 0x34
 8001eb0:	fb01 2303 	mla	r3, r1, r3, r2
 8001eb4:	f8d3 805c 	ldr.w	r8, [r3, #92]	; 0x5c
 8001eb8:	f7ff ff06 	bl	8001cc8 <BSP_LCD_GetXSize>
 8001ebc:	fb00 7005 	mla	r0, r0, r5, r7
 8001ec0:	eb08 0880 	add.w	r8, r8, r0, lsl #2
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001ec4:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8001ec6:	f7ff feff 	bl	8001cc8 <BSP_LCD_GetXSize>
 8001eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ed0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	3801      	subs	r0, #1
 8001eda:	9000      	str	r0, [sp, #0]
 8001edc:	4633      	mov	r3, r6
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	4638      	mov	r0, r7
 8001ee4:	f7ff fec2 	bl	8001c6c <FillBuffer>
}
 8001ee8:	b002      	add	sp, #8
 8001eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000e0c 	.word	0x20000e0c
 8001ef4:	2000cf84 	.word	0x2000cf84

08001ef8 <BSP_LCD_DrawRect>:
{
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	4617      	mov	r7, r2
 8001f00:	461e      	mov	r6, r3
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001f02:	f7ff ffa3 	bl	8001e4c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001f06:	19a9      	adds	r1, r5, r6
 8001f08:	463a      	mov	r2, r7
 8001f0a:	b289      	uxth	r1, r1
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff ff9d 	bl	8001e4c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001f12:	4632      	mov	r2, r6
 8001f14:	4629      	mov	r1, r5
 8001f16:	4620      	mov	r0, r4
 8001f18:	f7ff ffc0 	bl	8001e9c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001f1c:	19e0      	adds	r0, r4, r7
 8001f1e:	4632      	mov	r2, r6
 8001f20:	4629      	mov	r1, r5
 8001f22:	b280      	uxth	r0, r0
 8001f24:	f7ff ffba 	bl	8001e9c <BSP_LCD_DrawVLine>
}
 8001f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f2c <BSP_LCD_FillRect>:
{
 8001f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f30:	b083      	sub	sp, #12
 8001f32:	4681      	mov	r9, r0
 8001f34:	460e      	mov	r6, r1
 8001f36:	4617      	mov	r7, r2
 8001f38:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001f3a:	4c15      	ldr	r4, [pc, #84]	; (8001f90 <BSP_LCD_FillRect+0x64>)
 8001f3c:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8001f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f42:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8001f46:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8001f48:	f7ff ff44 	bl	8001dd4 <BSP_LCD_SetTextColor>
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <BSP_LCD_FillRect+0x68>)
 8001f50:	2134      	movs	r1, #52	; 0x34
 8001f52:	fb01 2303 	mla	r3, r1, r3, r2
 8001f56:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8001f58:	f7ff feb6 	bl	8001cc8 <BSP_LCD_GetXSize>
 8001f5c:	fb00 9006 	mla	r0, r0, r6, r9
 8001f60:	eb05 0680 	add.w	r6, r5, r0, lsl #2
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001f64:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8001f66:	f7ff feaf 	bl	8001cc8 <BSP_LCD_GetXSize>
 8001f6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	1bc0      	subs	r0, r0, r7
 8001f7a:	9000      	str	r0, [sp, #0]
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	463a      	mov	r2, r7
 8001f80:	4631      	mov	r1, r6
 8001f82:	4628      	mov	r0, r5
 8001f84:	f7ff fe72 	bl	8001c6c <FillBuffer>
}
 8001f88:	b003      	add	sp, #12
 8001f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000e0c 	.word	0x20000e0c
 8001f94:	2000cf84 	.word	0x2000cf84

08001f98 <BSP_LCD_DisplayOn>:
{
 8001f98:	b508      	push	{r3, lr}
  if(LcdDrv->DisplayOn != NULL)
 8001f9a:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <BSP_LCD_DisplayOn+0x10>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	b103      	cbz	r3, 8001fa4 <BSP_LCD_DisplayOn+0xc>
    LcdDrv->DisplayOn();
 8001fa2:	4798      	blx	r3
}
 8001fa4:	bd08      	pop	{r3, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000d02c 	.word	0x2000d02c

08001fac <BSP_LCD_MspInit>:
{
 8001fac:	b530      	push	{r4, r5, lr}
 8001fae:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	9201      	str	r2, [sp, #4]
 8001fb4:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <BSP_LCD_MspInit+0x12c>)
 8001fb6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001fb8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001fbc:	6459      	str	r1, [r3, #68]	; 0x44
 8001fbe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001fc0:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8001fc4:	9101      	str	r1, [sp, #4]
 8001fc6:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001fc8:	9202      	str	r2, [sp, #8]
 8001fca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fcc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001fd0:	6319      	str	r1, [r3, #48]	; 0x30
 8001fd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fd4:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001fd8:	9102      	str	r1, [sp, #8]
 8001fda:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	9203      	str	r2, [sp, #12]
 8001fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe0:	f041 0101 	orr.w	r1, r1, #1
 8001fe4:	6319      	str	r1, [r3, #48]	; 0x30
 8001fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe8:	f001 0101 	and.w	r1, r1, #1
 8001fec:	9103      	str	r1, [sp, #12]
 8001fee:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	9204      	str	r2, [sp, #16]
 8001ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff4:	f041 0102 	orr.w	r1, r1, #2
 8001ff8:	6319      	str	r1, [r3, #48]	; 0x30
 8001ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ffc:	f001 0102 	and.w	r1, r1, #2
 8002000:	9104      	str	r1, [sp, #16]
 8002002:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002004:	9205      	str	r2, [sp, #20]
 8002006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002008:	f041 0104 	orr.w	r1, r1, #4
 800200c:	6319      	str	r1, [r3, #48]	; 0x30
 800200e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002010:	f001 0104 	and.w	r1, r1, #4
 8002014:	9105      	str	r1, [sp, #20]
 8002016:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002018:	9206      	str	r2, [sp, #24]
 800201a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800201c:	f041 0108 	orr.w	r1, r1, #8
 8002020:	6319      	str	r1, [r3, #48]	; 0x30
 8002022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002024:	f001 0108 	and.w	r1, r1, #8
 8002028:	9106      	str	r1, [sp, #24]
 800202a:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800202c:	9207      	str	r2, [sp, #28]
 800202e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002030:	f041 0120 	orr.w	r1, r1, #32
 8002034:	6319      	str	r1, [r3, #48]	; 0x30
 8002036:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002038:	f001 0120 	and.w	r1, r1, #32
 800203c:	9107      	str	r1, [sp, #28]
 800203e:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002040:	9208      	str	r2, [sp, #32]
 8002042:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002044:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002048:	6319      	str	r1, [r3, #48]	; 0x30
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002050:	9308      	str	r3, [sp, #32]
 8002052:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002054:	f641 0358 	movw	r3, #6232	; 0x1858
 8002058:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800205e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002060:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002062:	230e      	movs	r3, #14
 8002064:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002066:	a909      	add	r1, sp, #36	; 0x24
 8002068:	481c      	ldr	r0, [pc, #112]	; (80020dc <BSP_LCD_MspInit+0x130>)
 800206a:	f000 ffb5 	bl	8002fd8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800206e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002072:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002074:	4d1a      	ldr	r5, [pc, #104]	; (80020e0 <BSP_LCD_MspInit+0x134>)
 8002076:	a909      	add	r1, sp, #36	; 0x24
 8002078:	4628      	mov	r0, r5
 800207a:	f000 ffad 	bl	8002fd8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800207e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002082:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002084:	a909      	add	r1, sp, #36	; 0x24
 8002086:	4817      	ldr	r0, [pc, #92]	; (80020e4 <BSP_LCD_MspInit+0x138>)
 8002088:	f000 ffa6 	bl	8002fd8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800208c:	2348      	movs	r3, #72	; 0x48
 800208e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002090:	a909      	add	r1, sp, #36	; 0x24
 8002092:	4815      	ldr	r0, [pc, #84]	; (80020e8 <BSP_LCD_MspInit+0x13c>)
 8002094:	f000 ffa0 	bl	8002fd8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800209c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800209e:	a909      	add	r1, sp, #36	; 0x24
 80020a0:	4812      	ldr	r0, [pc, #72]	; (80020ec <BSP_LCD_MspInit+0x140>)
 80020a2:	f000 ff99 	bl	8002fd8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80020a6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80020aa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80020ac:	4c10      	ldr	r4, [pc, #64]	; (80020f0 <BSP_LCD_MspInit+0x144>)
 80020ae:	a909      	add	r1, sp, #36	; 0x24
 80020b0:	4620      	mov	r0, r4
 80020b2:	f000 ff91 	bl	8002fd8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80020b6:	2303      	movs	r3, #3
 80020b8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80020ba:	2309      	movs	r3, #9
 80020bc:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80020be:	a909      	add	r1, sp, #36	; 0x24
 80020c0:	4628      	mov	r0, r5
 80020c2:	f000 ff89 	bl	8002fd8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80020c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80020cc:	a909      	add	r1, sp, #36	; 0x24
 80020ce:	4620      	mov	r0, r4
 80020d0:	f000 ff82 	bl	8002fd8 <HAL_GPIO_Init>
}
 80020d4:	b00f      	add	sp, #60	; 0x3c
 80020d6:	bd30      	pop	{r4, r5, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40021400 	.word	0x40021400
 80020f0:	40021800 	.word	0x40021800

080020f4 <BSP_LCD_Init>:
{ 
 80020f4:	b538      	push	{r3, r4, r5, lr}
    LtdcHandler.Instance = LTDC;
 80020f6:	4c20      	ldr	r4, [pc, #128]	; (8002178 <BSP_LCD_Init+0x84>)
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <BSP_LCD_Init+0x88>)
 80020fa:	6023      	str	r3, [r4, #0]
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80020fc:	2309      	movs	r3, #9
 80020fe:	6163      	str	r3, [r4, #20]
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002100:	2301      	movs	r3, #1
 8002102:	61a3      	str	r3, [r4, #24]
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002104:	231d      	movs	r3, #29
 8002106:	61e3      	str	r3, [r4, #28]
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002108:	2303      	movs	r3, #3
 800210a:	6223      	str	r3, [r4, #32]
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800210c:	f240 130d 	movw	r3, #269	; 0x10d
 8002110:	6263      	str	r3, [r4, #36]	; 0x24
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002112:	f240 1343 	movw	r3, #323	; 0x143
 8002116:	62a3      	str	r3, [r4, #40]	; 0x28
    LtdcHandler.Init.TotalWidth = 279;
 8002118:	f240 1317 	movw	r3, #279	; 0x117
 800211c:	62e3      	str	r3, [r4, #44]	; 0x2c
    LtdcHandler.Init.TotalHeigh = 327;
 800211e:	f240 1347 	movw	r3, #327	; 0x147
 8002122:	6323      	str	r3, [r4, #48]	; 0x30
    LtdcHandler.Init.Backcolor.Red= 0;
 8002124:	2500      	movs	r5, #0
 8002126:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800212a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800212e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002132:	4813      	ldr	r0, [pc, #76]	; (8002180 <BSP_LCD_Init+0x8c>)
 8002134:	2308      	movs	r3, #8
 8002136:	65c3      	str	r3, [r0, #92]	; 0x5c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002138:	23c0      	movs	r3, #192	; 0xc0
 800213a:	66c3      	str	r3, [r0, #108]	; 0x6c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800213c:	2304      	movs	r3, #4
 800213e:	6743      	str	r3, [r0, #116]	; 0x74
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002144:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002148:	305c      	adds	r0, #92	; 0x5c
 800214a:	f002 fbcd 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800214e:	6065      	str	r5, [r4, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002150:	60a5      	str	r5, [r4, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002152:	60e5      	str	r5, [r4, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002154:	6125      	str	r5, [r4, #16]
    BSP_LCD_MspInit();
 8002156:	f7ff ff29 	bl	8001fac <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800215a:	4620      	mov	r0, r4
 800215c:	f001 ff68 	bl	8004030 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <BSP_LCD_Init+0x90>)
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <BSP_LCD_Init+0x94>)
 8002164:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4798      	blx	r3
    BSP_SDRAM_Init();
 800216a:	f000 fb25 	bl	80027b8 <BSP_SDRAM_Init>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800216e:	4807      	ldr	r0, [pc, #28]	; (800218c <BSP_LCD_Init+0x98>)
 8002170:	f7ff fe44 	bl	8001dfc <BSP_LCD_SetFont>
}  
 8002174:	4628      	mov	r0, r5
 8002176:	bd38      	pop	{r3, r4, r5, pc}
 8002178:	2000cf84 	.word	0x2000cf84
 800217c:	40016800 	.word	0x40016800
 8002180:	20000e0c 	.word	0x20000e0c
 8002184:	20000000 	.word	0x20000000
 8002188:	2000d02c 	.word	0x2000d02c
 800218c:	200000a0 	.word	0x200000a0

08002190 <BSP_LCD_DrawPixel>:
{
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	4606      	mov	r6, r0
 8002194:	460c      	mov	r4, r1
 8002196:	4615      	mov	r5, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <BSP_LCD_DrawPixel+0x24>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <BSP_LCD_DrawPixel+0x28>)
 800219e:	2134      	movs	r1, #52	; 0x34
 80021a0:	fb01 2303 	mla	r3, r1, r3, r2
 80021a4:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80021a6:	f7ff fd8f 	bl	8001cc8 <BSP_LCD_GetXSize>
 80021aa:	fb00 6004 	mla	r0, r0, r4, r6
 80021ae:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 80021b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021b4:	20000e0c 	.word	0x20000e0c
 80021b8:	2000cf84 	.word	0x2000cf84

080021bc <DrawChar>:
{
 80021bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c0:	b083      	sub	sp, #12
 80021c2:	4681      	mov	r9, r0
 80021c4:	460e      	mov	r6, r1
 80021c6:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <DrawChar+0xdc>)
 80021ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80021d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	88da      	ldrh	r2, [r3, #6]
 80021d8:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80021da:	889d      	ldrh	r5, [r3, #4]
  offset = 8 *((width + 7)/8) -  width ;
 80021dc:	f105 0b07 	add.w	fp, r5, #7
 80021e0:	ea4f 0beb 	mov.w	fp, fp, asr #3
 80021e4:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 80021e8:	fa5f f888 	uxtb.w	r8, r8
 80021ec:	b2eb      	uxtb	r3, r5
 80021ee:	eba8 0803 	sub.w	r8, r8, r3
 80021f2:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 80021f6:	f04f 0a00 	mov.w	sl, #0
 80021fa:	e033      	b.n	8002264 <DrawChar+0xa8>
      line =  pchar[0];      
 80021fc:	9a00      	ldr	r2, [sp, #0]
 80021fe:	5cd7      	ldrb	r7, [r2, r3]
    for (j = 0; j < width; j++)
 8002200:	2400      	movs	r4, #0
 8002202:	e013      	b.n	800222c <DrawChar+0x70>
      line =  (pchar[0]<< 8) | pchar[1];
 8002204:	9900      	ldr	r1, [sp, #0]
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	7857      	ldrb	r7, [r2, #1]
 800220a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 800220e:	e7f7      	b.n	8002200 <DrawChar+0x44>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <DrawChar+0xdc>)
 8002212:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002214:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002218:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800221c:	eb09 0004 	add.w	r0, r9, r4
 8002220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002222:	4631      	mov	r1, r6
 8002224:	b280      	uxth	r0, r0
 8002226:	f7ff ffb3 	bl	8002190 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800222a:	3401      	adds	r4, #1
 800222c:	42a5      	cmp	r5, r4
 800222e:	d915      	bls.n	800225c <DrawChar+0xa0>
      if(line & (1 << (width- j + offset- 1))) 
 8002230:	1b2b      	subs	r3, r5, r4
 8002232:	4443      	add	r3, r8
 8002234:	3b01      	subs	r3, #1
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	423b      	tst	r3, r7
 800223e:	d0e7      	beq.n	8002210 <DrawChar+0x54>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002240:	4b15      	ldr	r3, [pc, #84]	; (8002298 <DrawChar+0xdc>)
 8002242:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002244:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002248:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800224c:	eb09 0004 	add.w	r0, r9, r4
 8002250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002252:	4631      	mov	r1, r6
 8002254:	b280      	uxth	r0, r0
 8002256:	f7ff ff9b 	bl	8002190 <BSP_LCD_DrawPixel>
 800225a:	e7e6      	b.n	800222a <DrawChar+0x6e>
    Ypos++;
 800225c:	3601      	adds	r6, #1
 800225e:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 8002260:	f10a 0a01 	add.w	sl, sl, #1
 8002264:	9b01      	ldr	r3, [sp, #4]
 8002266:	4553      	cmp	r3, sl
 8002268:	d912      	bls.n	8002290 <DrawChar+0xd4>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800226a:	fb0a f30b 	mul.w	r3, sl, fp
 800226e:	9a00      	ldr	r2, [sp, #0]
 8002270:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8002272:	f1bb 0f01 	cmp.w	fp, #1
 8002276:	d0c1      	beq.n	80021fc <DrawChar+0x40>
 8002278:	f1bb 0f02 	cmp.w	fp, #2
 800227c:	d0c2      	beq.n	8002204 <DrawChar+0x48>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800227e:	9900      	ldr	r1, [sp, #0]
 8002280:	5ccb      	ldrb	r3, [r1, r3]
 8002282:	7857      	ldrb	r7, [r2, #1]
 8002284:	023f      	lsls	r7, r7, #8
 8002286:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 800228a:	7893      	ldrb	r3, [r2, #2]
 800228c:	431f      	orrs	r7, r3
      break;
 800228e:	e7b7      	b.n	8002200 <DrawChar+0x44>
}
 8002290:	b003      	add	sp, #12
 8002292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002296:	bf00      	nop
 8002298:	20000e0c 	.word	0x20000e0c

0800229c <BSP_LCD_DisplayChar>:
{
 800229c:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <BSP_LCD_DisplayChar+0x2c>)
 80022a0:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80022a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80022a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80022aa:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80022ac:	6825      	ldr	r5, [r4, #0]
 80022ae:	3a20      	subs	r2, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80022b0:	88e3      	ldrh	r3, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80022b2:	fb03 f202 	mul.w	r2, r3, r2
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80022b6:	88a3      	ldrh	r3, [r4, #4]
 80022b8:	3307      	adds	r3, #7
 80022ba:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80022bc:	fb03 5202 	mla	r2, r3, r2, r5
 80022c0:	f7ff ff7c 	bl	80021bc <DrawChar>
}
 80022c4:	bd38      	pop	{r3, r4, r5, pc}
 80022c6:	bf00      	nop
 80022c8:	20000e0c 	.word	0x20000e0c

080022cc <BSP_LCD_DisplayStringAt>:
{
 80022cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d0:	4606      	mov	r6, r0
 80022d2:	460f      	mov	r7, r1
 80022d4:	4615      	mov	r5, r2
 80022d6:	4698      	mov	r8, r3
  uint32_t size = 0, xsize = 0; 
 80022d8:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 80022da:	f812 1b01 	ldrb.w	r1, [r2], #1
 80022de:	b109      	cbz	r1, 80022e4 <BSP_LCD_DisplayStringAt+0x18>
 80022e0:	3401      	adds	r4, #1
 80022e2:	e7fa      	b.n	80022da <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80022e4:	f7ff fcf0 	bl	8001cc8 <BSP_LCD_GetXSize>
 80022e8:	4b26      	ldr	r3, [pc, #152]	; (8002384 <BSP_LCD_DisplayStringAt+0xb8>)
 80022ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80022f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	889b      	ldrh	r3, [r3, #4]
 80022f8:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (mode)
 80022fc:	f1b8 0f01 	cmp.w	r8, #1
 8002300:	d02e      	beq.n	8002360 <BSP_LCD_DisplayStringAt+0x94>
 8002302:	f1b8 0f02 	cmp.w	r8, #2
 8002306:	d033      	beq.n	8002370 <BSP_LCD_DisplayStringAt+0xa4>
  while (*ptr++) size ++ ;
 8002308:	2400      	movs	r4, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800230a:	f895 8000 	ldrb.w	r8, [r5]
 800230e:	f7ff fcdb 	bl	8001cc8 <BSP_LCD_GetXSize>
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <BSP_LCD_DisplayStringAt+0xb8>)
 8002314:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002316:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800231a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800231e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002320:	889a      	ldrh	r2, [r3, #4]
 8002322:	fb02 0314 	mls	r3, r2, r4, r0
 8002326:	b29b      	uxth	r3, r3
 8002328:	4293      	cmp	r3, r2
 800232a:	bf34      	ite	cc
 800232c:	2300      	movcc	r3, #0
 800232e:	2301      	movcs	r3, #1
 8002330:	f1b8 0f00 	cmp.w	r8, #0
 8002334:	bf08      	it	eq
 8002336:	2300      	moveq	r3, #0
 8002338:	b30b      	cbz	r3, 800237e <BSP_LCD_DisplayStringAt+0xb2>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800233a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800233e:	4639      	mov	r1, r7
 8002340:	4630      	mov	r0, r6
 8002342:	f7ff ffab 	bl	800229c <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <BSP_LCD_DisplayStringAt+0xb8>)
 8002348:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800234a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800234e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	8898      	ldrh	r0, [r3, #4]
 8002356:	4406      	add	r6, r0
 8002358:	b2b6      	uxth	r6, r6
    i++;
 800235a:	3401      	adds	r4, #1
 800235c:	b2a4      	uxth	r4, r4
 800235e:	e7d4      	b.n	800230a <BSP_LCD_DisplayStringAt+0x3e>
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002360:	1b00      	subs	r0, r0, r4
 8002362:	fb00 f303 	mul.w	r3, r0, r3
 8002366:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800236a:	441e      	add	r6, r3
 800236c:	b2b6      	uxth	r6, r6
      break;
 800236e:	e7cb      	b.n	8002308 <BSP_LCD_DisplayStringAt+0x3c>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002370:	1b00      	subs	r0, r0, r4
 8002372:	fb10 f003 	smulbb	r0, r0, r3
 8002376:	fa16 f680 	uxtah	r6, r6, r0
 800237a:	b2b6      	uxth	r6, r6
      break;
 800237c:	e7c4      	b.n	8002308 <BSP_LCD_DisplayStringAt+0x3c>
}
 800237e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002382:	bf00      	nop
 8002384:	20000e0c 	.word	0x20000e0c

08002388 <BSP_LCD_DrawCircle>:
{
 8002388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238c:	b087      	sub	sp, #28
 800238e:	4682      	mov	sl, r0
 8002390:	4689      	mov	r9, r1
  d = 3 - (Radius << 1);
 8002392:	0053      	lsls	r3, r2, #1
 8002394:	f1c3 0303 	rsb	r3, r3, #3
 8002398:	9302      	str	r3, [sp, #8]
  cury = Radius;
 800239a:	9201      	str	r2, [sp, #4]
  curx = 0;
 800239c:	f04f 0800 	mov.w	r8, #0
  while (curx <= cury)
 80023a0:	e005      	b.n	80023ae <BSP_LCD_DrawCircle+0x26>
      d += (curx << 2) + 6;
 80023a2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80023a6:	3306      	adds	r3, #6
 80023a8:	9302      	str	r3, [sp, #8]
    curx++;
 80023aa:	f108 0801 	add.w	r8, r8, #1
  while (curx <= cury)
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	4598      	cmp	r8, r3
 80023b2:	d87b      	bhi.n	80024ac <BSP_LCD_DrawCircle+0x124>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80023b4:	fa1f f588 	uxth.w	r5, r8
 80023b8:	eb05 030a 	add.w	r3, r5, sl
 80023bc:	b298      	uxth	r0, r3
 80023be:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80023c2:	eba9 0706 	sub.w	r7, r9, r6
 80023c6:	b2bf      	uxth	r7, r7
 80023c8:	4c3a      	ldr	r4, [pc, #232]	; (80024b4 <BSP_LCD_DrawCircle+0x12c>)
 80023ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80023d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80023d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d6:	4639      	mov	r1, r7
 80023d8:	9003      	str	r0, [sp, #12]
 80023da:	f7ff fed9 	bl	8002190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80023de:	ebaa 0305 	sub.w	r3, sl, r5
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80023ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80023f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f2:	4639      	mov	r1, r7
 80023f4:	9004      	str	r0, [sp, #16]
 80023f6:	f7ff fecb 	bl	8002190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80023fa:	eb06 030a 	add.w	r3, r6, sl
 80023fe:	b29f      	uxth	r7, r3
 8002400:	eba9 0b05 	sub.w	fp, r9, r5
 8002404:	fa1f fb8b 	uxth.w	fp, fp
 8002408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800240a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800240e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002414:	4659      	mov	r1, fp
 8002416:	9705      	str	r7, [sp, #20]
 8002418:	4638      	mov	r0, r7
 800241a:	f7ff feb9 	bl	8002190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800241e:	ebaa 0706 	sub.w	r7, sl, r6
 8002422:	b2bf      	uxth	r7, r7
 8002424:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002426:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800242a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800242e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002430:	4659      	mov	r1, fp
 8002432:	4638      	mov	r0, r7
 8002434:	f7ff feac 	bl	8002190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002438:	444e      	add	r6, r9
 800243a:	b2b6      	uxth	r6, r6
 800243c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800243e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002442:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002448:	4631      	mov	r1, r6
 800244a:	9803      	ldr	r0, [sp, #12]
 800244c:	f7ff fea0 	bl	8002190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002450:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002452:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002456:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800245a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245c:	4631      	mov	r1, r6
 800245e:	9804      	ldr	r0, [sp, #16]
 8002460:	f7ff fe96 	bl	8002190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002464:	444d      	add	r5, r9
 8002466:	b2ad      	uxth	r5, r5
 8002468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800246a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800246e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002474:	4629      	mov	r1, r5
 8002476:	9805      	ldr	r0, [sp, #20]
 8002478:	f7ff fe8a 	bl	8002190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800247c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800247e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002482:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002486:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002488:	4629      	mov	r1, r5
 800248a:	4638      	mov	r0, r7
 800248c:	f7ff fe80 	bl	8002190 <BSP_LCD_DrawPixel>
    if (d < 0)
 8002490:	9b02      	ldr	r3, [sp, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db85      	blt.n	80023a2 <BSP_LCD_DrawCircle+0x1a>
      d += ((curx - cury) << 2) + 10;
 8002496:	9a01      	ldr	r2, [sp, #4]
 8002498:	eba8 0302 	sub.w	r3, r8, r2
 800249c:	9902      	ldr	r1, [sp, #8]
 800249e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80024a2:	330a      	adds	r3, #10
 80024a4:	9302      	str	r3, [sp, #8]
      cury--;
 80024a6:	1e53      	subs	r3, r2, #1
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	e77e      	b.n	80023aa <BSP_LCD_DrawCircle+0x22>
}
 80024ac:	b007      	add	sp, #28
 80024ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b2:	bf00      	nop
 80024b4:	20000e0c 	.word	0x20000e0c

080024b8 <BSP_LCD_FillCircle>:
{
 80024b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024bc:	b083      	sub	sp, #12
 80024be:	4682      	mov	sl, r0
 80024c0:	4689      	mov	r9, r1
 80024c2:	4615      	mov	r5, r2
 80024c4:	9201      	str	r2, [sp, #4]
  d = 3 - (Radius << 1);
 80024c6:	0056      	lsls	r6, r2, #1
 80024c8:	f1c6 0603 	rsb	r6, r6, #3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80024cc:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <BSP_LCD_FillCircle+0xd0>)
 80024ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80024d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80024d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80024da:	f7ff fc7b 	bl	8001dd4 <BSP_LCD_SetTextColor>
  curx = 0;
 80024de:	2400      	movs	r4, #0
  while (curx <= cury)
 80024e0:	e033      	b.n	800254a <BSP_LCD_FillCircle+0x92>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80024e2:	b2af      	uxth	r7, r5
 80024e4:	ebaa 0b07 	sub.w	fp, sl, r7
 80024e8:	fa1f fb8b 	uxth.w	fp, fp
 80024ec:	fa1f f884 	uxth.w	r8, r4
 80024f0:	007f      	lsls	r7, r7, #1
 80024f2:	b2bf      	uxth	r7, r7
 80024f4:	eb08 0109 	add.w	r1, r8, r9
 80024f8:	463a      	mov	r2, r7
 80024fa:	b289      	uxth	r1, r1
 80024fc:	4658      	mov	r0, fp
 80024fe:	f7ff fca5 	bl	8001e4c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002502:	eba9 0108 	sub.w	r1, r9, r8
 8002506:	463a      	mov	r2, r7
 8002508:	b289      	uxth	r1, r1
 800250a:	4658      	mov	r0, fp
 800250c:	f7ff fc9e 	bl	8001e4c <BSP_LCD_DrawHLine>
 8002510:	e01f      	b.n	8002552 <BSP_LCD_FillCircle+0x9a>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002512:	b2a7      	uxth	r7, r4
 8002514:	ebaa 0b07 	sub.w	fp, sl, r7
 8002518:	fa1f fb8b 	uxth.w	fp, fp
 800251c:	fa1f f885 	uxth.w	r8, r5
 8002520:	007f      	lsls	r7, r7, #1
 8002522:	b2bf      	uxth	r7, r7
 8002524:	eba9 0108 	sub.w	r1, r9, r8
 8002528:	463a      	mov	r2, r7
 800252a:	b289      	uxth	r1, r1
 800252c:	4658      	mov	r0, fp
 800252e:	f7ff fc8d 	bl	8001e4c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002532:	eb08 0109 	add.w	r1, r8, r9
 8002536:	463a      	mov	r2, r7
 8002538:	b289      	uxth	r1, r1
 800253a:	4658      	mov	r0, fp
 800253c:	f7ff fc86 	bl	8001e4c <BSP_LCD_DrawHLine>
 8002540:	e009      	b.n	8002556 <BSP_LCD_FillCircle+0x9e>
      d += (curx << 2) + 6;
 8002542:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8002546:	3606      	adds	r6, #6
    curx++;
 8002548:	3401      	adds	r4, #1
  while (curx <= cury)
 800254a:	42ac      	cmp	r4, r5
 800254c:	d80b      	bhi.n	8002566 <BSP_LCD_FillCircle+0xae>
    if(cury > 0) 
 800254e:	2d00      	cmp	r5, #0
 8002550:	d1c7      	bne.n	80024e2 <BSP_LCD_FillCircle+0x2a>
    if(curx > 0) 
 8002552:	2c00      	cmp	r4, #0
 8002554:	d1dd      	bne.n	8002512 <BSP_LCD_FillCircle+0x5a>
    if (d < 0)
 8002556:	2e00      	cmp	r6, #0
 8002558:	dbf3      	blt.n	8002542 <BSP_LCD_FillCircle+0x8a>
      d += ((curx - cury) << 2) + 10;
 800255a:	1b63      	subs	r3, r4, r5
 800255c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8002560:	360a      	adds	r6, #10
      cury--;
 8002562:	3d01      	subs	r5, #1
 8002564:	e7f0      	b.n	8002548 <BSP_LCD_FillCircle+0x90>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <BSP_LCD_FillCircle+0xd0>)
 8002568:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800256a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800256e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002572:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002574:	f7ff fc2e 	bl	8001dd4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002578:	9a01      	ldr	r2, [sp, #4]
 800257a:	4649      	mov	r1, r9
 800257c:	4650      	mov	r0, sl
 800257e:	f7ff ff03 	bl	8002388 <BSP_LCD_DrawCircle>
}
 8002582:	b003      	add	sp, #12
 8002584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002588:	20000e0c 	.word	0x20000e0c

0800258c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800258c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd =0;
 8002594:	f04f 0800 	mov.w	r8, #0
 8002598:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800259c:	4c21      	ldr	r4, [pc, #132]	; (8002624 <BSP_SDRAM_Initialization_sequence+0x98>)
 800259e:	2601      	movs	r6, #1
 80025a0:	6026      	str	r6, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025a2:	2708      	movs	r7, #8
 80025a4:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 80025a6:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80025a8:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025ac:	f104 0510 	add.w	r5, r4, #16
 80025b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b4:	4621      	mov	r1, r4
 80025b6:	4628      	mov	r0, r5
 80025b8:	f002 fafa 	bl	8004bb0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 fa01 	bl	80029c4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80025c2:	2302      	movs	r3, #2
 80025c4:	6023      	str	r3, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025c6:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 80025c8:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80025ca:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80025ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d2:	4621      	mov	r1, r4
 80025d4:	4628      	mov	r0, r5
 80025d6:	f002 faeb 	bl	8004bb0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80025da:	2303      	movs	r3, #3
 80025dc:	6023      	str	r3, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025de:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 4;
 80025e0:	f04f 0a04 	mov.w	sl, #4
 80025e4:	f8c4 a008 	str.w	sl, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80025e8:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f0:	4621      	mov	r1, r4
 80025f2:	4628      	mov	r0, r5
 80025f4:	f002 fadc 	bl	8004bb0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80025f8:	f44f 730c 	mov.w	r3, #560	; 0x230
 80025fc:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80025fe:	f8c4 a000 	str.w	sl, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002602:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 8002604:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002606:	9b01      	ldr	r3, [sp, #4]
 8002608:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800260a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800260e:	4621      	mov	r1, r4
 8002610:	4628      	mov	r0, r5
 8002612:	f002 facd 	bl	8004bb0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002616:	4649      	mov	r1, r9
 8002618:	4628      	mov	r0, r5
 800261a:	f002 fae4 	bl	8004be6 <HAL_SDRAM_ProgramRefreshRate>
}
 800261e:	b002      	add	sp, #8
 8002620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002624:	20000e98 	.word	0x20000e98

08002628 <BSP_SDRAM_MspInit>:
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002628:	2800      	cmp	r0, #0
 800262a:	f000 80b2 	beq.w	8002792 <BSP_SDRAM_MspInit+0x16a>
{
 800262e:	b570      	push	{r4, r5, r6, lr}
 8002630:	b08e      	sub	sp, #56	; 0x38
 8002632:	4606      	mov	r6, r0
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002634:	2400      	movs	r4, #0
 8002636:	9401      	str	r4, [sp, #4]
 8002638:	4b56      	ldr	r3, [pc, #344]	; (8002794 <BSP_SDRAM_MspInit+0x16c>)
 800263a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
 8002642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002644:	f002 0201 	and.w	r2, r2, #1
 8002648:	9201      	str	r2, [sp, #4]
 800264a:	9a01      	ldr	r2, [sp, #4]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800264c:	9402      	str	r4, [sp, #8]
 800264e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002650:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
 8002656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002658:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800265c:	9202      	str	r2, [sp, #8]
 800265e:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002660:	9403      	str	r4, [sp, #12]
 8002662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002664:	f042 0202 	orr.w	r2, r2, #2
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
 800266a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266c:	f002 0202 	and.w	r2, r2, #2
 8002670:	9203      	str	r2, [sp, #12]
 8002672:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002674:	9404      	str	r4, [sp, #16]
 8002676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002678:	f042 0204 	orr.w	r2, r2, #4
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
 800267e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002680:	f002 0204 	and.w	r2, r2, #4
 8002684:	9204      	str	r2, [sp, #16]
 8002686:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002688:	9405      	str	r4, [sp, #20]
 800268a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268c:	f042 0208 	orr.w	r2, r2, #8
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
 8002692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002694:	f002 0208 	and.w	r2, r2, #8
 8002698:	9205      	str	r2, [sp, #20]
 800269a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800269c:	9406      	str	r4, [sp, #24]
 800269e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a0:	f042 0210 	orr.w	r2, r2, #16
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
 80026a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a8:	f002 0210 	and.w	r2, r2, #16
 80026ac:	9206      	str	r2, [sp, #24]
 80026ae:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b0:	9407      	str	r4, [sp, #28]
 80026b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
 80026ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026bc:	f002 0220 	and.w	r2, r2, #32
 80026c0:	9207      	str	r2, [sp, #28]
 80026c2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026c4:	9408      	str	r4, [sp, #32]
 80026c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d4:	9308      	str	r3, [sp, #32]
 80026d6:	9b08      	ldr	r3, [sp, #32]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80026dc:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80026de:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80026e0:	230c      	movs	r3, #12
 80026e2:	930d      	str	r3, [sp, #52]	; 0x34

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80026e4:	2360      	movs	r3, #96	; 0x60
 80026e6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80026e8:	a909      	add	r1, sp, #36	; 0x24
 80026ea:	482b      	ldr	r0, [pc, #172]	; (8002798 <BSP_SDRAM_MspInit+0x170>)
 80026ec:	f000 fc74 	bl	8002fd8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80026f0:	2301      	movs	r3, #1
 80026f2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80026f4:	a909      	add	r1, sp, #36	; 0x24
 80026f6:	4829      	ldr	r0, [pc, #164]	; (800279c <BSP_SDRAM_MspInit+0x174>)
 80026f8:	f000 fc6e 	bl	8002fd8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80026fc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002700:	9309      	str	r3, [sp, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002702:	a909      	add	r1, sp, #36	; 0x24
 8002704:	4826      	ldr	r0, [pc, #152]	; (80027a0 <BSP_SDRAM_MspInit+0x178>)
 8002706:	f000 fc67 	bl	8002fd8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800270a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800270e:	9309      	str	r3, [sp, #36]	; 0x24
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002710:	a909      	add	r1, sp, #36	; 0x24
 8002712:	4824      	ldr	r0, [pc, #144]	; (80027a4 <BSP_SDRAM_MspInit+0x17c>)
 8002714:	f000 fc60 	bl	8002fd8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002718:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800271c:	9309      	str	r3, [sp, #36]	; 0x24
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800271e:	a909      	add	r1, sp, #36	; 0x24
 8002720:	4821      	ldr	r0, [pc, #132]	; (80027a8 <BSP_SDRAM_MspInit+0x180>)
 8002722:	f000 fc59 	bl	8002fd8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002726:	f248 1333 	movw	r3, #33075	; 0x8133
 800272a:	9309      	str	r3, [sp, #36]	; 0x24
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800272c:	a909      	add	r1, sp, #36	; 0x24
 800272e:	481f      	ldr	r0, [pc, #124]	; (80027ac <BSP_SDRAM_MspInit+0x184>)
 8002730:	f000 fc52 	bl	8002fd8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <BSP_SDRAM_MspInit+0x188>)
 8002736:	649c      	str	r4, [r3, #72]	; 0x48
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	64da      	str	r2, [r3, #76]	; 0x4c
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800273c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002740:	651a      	str	r2, [r3, #80]	; 0x50
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800274c:	659a      	str	r2, [r3, #88]	; 0x58
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800274e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002752:	65da      	str	r2, [r3, #92]	; 0x5c
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002754:	661c      	str	r4, [r3, #96]	; 0x60
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002756:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800275a:	665a      	str	r2, [r3, #100]	; 0x64
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800275c:	669c      	str	r4, [r3, #104]	; 0x68
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800275e:	2203      	movs	r2, #3
 8002760:	66da      	str	r2, [r3, #108]	; 0x6c
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002762:	671c      	str	r4, [r3, #112]	; 0x70
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002764:	675c      	str	r4, [r3, #116]	; 0x74
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002766:	461d      	mov	r5, r3
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <BSP_SDRAM_MspInit+0x18c>)
 800276a:	f845 2f44 	str.w	r2, [r5, #68]!
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800276e:	6335      	str	r5, [r6, #48]	; 0x30
 8002770:	67de      	str	r6, [r3, #124]	; 0x7c
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002772:	4628      	mov	r0, r5
 8002774:	f000 fa6e 	bl	8002c54 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002778:	4628      	mov	r0, r5
 800277a:	f000 fa05 	bl	8002b88 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800277e:	4622      	mov	r2, r4
 8002780:	210f      	movs	r1, #15
 8002782:	2038      	movs	r0, #56	; 0x38
 8002784:	f000 f944 	bl	8002a10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002788:	2038      	movs	r0, #56	; 0x38
 800278a:	f000 f975 	bl	8002a78 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800278e:	b00e      	add	sp, #56	; 0x38
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	4770      	bx	lr
 8002794:	40023800 	.word	0x40023800
 8002798:	40020400 	.word	0x40020400
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40021800 	.word	0x40021800
 80027b0:	20000e98 	.word	0x20000e98
 80027b4:	40026410 	.word	0x40026410

080027b8 <BSP_SDRAM_Init>:
{
 80027b8:	b538      	push	{r3, r4, r5, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80027ba:	4c20      	ldr	r4, [pc, #128]	; (800283c <BSP_SDRAM_Init+0x84>)
 80027bc:	4b20      	ldr	r3, [pc, #128]	; (8002840 <BSP_SDRAM_Init+0x88>)
 80027be:	6123      	str	r3, [r4, #16]
  Timing.LoadToActiveDelay    = 2;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  Timing.ExitSelfRefreshDelay = 7;
 80027c6:	2107      	movs	r1, #7
 80027c8:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
  Timing.SelfRefreshTime      = 4;
 80027cc:	2204      	movs	r2, #4
 80027ce:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
  Timing.RowCycleDelay        = 7;
 80027d2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
  Timing.WriteRecoveryTime    = 2;
 80027d6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  Timing.RPDelay              = 2;
 80027da:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  Timing.RCDDelay             = 2;
 80027de:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80027e2:	2301      	movs	r3, #1
 80027e4:	6163      	str	r3, [r4, #20]
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027e6:	2100      	movs	r1, #0
 80027e8:	61a1      	str	r1, [r4, #24]
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80027ea:	61e2      	str	r2, [r4, #28]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80027ec:	2310      	movs	r3, #16
 80027ee:	6223      	str	r3, [r4, #32]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80027f0:	2340      	movs	r3, #64	; 0x40
 80027f2:	6263      	str	r3, [r4, #36]	; 0x24
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80027f4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027f8:	62a3      	str	r3, [r4, #40]	; 0x28
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027fa:	62e1      	str	r1, [r4, #44]	; 0x2c
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80027fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002800:	6323      	str	r3, [r4, #48]	; 0x30
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002802:	6361      	str	r1, [r4, #52]	; 0x34
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002808:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800280a:	f104 0510 	add.w	r5, r4, #16
 800280e:	4628      	mov	r0, r5
 8002810:	f7ff ff0a 	bl	8002628 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002814:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8002818:	4628      	mov	r0, r5
 800281a:	f002 f9a9 	bl	8004b70 <HAL_SDRAM_Init>
 800281e:	b148      	cbz	r0, 8002834 <BSP_SDRAM_Init+0x7c>
    sdramstatus = SDRAM_ERROR;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <BSP_SDRAM_Init+0x8c>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002826:	f240 506a 	movw	r0, #1386	; 0x56a
 800282a:	f7ff feaf 	bl	800258c <BSP_SDRAM_Initialization_sequence>
}
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <BSP_SDRAM_Init+0x8c>)
 8002830:	7818      	ldrb	r0, [r3, #0]
 8002832:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <BSP_SDRAM_Init+0x8c>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e7f4      	b.n	8002826 <BSP_SDRAM_Init+0x6e>
 800283c:	20000e98 	.word	0x20000e98
 8002840:	a0000140 	.word	0xa0000140
 8002844:	200000c8 	.word	0x200000c8

08002848 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002848:	b510      	push	{r4, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <BSP_TS_Init+0x34>)
 800284c:	8018      	strh	r0, [r3, #0]
  TsYBoundary = YSize;
 800284e:	8059      	strh	r1, [r3, #2]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <BSP_TS_Init+0x38>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2082      	movs	r0, #130	; 0x82
 8002856:	4798      	blx	r3
 8002858:	f640 0311 	movw	r3, #2065	; 0x811
 800285c:	4298      	cmp	r0, r3
 800285e:	d001      	beq.n	8002864 <BSP_TS_Init+0x1c>
  uint8_t ret = TS_ERROR;
 8002860:	2001      	movs	r0, #1
    TsDrv->Init(TS_I2C_ADDRESS);
    TsDrv->Start(TS_I2C_ADDRESS);
  }

  return ret;
}
 8002862:	bd10      	pop	{r4, pc}
    TsDrv = &stmpe811_ts_drv;
 8002864:	4c05      	ldr	r4, [pc, #20]	; (800287c <BSP_TS_Init+0x34>)
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <BSP_TS_Init+0x38>)
 8002868:	6063      	str	r3, [r4, #4]
    TsDrv->Init(TS_I2C_ADDRESS);
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2082      	movs	r0, #130	; 0x82
 800286e:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002870:	6863      	ldr	r3, [r4, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2082      	movs	r0, #130	; 0x82
 8002876:	4798      	blx	r3
    ret = TS_OK;
 8002878:	2000      	movs	r0, #0
 800287a:	e7f2      	b.n	8002862 <BSP_TS_Init+0x1a>
 800287c:	20000fb8 	.word	0x20000fb8
 8002880:	20000064 	.word	0x20000064

08002884 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8002884:	b530      	push	{r4, r5, lr}
 8002886:	b083      	sub	sp, #12
 8002888:	4604      	mov	r4, r0
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800288a:	4b35      	ldr	r3, [pc, #212]	; (8002960 <BSP_TS_GetState+0xdc>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2082      	movs	r0, #130	; 0x82
 8002892:	4798      	blx	r3
 8002894:	b280      	uxth	r0, r0
 8002896:	8020      	strh	r0, [r4, #0]
  
  if(TsState->TouchDetected)
 8002898:	2800      	cmp	r0, #0
 800289a:	d056      	beq.n	800294a <BSP_TS_GetState+0xc6>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800289c:	4b30      	ldr	r3, [pc, #192]	; (8002960 <BSP_TS_GetState+0xdc>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	aa01      	add	r2, sp, #4
 80028a4:	f10d 0106 	add.w	r1, sp, #6
 80028a8:	2082      	movs	r0, #130	; 0x82
 80028aa:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80028ac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80028b0:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 80028b4:	b292      	uxth	r2, r2
    
    /* Y value second correction */
    yr = y / 11;
 80028b6:	492b      	ldr	r1, [pc, #172]	; (8002964 <BSP_TS_GetState+0xe0>)
 80028b8:	fba1 3102 	umull	r3, r1, r1, r2
 80028bc:	08c9      	lsrs	r1, r1, #3
    
    /* Return y position value */
    if(yr <= 0)
 80028be:	2a0a      	cmp	r2, #10
 80028c0:	d906      	bls.n	80028d0 <BSP_TS_GetState+0x4c>
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 80028c2:	4b27      	ldr	r3, [pc, #156]	; (8002960 <BSP_TS_GetState+0xdc>)
 80028c4:	885b      	ldrh	r3, [r3, #2]
 80028c6:	428b      	cmp	r3, r1
 80028c8:	d203      	bcs.n	80028d2 <BSP_TS_GetState+0x4e>
    {
      yr = TsYBoundary - 1;
 80028ca:	1e59      	subs	r1, r3, #1
 80028cc:	b289      	uxth	r1, r1
 80028ce:	e000      	b.n	80028d2 <BSP_TS_GetState+0x4e>
      yr = 0;
 80028d0:	2100      	movs	r1, #0
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 80028d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80028d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80028da:	4293      	cmp	r3, r2
 80028dc:	d813      	bhi.n	8002906 <BSP_TS_GetState+0x82>
    {
      x = 3870 - x;
 80028de:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80028e2:	330e      	adds	r3, #14
 80028e4:	f8ad 3006 	strh.w	r3, [sp, #6]
    {
      x = 3800 - x;
    }
    
    /* X value second correction */  
    xr = x / 15;
 80028e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <BSP_TS_GetState+0xe4>)
 80028ee:	fba3 0302 	umull	r0, r3, r3, r2
 80028f2:	08db      	lsrs	r3, r3, #3
    
    /* Return X position value */
    if(xr <= 0)
 80028f4:	2a0e      	cmp	r2, #14
 80028f6:	d90c      	bls.n	8002912 <BSP_TS_GetState+0x8e>
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 80028f8:	4a19      	ldr	r2, [pc, #100]	; (8002960 <BSP_TS_GetState+0xdc>)
 80028fa:	8812      	ldrh	r2, [r2, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d209      	bcs.n	8002914 <BSP_TS_GetState+0x90>
    {
      xr = TsXBoundary - 1;
 8002900:	1e53      	subs	r3, r2, #1
 8002902:	b29b      	uxth	r3, r3
 8002904:	e006      	b.n	8002914 <BSP_TS_GetState+0x90>
      x = 3800 - x;
 8002906:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800290a:	3308      	adds	r3, #8
 800290c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002910:	e7ea      	b.n	80028e8 <BSP_TS_GetState+0x64>
      xr = 0;
 8002912:	2300      	movs	r3, #0
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 8002914:	4618      	mov	r0, r3
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <BSP_TS_GetState+0xdc>)
 8002918:	6892      	ldr	r2, [r2, #8]
 800291a:	4293      	cmp	r3, r2
 800291c:	d917      	bls.n	800294e <BSP_TS_GetState+0xca>
 800291e:	b292      	uxth	r2, r2
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	b29b      	uxth	r3, r3
    yDiff = y > _y? (y - _y): (_y - y); 
 8002924:	460d      	mov	r5, r1
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <BSP_TS_GetState+0xdc>)
 8002928:	68d2      	ldr	r2, [r2, #12]
 800292a:	4291      	cmp	r1, r2
 800292c:	d913      	bls.n	8002956 <BSP_TS_GetState+0xd2>
 800292e:	b292      	uxth	r2, r2
 8002930:	1a89      	subs	r1, r1, r2
 8002932:	b289      	uxth	r1, r1
    
    if (xDiff + yDiff > 5)
 8002934:	440b      	add	r3, r1
 8002936:	2b05      	cmp	r3, #5
 8002938:	dd02      	ble.n	8002940 <BSP_TS_GetState+0xbc>
    {
      _x = x;
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <BSP_TS_GetState+0xdc>)
 800293c:	6098      	str	r0, [r3, #8]
      _y = y; 
 800293e:	60dd      	str	r5, [r3, #12]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <BSP_TS_GetState+0xdc>)
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	8062      	strh	r2, [r4, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	80a3      	strh	r3, [r4, #4]
  }
}
 800294a:	b003      	add	sp, #12
 800294c:	bd30      	pop	{r4, r5, pc}
    xDiff = x > _x? (x - _x): (_x - x);
 800294e:	b292      	uxth	r2, r2
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	b29b      	uxth	r3, r3
 8002954:	e7e6      	b.n	8002924 <BSP_TS_GetState+0xa0>
    yDiff = y > _y? (y - _y): (_y - y); 
 8002956:	b292      	uxth	r2, r2
 8002958:	1a51      	subs	r1, r2, r1
 800295a:	b289      	uxth	r1, r1
 800295c:	e7ea      	b.n	8002934 <BSP_TS_GetState+0xb0>
 800295e:	bf00      	nop
 8002960:	20000fb8 	.word	0x20000fb8
 8002964:	ba2e8ba3 	.word	0xba2e8ba3
 8002968:	88888889 	.word	0x88888889

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_Init+0x30>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002976:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800297e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002986:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002988:	2003      	movs	r0, #3
 800298a:	f000 f82f 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298e:	2000      	movs	r0, #0
 8002990:	f004 fb00 	bl	8006f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002994:	f004 fae2 	bl	8006f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002998:	2000      	movs	r0, #0
 800299a:	bd08      	pop	{r3, pc}
 800299c:	40023c00 	.word	0x40023c00

080029a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80029a0:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <HAL_IncTick+0x10>)
 80029a2:	6811      	ldr	r1, [r2, #0]
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_IncTick+0x14>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	440b      	add	r3, r1
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	2000d030 	.word	0x2000d030
 80029b4:	200000cc 	.word	0x200000cc

080029b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80029b8:	4b01      	ldr	r3, [pc, #4]	; (80029c0 <HAL_GetTick+0x8>)
 80029ba:	6818      	ldr	r0, [r3, #0]
}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000d030 	.word	0x2000d030

080029c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029c8:	f7ff fff6 	bl	80029b8 <HAL_GetTick>
 80029cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80029d2:	d002      	beq.n	80029da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_Delay+0x24>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029da:	f7ff ffed 	bl	80029b8 <HAL_GetTick>
 80029de:	1b40      	subs	r0, r0, r5
 80029e0:	42a0      	cmp	r0, r4
 80029e2:	d3fa      	bcc.n	80029da <HAL_Delay+0x16>
  {
  }
}
 80029e4:	bd38      	pop	{r3, r4, r5, pc}
 80029e6:	bf00      	nop
 80029e8:	200000cc 	.word	0x200000cc

080029ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80029ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f8:	0200      	lsls	r0, r0, #8
 80029fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029fe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002a08:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a10:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <HAL_NVIC_SetPriority+0x60>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1a:	f1c3 0407 	rsb	r4, r3, #7
 8002a1e:	2c04      	cmp	r4, #4
 8002a20:	bf28      	it	cs
 8002a22:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a24:	1d1d      	adds	r5, r3, #4
 8002a26:	2d06      	cmp	r5, #6
 8002a28:	d918      	bls.n	8002a5c <HAL_NVIC_SetPriority+0x4c>
 8002a2a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 35ff 	mov.w	r5, #4294967295
 8002a30:	fa05 f404 	lsl.w	r4, r5, r4
 8002a34:	ea21 0104 	bic.w	r1, r1, r4
 8002a38:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a3a:	fa05 f303 	lsl.w	r3, r5, r3
 8002a3e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a42:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002a44:	2800      	cmp	r0, #0
 8002a46:	db0b      	blt.n	8002a60 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a48:	0109      	lsls	r1, r1, #4
 8002a4a:	b2c9      	uxtb	r1, r1
 8002a4c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a50:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a54:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a58:	bc30      	pop	{r4, r5}
 8002a5a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e7e5      	b.n	8002a2c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	f000 000f 	and.w	r0, r0, #15
 8002a64:	0109      	lsls	r1, r1, #4
 8002a66:	b2c9      	uxtb	r1, r1
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <HAL_NVIC_SetPriority+0x64>)
 8002a6a:	5419      	strb	r1, [r3, r0]
 8002a6c:	e7f4      	b.n	8002a58 <HAL_NVIC_SetPriority+0x48>
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00
 8002a74:	e000ed14 	.word	0xe000ed14

08002a78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	db07      	blt.n	8002a8c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7c:	f000 021f 	and.w	r2, r0, #31
 8002a80:	0940      	lsrs	r0, r0, #5
 8002a82:	2301      	movs	r3, #1
 8002a84:	4093      	lsls	r3, r2
 8002a86:	4a02      	ldr	r2, [pc, #8]	; (8002a90 <HAL_NVIC_EnableIRQ+0x18>)
 8002a88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a94:	b158      	cbz	r0, 8002aae <HAL_CRC_Init+0x1a>
{
 8002a96:	b510      	push	{r4, lr}
 8002a98:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a9a:	7943      	ldrb	r3, [r0, #5]
 8002a9c:	b11b      	cbz	r3, 8002aa6 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8002aa2:	2000      	movs	r0, #0
}
 8002aa4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002aa6:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8002aa8:	f003 fa12 	bl	8005ed0 <HAL_CRC_MspInit>
 8002aac:	e7f7      	b.n	8002a9e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8002aae:	2001      	movs	r0, #1
}
 8002ab0:	4770      	bx	lr
	...

08002ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ab6:	6803      	ldr	r3, [r0, #0]
 8002ab8:	b2d9      	uxtb	r1, r3
 8002aba:	3910      	subs	r1, #16
 8002abc:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <DMA_CalcBaseAndBitshift+0x3c>)
 8002abe:	fba2 4201 	umull	r4, r2, r2, r1
 8002ac2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ac4:	4c0b      	ldr	r4, [pc, #44]	; (8002af4 <DMA_CalcBaseAndBitshift+0x40>)
 8002ac6:	5ca2      	ldrb	r2, [r4, r2]
 8002ac8:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002aca:	295f      	cmp	r1, #95	; 0x5f
 8002acc:	d909      	bls.n	8002ae2 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ace:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002ada:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ae0:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	6583      	str	r3, [r0, #88]	; 0x58
 8002aec:	e7f5      	b.n	8002ada <DMA_CalcBaseAndBitshift+0x26>
 8002aee:	bf00      	nop
 8002af0:	aaaaaaab 	.word	0xaaaaaaab
 8002af4:	080106ac 	.word	0x080106ac

08002af8 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002af8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002afa:	6982      	ldr	r2, [r0, #24]
 8002afc:	b992      	cbnz	r2, 8002b24 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d00a      	beq.n	8002b18 <DMA_CheckFifoParam+0x20>
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d002      	beq.n	8002b0c <DMA_CheckFifoParam+0x14>
 8002b06:	b10b      	cbz	r3, 8002b0c <DMA_CheckFifoParam+0x14>
 8002b08:	2000      	movs	r0, #0
 8002b0a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b0e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b12:	d128      	bne.n	8002b66 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2000      	movs	r0, #0
 8002b16:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b1e:	d024      	beq.n	8002b6a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2000      	movs	r0, #0
 8002b22:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b24:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002b28:	d009      	beq.n	8002b3e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d925      	bls.n	8002b7a <DMA_CheckFifoParam+0x82>
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d125      	bne.n	8002b7e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b38:	d123      	bne.n	8002b82 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	4770      	bx	lr
    switch (tmp)
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d803      	bhi.n	8002b4a <DMA_CheckFifoParam+0x52>
 8002b42:	e8df f003 	tbb	[pc, r3]
 8002b46:	0414      	.short	0x0414
 8002b48:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b50:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b54:	d10d      	bne.n	8002b72 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2000      	movs	r0, #0
 8002b58:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b60:	d009      	beq.n	8002b76 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2000      	movs	r0, #0
 8002b64:	4770      	bx	lr
        status = HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
 8002b68:	4770      	bx	lr
        status = HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	4770      	bx	lr
      status = HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
 8002b70:	4770      	bx	lr
        status = HAL_ERROR;
 8002b72:	2001      	movs	r0, #1
 8002b74:	4770      	bx	lr
        status = HAL_ERROR;
 8002b76:	2001      	movs	r0, #1
 8002b78:	4770      	bx	lr
      status = HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	4770      	bx	lr
    switch (tmp)
 8002b7e:	2000      	movs	r0, #0
 8002b80:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8002b82:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_DMA_Init>:
{
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff ff14 	bl	80029b8 <HAL_GetTick>
  if(hdma == NULL)
 8002b90:	2c00      	cmp	r4, #0
 8002b92:	d05b      	beq.n	8002c4c <HAL_DMA_Init+0xc4>
 8002b94:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b96:	2302      	movs	r3, #2
 8002b98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	6813      	ldr	r3, [r2, #0]
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	f012 0f01 	tst.w	r2, #1
 8002bb4:	d00a      	beq.n	8002bcc <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bb6:	f7ff feff 	bl	80029b8 <HAL_GetTick>
 8002bba:	1b43      	subs	r3, r0, r5
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d9f5      	bls.n	8002bac <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002bcc:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bce:	4820      	ldr	r0, [pc, #128]	; (8002c50 <HAL_DMA_Init+0xc8>)
 8002bd0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd2:	6861      	ldr	r1, [r4, #4]
 8002bd4:	68a2      	ldr	r2, [r4, #8]
 8002bd6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bda:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bdc:	6921      	ldr	r1, [r4, #16]
 8002bde:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be4:	69a1      	ldr	r1, [r4, #24]
 8002be6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be8:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bec:	6a21      	ldr	r1, [r4, #32]
 8002bee:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf0:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bf4:	2904      	cmp	r1, #4
 8002bf6:	d01e      	beq.n	8002c36 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002bf8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002bfa:	6826      	ldr	r6, [r4, #0]
 8002bfc:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bfe:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c04:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d107      	bne.n	8002c1a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c0c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c10:	b11b      	cbz	r3, 8002c1a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7ff ff70 	bl	8002af8 <DMA_CheckFifoParam>
 8002c18:	b990      	cbnz	r0, 8002c40 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002c1a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff ff49 	bl	8002ab4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c24:	233f      	movs	r3, #63	; 0x3f
 8002c26:	4093      	lsls	r3, r2
 8002c28:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002c34:	e7c9      	b.n	8002bca <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c38:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c3a:	4301      	orrs	r1, r0
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	e7db      	b.n	8002bf8 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c40:	2340      	movs	r3, #64	; 0x40
 8002c42:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002c44:	2001      	movs	r0, #1
 8002c46:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002c4a:	e7be      	b.n	8002bca <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	e7bc      	b.n	8002bca <HAL_DMA_Init+0x42>
 8002c50:	f010803f 	.word	0xf010803f

08002c54 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d02d      	beq.n	8002cb4 <HAL_DMA_DeInit+0x60>
{
 8002c58:	b538      	push	{r3, r4, r5, lr}
 8002c5a:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002c5c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8002c60:	b2c0      	uxtb	r0, r0
 8002c62:	2802      	cmp	r0, #2
 8002c64:	d025      	beq.n	8002cb2 <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 8002c66:	682a      	ldr	r2, [r5, #0]
 8002c68:	6813      	ldr	r3, [r2, #0]
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	2400      	movs	r4, #0
 8002c74:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002c7a:	682b      	ldr	r3, [r5, #0]
 8002c7c:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002c7e:	682b      	ldr	r3, [r5, #0]
 8002c80:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002c82:	682b      	ldr	r3, [r5, #0]
 8002c84:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8002c86:	682b      	ldr	r3, [r5, #0]
 8002c88:	2221      	movs	r2, #33	; 0x21
 8002c8a:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f7ff ff11 	bl	8002ab4 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8002c92:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002c94:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002c96:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002c98:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002c9a:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002c9c:	652c      	str	r4, [r5, #80]	; 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002ca0:	233f      	movs	r3, #63	; 0x3f
 8002ca2:	4093      	lsls	r3, r2
 8002ca4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca6:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8002ca8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002cac:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 8002cb0:	4620      	mov	r0, r4
}
 8002cb2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002cb4:	2001      	movs	r0, #1
}
 8002cb6:	4770      	bx	lr

08002cb8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002cb8:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002cba:	6806      	ldr	r6, [r0, #0]
 8002cbc:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8002cbe:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8002cc2:	9d03      	ldr	r5, [sp, #12]
 8002cc4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8002cc8:	432c      	orrs	r4, r5
 8002cca:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002ccc:	6803      	ldr	r3, [r0, #0]
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002cd0:	6843      	ldr	r3, [r0, #4]
 8002cd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cd6:	d003      	beq.n	8002ce0 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002cd8:	6803      	ldr	r3, [r0, #0]
 8002cda:	60d9      	str	r1, [r3, #12]
  }
}
 8002cdc:	bc70      	pop	{r4, r5, r6}
 8002cde:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002ce0:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002ce4:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002ce8:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002cec:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002cee:	6884      	ldr	r4, [r0, #8]
 8002cf0:	b194      	cbz	r4, 8002d18 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002cf2:	2c01      	cmp	r4, #1
 8002cf4:	d00e      	beq.n	8002d14 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002cf6:	2c02      	cmp	r4, #2
 8002cf8:	d011      	beq.n	8002d1e <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002cfa:	2c03      	cmp	r4, #3
 8002cfc:	d017      	beq.n	8002d2e <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 8002cfe:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 8002d00:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002d02:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d04:	0219      	lsls	r1, r3, #8
 8002d06:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002d0a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8002d0e:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8002d12:	e001      	b.n	8002d18 <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 8002d14:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002d18:	6803      	ldr	r3, [r0, #0]
 8002d1a:	6399      	str	r1, [r3, #56]	; 0x38
 8002d1c:	e7de      	b.n	8002cdc <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8002d1e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002d20:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002d22:	02d9      	lsls	r1, r3, #11
 8002d24:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002d28:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002d2c:	e7f4      	b.n	8002d18 <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8002d2e:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8002d30:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002d32:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d34:	0299      	lsls	r1, r3, #10
 8002d36:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002d3a:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8002d3e:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002d42:	e7e9      	b.n	8002d18 <DMA2D_SetConfig+0x60>

08002d44 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8002d44:	b348      	cbz	r0, 8002d9a <HAL_DMA2D_Init+0x56>
{
 8002d46:	b510      	push	{r4, lr}
 8002d48:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d4a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d4e:	b1fb      	cbz	r3, 8002d90 <HAL_DMA2D_Init+0x4c>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d50:	2302      	movs	r3, #2
 8002d52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	6813      	ldr	r3, [r2, #0]
 8002d5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d5e:	6861      	ldr	r1, [r4, #4]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002d68:	f023 0307 	bic.w	r3, r3, #7
 8002d6c:	68a1      	ldr	r1, [r4, #8]
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d72:	6822      	ldr	r2, [r4, #0]
 8002d74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d7e:	68e1      	ldr	r1, [r4, #12]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d84:	2000      	movs	r0, #0
 8002d86:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002d8e:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002d90:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002d94:	f003 f8d4 	bl	8005f40 <HAL_DMA2D_MspInit>
 8002d98:	e7da      	b.n	8002d50 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 8002d9a:	2001      	movs	r0, #1
}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_DMA2D_Start>:
{
 8002d9e:	b510      	push	{r4, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8002da4:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8002da8:	2801      	cmp	r0, #1
 8002daa:	d012      	beq.n	8002dd2 <HAL_DMA2D_Start+0x34>
 8002dac:	2001      	movs	r0, #1
 8002dae:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002db2:	2002      	movs	r0, #2
 8002db4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002db8:	9804      	ldr	r0, [sp, #16]
 8002dba:	9000      	str	r0, [sp, #0]
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f7ff ff7b 	bl	8002cb8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	6813      	ldr	r3, [r2, #0]
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002dcc:	2000      	movs	r0, #0
}
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	e7fb      	b.n	8002dce <HAL_DMA2D_Start+0x30>

08002dd6 <HAL_DMA2D_PollForTransfer>:
{
 8002dd6:	b570      	push	{r4, r5, r6, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	4604      	mov	r4, r0
 8002ddc:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002de2:	6803      	ldr	r3, [r0, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f013 0f01 	tst.w	r3, #1
 8002dea:	d111      	bne.n	8002e10 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002dec:	6822      	ldr	r2, [r4, #0]
 8002dee:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df2:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002df4:	f013 0f20 	tst.w	r3, #32
 8002df8:	d147      	bne.n	8002e8a <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	2212      	movs	r2, #18
 8002dfe:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002e10:	f7ff fdd2 	bl	80029b8 <HAL_GetTick>
 8002e14:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	f012 0f02 	tst.w	r2, #2
 8002e1e:	d1e5      	bne.n	8002dec <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e24:	9a01      	ldr	r2, [sp, #4]
 8002e26:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002e2a:	d114      	bne.n	8002e56 <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 8002e2c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002e30:	d0f1      	beq.n	8002e16 <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7ff fdc1 	bl	80029b8 <HAL_GetTick>
 8002e36:	1b80      	subs	r0, r0, r6
 8002e38:	42a8      	cmp	r0, r5
 8002e3a:	d801      	bhi.n	8002e40 <HAL_DMA2D_PollForTransfer+0x6a>
 8002e3c:	2d00      	cmp	r5, #0
 8002e3e:	d1ea      	bne.n	8002e16 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e42:	f043 0320 	orr.w	r3, r3, #32
 8002e46:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e48:	2003      	movs	r0, #3
 8002e4a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002e54:	e7da      	b.n	8002e0c <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e56:	9a01      	ldr	r2, [sp, #4]
 8002e58:	f012 0f20 	tst.w	r2, #32
 8002e5c:	d003      	beq.n	8002e66 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e60:	f042 0202 	orr.w	r2, r2, #2
 8002e64:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e66:	9a01      	ldr	r2, [sp, #4]
 8002e68:	f012 0f01 	tst.w	r2, #1
 8002e6c:	d003      	beq.n	8002e76 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e6e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e76:	2221      	movs	r2, #33	; 0x21
 8002e78:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002e80:	2300      	movs	r3, #0
 8002e82:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002e86:	2001      	movs	r0, #1
 8002e88:	e7c0      	b.n	8002e0c <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8002e8a:	f7ff fd95 	bl	80029b8 <HAL_GetTick>
 8002e8e:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	f012 0f10 	tst.w	r2, #16
 8002e98:	d1af      	bne.n	8002dfa <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e9e:	9a01      	ldr	r2, [sp, #4]
 8002ea0:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002ea4:	d114      	bne.n	8002ed0 <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 8002ea6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002eaa:	d0f1      	beq.n	8002e90 <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002eac:	f7ff fd84 	bl	80029b8 <HAL_GetTick>
 8002eb0:	1b80      	subs	r0, r0, r6
 8002eb2:	42a8      	cmp	r0, r5
 8002eb4:	d801      	bhi.n	8002eba <HAL_DMA2D_PollForTransfer+0xe4>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d1ea      	bne.n	8002e90 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002eba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ebc:	f043 0320 	orr.w	r3, r3, #32
 8002ec0:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002ece:	e79d      	b.n	8002e0c <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ed0:	9a01      	ldr	r2, [sp, #4]
 8002ed2:	f012 0f08 	tst.w	r2, #8
 8002ed6:	d003      	beq.n	8002ee0 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002ed8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002eda:	f042 0204 	orr.w	r2, r2, #4
 8002ede:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ee0:	9a01      	ldr	r2, [sp, #4]
 8002ee2:	f012 0f20 	tst.w	r2, #32
 8002ee6:	d003      	beq.n	8002ef0 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ee8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002eea:	f042 0202 	orr.w	r2, r2, #2
 8002eee:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ef0:	9a01      	ldr	r2, [sp, #4]
 8002ef2:	f012 0f01 	tst.w	r2, #1
 8002ef6:	d003      	beq.n	8002f00 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ef8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f00:	2229      	movs	r2, #41	; 0x29
 8002f02:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f04:	2304      	movs	r3, #4
 8002f06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002f10:	2001      	movs	r0, #1
 8002f12:	e77b      	b.n	8002e0c <HAL_DMA2D_PollForTransfer+0x36>

08002f14 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002f14:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d059      	beq.n	8002fd0 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8002f1c:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f24:	2302      	movs	r3, #2
 8002f26:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002f2a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	1c8b      	adds	r3, r1, #2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	58c3      	ldr	r3, [r0, r3]
 8002f36:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f3a:	3a09      	subs	r2, #9
 8002f3c:	2a01      	cmp	r2, #1
 8002f3e:	d91e      	bls.n	8002f7e <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f40:	1c8a      	adds	r2, r1, #2
 8002f42:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002f46:	6852      	ldr	r2, [r2, #4]
 8002f48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f4c:	bb41      	cbnz	r1, 8002fa0 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f4e:	6804      	ldr	r4, [r0, #0]
 8002f50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002f52:	4a20      	ldr	r2, [pc, #128]	; (8002fd4 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002f54:	402a      	ands	r2, r5
 8002f56:	4313      	orrs	r3, r2
 8002f58:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f5a:	6802      	ldr	r2, [r0, #0]
 8002f5c:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002f60:	699c      	ldr	r4, [r3, #24]
 8002f62:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	3b09      	subs	r3, #9
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d910      	bls.n	8002f8e <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002f72:	2300      	movs	r3, #0
 8002f74:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8002f78:	4618      	mov	r0, r3
}
 8002f7a:	bc30      	pop	{r4, r5}
 8002f7c:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f7e:	1c8a      	adds	r2, r1, #2
 8002f80:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002f84:	6852      	ldr	r2, [r2, #4]
 8002f86:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	e7de      	b.n	8002f4c <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f8e:	3102      	adds	r1, #2
 8002f90:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002f94:	684b      	ldr	r3, [r1, #4]
 8002f96:	6802      	ldr	r2, [r0, #0]
 8002f98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f9c:	6293      	str	r3, [r2, #40]	; 0x28
 8002f9e:	e7e5      	b.n	8002f6c <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002fa0:	6804      	ldr	r4, [r0, #0]
 8002fa2:	69e5      	ldr	r5, [r4, #28]
 8002fa4:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002fa6:	402a      	ands	r2, r5
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002fac:	6802      	ldr	r2, [r0, #0]
 8002fae:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002fb2:	699c      	ldr	r4, [r3, #24]
 8002fb4:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	3b09      	subs	r3, #9
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d8d6      	bhi.n	8002f6c <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002fbe:	3102      	adds	r1, #2
 8002fc0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002fc4:	684b      	ldr	r3, [r1, #4]
 8002fc6:	6802      	ldr	r2, [r0, #0]
 8002fc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fcc:	6213      	str	r3, [r2, #32]
 8002fce:	e7cd      	b.n	8002f6c <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8002fd0:	2002      	movs	r0, #2
}
 8002fd2:	4770      	bx	lr
 8002fd4:	00fcfff0 	.word	0x00fcfff0

08002fd8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	f200 80ea 	bhi.w	80031b4 <HAL_GPIO_Init+0x1dc>
{
 8002fe0:	b4f0      	push	{r4, r5, r6, r7}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	e05e      	b.n	80030a4 <HAL_GPIO_Init+0xcc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fe6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe8:	005f      	lsls	r7, r3, #1
 8002fea:	2403      	movs	r4, #3
 8002fec:	40bc      	lsls	r4, r7
 8002fee:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff2:	68cc      	ldr	r4, [r1, #12]
 8002ff4:	40bc      	lsls	r4, r7
 8002ff6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002ff8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffa:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003000:	684c      	ldr	r4, [r1, #4]
 8003002:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800300a:	6042      	str	r2, [r0, #4]
 800300c:	e058      	b.n	80030c0 <HAL_GPIO_Init+0xe8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800300e:	08dc      	lsrs	r4, r3, #3
 8003010:	3408      	adds	r4, #8
 8003012:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003016:	f003 0207 	and.w	r2, r3, #7
 800301a:	0096      	lsls	r6, r2, #2
 800301c:	220f      	movs	r2, #15
 800301e:	40b2      	lsls	r2, r6
 8003020:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003024:	690a      	ldr	r2, [r1, #16]
 8003026:	40b2      	lsls	r2, r6
 8003028:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 800302a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800302e:	e05b      	b.n	80030e8 <HAL_GPIO_Init+0x110>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003030:	2209      	movs	r2, #9
 8003032:	e000      	b.n	8003036 <HAL_GPIO_Init+0x5e>
 8003034:	2200      	movs	r2, #0
 8003036:	40b2      	lsls	r2, r6
 8003038:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800303a:	3402      	adds	r4, #2
 800303c:	4e5e      	ldr	r6, [pc, #376]	; (80031b8 <HAL_GPIO_Init+0x1e0>)
 800303e:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003042:	4a5e      	ldr	r2, [pc, #376]	; (80031bc <HAL_GPIO_Init+0x1e4>)
 8003044:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003046:	43ea      	mvns	r2, r5
 8003048:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800304c:	684f      	ldr	r7, [r1, #4]
 800304e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003052:	d001      	beq.n	8003058 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8003054:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003058:	4c58      	ldr	r4, [pc, #352]	; (80031bc <HAL_GPIO_Init+0x1e4>)
 800305a:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800305c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800305e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003062:	684f      	ldr	r7, [r1, #4]
 8003064:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003068:	d001      	beq.n	800306e <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 800306a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800306e:	4c53      	ldr	r4, [pc, #332]	; (80031bc <HAL_GPIO_Init+0x1e4>)
 8003070:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003074:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003078:	684f      	ldr	r7, [r1, #4]
 800307a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800307e:	d001      	beq.n	8003084 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8003080:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8003084:	4c4d      	ldr	r4, [pc, #308]	; (80031bc <HAL_GPIO_Init+0x1e4>)
 8003086:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003088:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800308a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800308c:	684e      	ldr	r6, [r1, #4]
 800308e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003092:	d001      	beq.n	8003098 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8003094:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003098:	4c48      	ldr	r4, [pc, #288]	; (80031bc <HAL_GPIO_Init+0x1e4>)
 800309a:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309c:	3301      	adds	r3, #1
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	f200 8085 	bhi.w	80031ae <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80030a4:	2201      	movs	r2, #1
 80030a6:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a8:	680c      	ldr	r4, [r1, #0]
 80030aa:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80030ae:	ea32 0404 	bics.w	r4, r2, r4
 80030b2:	d1f3      	bne.n	800309c <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030b4:	684c      	ldr	r4, [r1, #4]
 80030b6:	f004 0403 	and.w	r4, r4, #3
 80030ba:	3c01      	subs	r4, #1
 80030bc:	2c01      	cmp	r4, #1
 80030be:	d992      	bls.n	8002fe6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c0:	684a      	ldr	r2, [r1, #4]
 80030c2:	f002 0203 	and.w	r2, r2, #3
 80030c6:	2a03      	cmp	r2, #3
 80030c8:	d009      	beq.n	80030de <HAL_GPIO_Init+0x106>
        temp = GPIOx->PUPDR;
 80030ca:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030cc:	005e      	lsls	r6, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	40b2      	lsls	r2, r6
 80030d2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d6:	688a      	ldr	r2, [r1, #8]
 80030d8:	40b2      	lsls	r2, r6
 80030da:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80030dc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030de:	684a      	ldr	r2, [r1, #4]
 80030e0:	f002 0203 	and.w	r2, r2, #3
 80030e4:	2a02      	cmp	r2, #2
 80030e6:	d092      	beq.n	800300e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80030e8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ea:	005e      	lsls	r6, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	40b2      	lsls	r2, r6
 80030f0:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f4:	684a      	ldr	r2, [r1, #4]
 80030f6:	f002 0203 	and.w	r2, r2, #3
 80030fa:	40b2      	lsls	r2, r6
 80030fc:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80030fe:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003100:	684a      	ldr	r2, [r1, #4]
 8003102:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8003106:	d0c9      	beq.n	800309c <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003108:	2200      	movs	r2, #0
 800310a:	9201      	str	r2, [sp, #4]
 800310c:	4a2c      	ldr	r2, [pc, #176]	; (80031c0 <HAL_GPIO_Init+0x1e8>)
 800310e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003110:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003114:	6454      	str	r4, [r2, #68]	; 0x44
 8003116:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003118:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003120:	089c      	lsrs	r4, r3, #2
 8003122:	1ca6      	adds	r6, r4, #2
 8003124:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <HAL_GPIO_Init+0x1e0>)
 8003126:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800312a:	f003 0203 	and.w	r2, r3, #3
 800312e:	0096      	lsls	r6, r2, #2
 8003130:	220f      	movs	r2, #15
 8003132:	40b2      	lsls	r2, r6
 8003134:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_GPIO_Init+0x1ec>)
 800313a:	4290      	cmp	r0, r2
 800313c:	f43f af7a 	beq.w	8003034 <HAL_GPIO_Init+0x5c>
 8003140:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003144:	4290      	cmp	r0, r2
 8003146:	d022      	beq.n	800318e <HAL_GPIO_Init+0x1b6>
 8003148:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800314c:	4290      	cmp	r0, r2
 800314e:	d020      	beq.n	8003192 <HAL_GPIO_Init+0x1ba>
 8003150:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003154:	4290      	cmp	r0, r2
 8003156:	d01e      	beq.n	8003196 <HAL_GPIO_Init+0x1be>
 8003158:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800315c:	4290      	cmp	r0, r2
 800315e:	d01c      	beq.n	800319a <HAL_GPIO_Init+0x1c2>
 8003160:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003164:	4290      	cmp	r0, r2
 8003166:	d01a      	beq.n	800319e <HAL_GPIO_Init+0x1c6>
 8003168:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800316c:	4290      	cmp	r0, r2
 800316e:	d018      	beq.n	80031a2 <HAL_GPIO_Init+0x1ca>
 8003170:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003174:	4290      	cmp	r0, r2
 8003176:	d016      	beq.n	80031a6 <HAL_GPIO_Init+0x1ce>
 8003178:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800317c:	4290      	cmp	r0, r2
 800317e:	d014      	beq.n	80031aa <HAL_GPIO_Init+0x1d2>
 8003180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003184:	4290      	cmp	r0, r2
 8003186:	f43f af53 	beq.w	8003030 <HAL_GPIO_Init+0x58>
 800318a:	220a      	movs	r2, #10
 800318c:	e753      	b.n	8003036 <HAL_GPIO_Init+0x5e>
 800318e:	2201      	movs	r2, #1
 8003190:	e751      	b.n	8003036 <HAL_GPIO_Init+0x5e>
 8003192:	2202      	movs	r2, #2
 8003194:	e74f      	b.n	8003036 <HAL_GPIO_Init+0x5e>
 8003196:	2203      	movs	r2, #3
 8003198:	e74d      	b.n	8003036 <HAL_GPIO_Init+0x5e>
 800319a:	2204      	movs	r2, #4
 800319c:	e74b      	b.n	8003036 <HAL_GPIO_Init+0x5e>
 800319e:	2205      	movs	r2, #5
 80031a0:	e749      	b.n	8003036 <HAL_GPIO_Init+0x5e>
 80031a2:	2206      	movs	r2, #6
 80031a4:	e747      	b.n	8003036 <HAL_GPIO_Init+0x5e>
 80031a6:	2207      	movs	r2, #7
 80031a8:	e745      	b.n	8003036 <HAL_GPIO_Init+0x5e>
 80031aa:	2208      	movs	r2, #8
 80031ac:	e743      	b.n	8003036 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80031ae:	b002      	add	sp, #8
 80031b0:	bcf0      	pop	{r4, r5, r6, r7}
 80031b2:	4770      	bx	lr
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40013800 	.word	0x40013800
 80031bc:	40013c00 	.word	0x40013c00
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020000 	.word	0x40020000

080031c8 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	f200 809b 	bhi.w	8003306 <HAL_GPIO_DeInit+0x13e>
{
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	e02d      	b.n	8003230 <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031d4:	2609      	movs	r6, #9
 80031d6:	e000      	b.n	80031da <HAL_GPIO_DeInit+0x12>
 80031d8:	2600      	movs	r6, #0
 80031da:	fa06 f404 	lsl.w	r4, r6, r4
 80031de:	42ac      	cmp	r4, r5
 80031e0:	d075      	beq.n	80032ce <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031e2:	6805      	ldr	r5, [r0, #0]
 80031e4:	005c      	lsls	r4, r3, #1
 80031e6:	2603      	movs	r6, #3
 80031e8:	fa06 f404 	lsl.w	r4, r6, r4
 80031ec:	ea25 0504 	bic.w	r5, r5, r4
 80031f0:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f2:	fa23 f506 	lsr.w	r5, r3, r6
 80031f6:	3508      	adds	r5, #8
 80031f8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80031fc:	f003 0707 	and.w	r7, r3, #7
 8003200:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8003204:	270f      	movs	r7, #15
 8003206:	fa07 f70c 	lsl.w	r7, r7, ip
 800320a:	ea26 0607 	bic.w	r6, r6, r7
 800320e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003212:	68c5      	ldr	r5, [r0, #12]
 8003214:	ea25 0504 	bic.w	r5, r5, r4
 8003218:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800321a:	6845      	ldr	r5, [r0, #4]
 800321c:	ea25 0202 	bic.w	r2, r5, r2
 8003220:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003222:	6882      	ldr	r2, [r0, #8]
 8003224:	ea22 0404 	bic.w	r4, r2, r4
 8003228:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322a:	3301      	adds	r3, #1
 800322c:	2b0f      	cmp	r3, #15
 800322e:	d869      	bhi.n	8003304 <HAL_GPIO_DeInit+0x13c>
    ioposition = 0x01U << position;
 8003230:	2201      	movs	r2, #1
 8003232:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8003234:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 8003238:	ea32 0401 	bics.w	r4, r2, r1
 800323c:	d1f5      	bne.n	800322a <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800323e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003242:	f10c 0502 	add.w	r5, ip, #2
 8003246:	4c30      	ldr	r4, [pc, #192]	; (8003308 <HAL_GPIO_DeInit+0x140>)
 8003248:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800324c:	f003 0403 	and.w	r4, r3, #3
 8003250:	00a4      	lsls	r4, r4, #2
 8003252:	260f      	movs	r6, #15
 8003254:	fa06 fe04 	lsl.w	lr, r6, r4
 8003258:	ea0e 0505 	and.w	r5, lr, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800325c:	4e2b      	ldr	r6, [pc, #172]	; (800330c <HAL_GPIO_DeInit+0x144>)
 800325e:	42b0      	cmp	r0, r6
 8003260:	d0ba      	beq.n	80031d8 <HAL_GPIO_DeInit+0x10>
 8003262:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003266:	42b0      	cmp	r0, r6
 8003268:	d021      	beq.n	80032ae <HAL_GPIO_DeInit+0xe6>
 800326a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800326e:	42b0      	cmp	r0, r6
 8003270:	d01f      	beq.n	80032b2 <HAL_GPIO_DeInit+0xea>
 8003272:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003276:	42b0      	cmp	r0, r6
 8003278:	d01d      	beq.n	80032b6 <HAL_GPIO_DeInit+0xee>
 800327a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800327e:	42b0      	cmp	r0, r6
 8003280:	d01b      	beq.n	80032ba <HAL_GPIO_DeInit+0xf2>
 8003282:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003286:	42b0      	cmp	r0, r6
 8003288:	d019      	beq.n	80032be <HAL_GPIO_DeInit+0xf6>
 800328a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800328e:	42b0      	cmp	r0, r6
 8003290:	d017      	beq.n	80032c2 <HAL_GPIO_DeInit+0xfa>
 8003292:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003296:	42b0      	cmp	r0, r6
 8003298:	d015      	beq.n	80032c6 <HAL_GPIO_DeInit+0xfe>
 800329a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800329e:	42b0      	cmp	r0, r6
 80032a0:	d013      	beq.n	80032ca <HAL_GPIO_DeInit+0x102>
 80032a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80032a6:	42b0      	cmp	r0, r6
 80032a8:	d094      	beq.n	80031d4 <HAL_GPIO_DeInit+0xc>
 80032aa:	260a      	movs	r6, #10
 80032ac:	e795      	b.n	80031da <HAL_GPIO_DeInit+0x12>
 80032ae:	2601      	movs	r6, #1
 80032b0:	e793      	b.n	80031da <HAL_GPIO_DeInit+0x12>
 80032b2:	2602      	movs	r6, #2
 80032b4:	e791      	b.n	80031da <HAL_GPIO_DeInit+0x12>
 80032b6:	2603      	movs	r6, #3
 80032b8:	e78f      	b.n	80031da <HAL_GPIO_DeInit+0x12>
 80032ba:	2604      	movs	r6, #4
 80032bc:	e78d      	b.n	80031da <HAL_GPIO_DeInit+0x12>
 80032be:	2605      	movs	r6, #5
 80032c0:	e78b      	b.n	80031da <HAL_GPIO_DeInit+0x12>
 80032c2:	2606      	movs	r6, #6
 80032c4:	e789      	b.n	80031da <HAL_GPIO_DeInit+0x12>
 80032c6:	2607      	movs	r6, #7
 80032c8:	e787      	b.n	80031da <HAL_GPIO_DeInit+0x12>
 80032ca:	2608      	movs	r6, #8
 80032cc:	e785      	b.n	80031da <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032ce:	4c10      	ldr	r4, [pc, #64]	; (8003310 <HAL_GPIO_DeInit+0x148>)
 80032d0:	6825      	ldr	r5, [r4, #0]
 80032d2:	ea25 0507 	bic.w	r5, r5, r7
 80032d6:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032d8:	6865      	ldr	r5, [r4, #4]
 80032da:	ea25 0507 	bic.w	r5, r5, r7
 80032de:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80032e0:	68a5      	ldr	r5, [r4, #8]
 80032e2:	ea25 0507 	bic.w	r5, r5, r7
 80032e6:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032e8:	68e5      	ldr	r5, [r4, #12]
 80032ea:	ea25 0707 	bic.w	r7, r5, r7
 80032ee:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80032f0:	4d05      	ldr	r5, [pc, #20]	; (8003308 <HAL_GPIO_DeInit+0x140>)
 80032f2:	f10c 0402 	add.w	r4, ip, #2
 80032f6:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80032fa:	ea26 060e 	bic.w	r6, r6, lr
 80032fe:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 8003302:	e76e      	b.n	80031e2 <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 8003304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003306:	4770      	bx	lr
 8003308:	40013800 	.word	0x40013800
 800330c:	40020000 	.word	0x40020000
 8003310:	40013c00 	.word	0x40013c00

08003314 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003314:	6903      	ldr	r3, [r0, #16]
 8003316:	4219      	tst	r1, r3
 8003318:	d001      	beq.n	800331e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800331a:	2001      	movs	r0, #1
 800331c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800331e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003320:	4770      	bx	lr

08003322 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003322:	b10a      	cbz	r2, 8003328 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003324:	6181      	str	r1, [r0, #24]
 8003326:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003328:	0409      	lsls	r1, r1, #16
 800332a:	6181      	str	r1, [r0, #24]
  }
}
 800332c:	4770      	bx	lr

0800332e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800332e:	6803      	ldr	r3, [r0, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003336:	d101      	bne.n	800333c <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8003338:	2000      	movs	r0, #0
}
 800333a:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003340:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	2300      	movs	r3, #0
 8003344:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	2220      	movs	r2, #32
 8003348:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003350:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003352:	f042 0204 	orr.w	r2, r2, #4
 8003356:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003358:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800335c:	2001      	movs	r0, #1
 800335e:	4770      	bx	lr

08003360 <I2C_WaitOnFlagUntilTimeout>:
{
 8003360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003364:	4607      	mov	r7, r0
 8003366:	460d      	mov	r5, r1
 8003368:	4690      	mov	r8, r2
 800336a:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800336c:	e022      	b.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7ff fb23 	bl	80029b8 <HAL_GetTick>
 8003372:	9b06      	ldr	r3, [sp, #24]
 8003374:	1ac0      	subs	r0, r0, r3
 8003376:	42b0      	cmp	r0, r6
 8003378:	d800      	bhi.n	800337c <I2C_WaitOnFlagUntilTimeout+0x1c>
 800337a:	b9de      	cbnz	r6, 80033b4 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800337c:	2300      	movs	r3, #0
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003380:	2220      	movs	r2, #32
 8003382:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003386:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800338c:	f042 0220 	orr.w	r2, r2, #32
 8003390:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003392:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8003396:	2001      	movs	r0, #1
 8003398:	e01a      	b.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	699c      	ldr	r4, [r3, #24]
 800339e:	ea25 0404 	bic.w	r4, r5, r4
 80033a2:	b2a4      	uxth	r4, r4
 80033a4:	fab4 f484 	clz	r4, r4
 80033a8:	0964      	lsrs	r4, r4, #5
 80033aa:	45a0      	cmp	r8, r4
 80033ac:	d10f      	bne.n	80033ce <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	f1b6 3fff 	cmp.w	r6, #4294967295
 80033b2:	d1dc      	bne.n	800336e <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d1ee      	bne.n	800339a <I2C_WaitOnFlagUntilTimeout+0x3a>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695c      	ldr	r4, [r3, #20]
 80033c0:	ea25 0404 	bic.w	r4, r5, r4
 80033c4:	b2a4      	uxth	r4, r4
 80033c6:	fab4 f484 	clz	r4, r4
 80033ca:	0964      	lsrs	r4, r4, #5
 80033cc:	e7ed      	b.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 80033ce:	2000      	movs	r0, #0
}
 80033d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80033d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d8:	4605      	mov	r5, r0
 80033da:	460e      	mov	r6, r1
 80033dc:	4617      	mov	r7, r2
 80033de:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033e0:	e03d      	b.n	800345e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ea:	682b      	ldr	r3, [r5, #0]
 80033ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033f0:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f6:	2220      	movs	r2, #32
 80033f8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003400:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003402:	f042 0204 	orr.w	r2, r2, #4
 8003406:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003408:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800340c:	2001      	movs	r0, #1
 800340e:	e034      	b.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003410:	f7ff fad2 	bl	80029b8 <HAL_GetTick>
 8003414:	eba0 0008 	sub.w	r0, r0, r8
 8003418:	42b8      	cmp	r0, r7
 800341a:	d800      	bhi.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 800341c:	b9ff      	cbnz	r7, 800345e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800341e:	2300      	movs	r3, #0
 8003420:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003422:	2220      	movs	r2, #32
 8003424:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800342e:	f042 0220 	orr.w	r2, r2, #32
 8003432:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003434:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8003438:	2001      	movs	r0, #1
 800343a:	e01e      	b.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	699c      	ldr	r4, [r3, #24]
 8003440:	ea26 0404 	bic.w	r4, r6, r4
 8003444:	b2a4      	uxth	r4, r4
 8003446:	3c00      	subs	r4, #0
 8003448:	bf18      	it	ne
 800344a:	2401      	movne	r4, #1
 800344c:	b1a4      	cbz	r4, 8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344e:	682b      	ldr	r3, [r5, #0]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003456:	d1c4      	bne.n	80033e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003458:	f1b7 3fff 	cmp.w	r7, #4294967295
 800345c:	d1d8      	bne.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800345e:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8003462:	2b01      	cmp	r3, #1
 8003464:	d1ea      	bne.n	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	695c      	ldr	r4, [r3, #20]
 800346a:	ea26 0404 	bic.w	r4, r6, r4
 800346e:	b2a4      	uxth	r4, r4
 8003470:	3c00      	subs	r4, #0
 8003472:	bf18      	it	ne
 8003474:	2401      	movne	r4, #1
 8003476:	e7e9      	b.n	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8003478:	2000      	movs	r0, #0
}
 800347a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800347e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800347e:	b570      	push	{r4, r5, r6, lr}
 8003480:	4604      	mov	r4, r0
 8003482:	460d      	mov	r5, r1
 8003484:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800348e:	d11c      	bne.n	80034ca <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003490:	4620      	mov	r0, r4
 8003492:	f7ff ff4c 	bl	800332e <I2C_IsAcknowledgeFailed>
 8003496:	b9d0      	cbnz	r0, 80034ce <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003498:	f1b5 3fff 	cmp.w	r5, #4294967295
 800349c:	d0f3      	beq.n	8003486 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7ff fa8b 	bl	80029b8 <HAL_GetTick>
 80034a2:	1b80      	subs	r0, r0, r6
 80034a4:	42a8      	cmp	r0, r5
 80034a6:	d801      	bhi.n	80034ac <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80034a8:	2d00      	cmp	r5, #0
 80034aa:	d1ec      	bne.n	8003486 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034b0:	2220      	movs	r2, #32
 80034b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034bc:	f042 0220 	orr.w	r2, r2, #32
 80034c0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80034c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80034c6:	2001      	movs	r0, #1
 80034c8:	e000      	b.n	80034cc <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80034ca:	2000      	movs	r0, #0
}
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80034ce:	2001      	movs	r0, #1
 80034d0:	e7fc      	b.n	80034cc <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

080034d4 <I2C_RequestMemoryWrite>:
{
 80034d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034d8:	b085      	sub	sp, #20
 80034da:	4604      	mov	r4, r0
 80034dc:	460d      	mov	r5, r1
 80034de:	4691      	mov	r9, r2
 80034e0:	461f      	mov	r7, r3
 80034e2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80034e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e8:	6803      	ldr	r3, [r0, #0]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80034f0:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f2:	9600      	str	r6, [sp, #0]
 80034f4:	4643      	mov	r3, r8
 80034f6:	2200      	movs	r2, #0
 80034f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034fc:	f7ff ff30 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8003500:	b960      	cbnz	r0, 800351c <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003508:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800350a:	4633      	mov	r3, r6
 800350c:	4642      	mov	r2, r8
 800350e:	4926      	ldr	r1, [pc, #152]	; (80035a8 <I2C_RequestMemoryWrite+0xd4>)
 8003510:	4620      	mov	r0, r4
 8003512:	f7ff ff5f 	bl	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003516:	b168      	cbz	r0, 8003534 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8003518:	2001      	movs	r0, #1
 800351a:	e008      	b.n	800352e <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003524:	d002      	beq.n	800352c <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800352a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800352c:	2003      	movs	r0, #3
}
 800352e:	b005      	add	sp, #20
 8003530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003534:	2300      	movs	r3, #0
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	9203      	str	r2, [sp, #12]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	9303      	str	r3, [sp, #12]
 8003542:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003544:	4632      	mov	r2, r6
 8003546:	4641      	mov	r1, r8
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff ff98 	bl	800347e <I2C_WaitOnTXEFlagUntilTimeout>
 800354e:	b930      	cbnz	r0, 800355e <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003550:	2f01      	cmp	r7, #1
 8003552:	d10f      	bne.n	8003574 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	fa5f f689 	uxtb.w	r6, r9
 800355a:	611e      	str	r6, [r3, #16]
 800355c:	e7e7      	b.n	800352e <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003560:	2b04      	cmp	r3, #4
 8003562:	d001      	beq.n	8003568 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8003564:	2001      	movs	r0, #1
 8003566:	e7e2      	b.n	800352e <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e7f7      	b.n	8003564 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800357a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357c:	4632      	mov	r2, r6
 800357e:	4641      	mov	r1, r8
 8003580:	4620      	mov	r0, r4
 8003582:	f7ff ff7c 	bl	800347e <I2C_WaitOnTXEFlagUntilTimeout>
 8003586:	b920      	cbnz	r0, 8003592 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	fa5f f689 	uxtb.w	r6, r9
 800358e:	611e      	str	r6, [r3, #16]
 8003590:	e7cd      	b.n	800352e <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003594:	2b04      	cmp	r3, #4
 8003596:	d001      	beq.n	800359c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
 800359a:	e7c8      	b.n	800352e <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	6822      	ldr	r2, [r4, #0]
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e7f7      	b.n	8003598 <I2C_RequestMemoryWrite+0xc4>
 80035a8:	00010002 	.word	0x00010002

080035ac <I2C_RequestMemoryRead>:
{
 80035ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	4604      	mov	r4, r0
 80035b4:	460d      	mov	r5, r1
 80035b6:	4616      	mov	r6, r2
 80035b8:	4699      	mov	r9, r3
 80035ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80035bc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c0:	6802      	ldr	r2, [r0, #0]
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c8:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ca:	6803      	ldr	r3, [r0, #0]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80035d2:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d4:	f8cd 8000 	str.w	r8, [sp]
 80035d8:	463b      	mov	r3, r7
 80035da:	2200      	movs	r2, #0
 80035dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035e0:	f7ff febe 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80035e4:	b970      	cbnz	r0, 8003604 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035e6:	fa5f fa85 	uxtb.w	sl, r5
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80035f0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f2:	4643      	mov	r3, r8
 80035f4:	463a      	mov	r2, r7
 80035f6:	4941      	ldr	r1, [pc, #260]	; (80036fc <I2C_RequestMemoryRead+0x150>)
 80035f8:	4620      	mov	r0, r4
 80035fa:	f7ff feeb 	bl	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035fe:	b168      	cbz	r0, 800361c <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8003600:	2001      	movs	r0, #1
 8003602:	e008      	b.n	8003616 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f413 7f80 	tst.w	r3, #256	; 0x100
 800360c:	d002      	beq.n	8003614 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003612:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003614:	2003      	movs	r0, #3
}
 8003616:	b004      	add	sp, #16
 8003618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361c:	2300      	movs	r3, #0
 800361e:	9303      	str	r3, [sp, #12]
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	9203      	str	r2, [sp, #12]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	9303      	str	r3, [sp, #12]
 800362a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362c:	4642      	mov	r2, r8
 800362e:	4639      	mov	r1, r7
 8003630:	4620      	mov	r0, r4
 8003632:	f7ff ff24 	bl	800347e <I2C_WaitOnTXEFlagUntilTimeout>
 8003636:	b980      	cbnz	r0, 800365a <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003638:	f1b9 0f01 	cmp.w	r9, #1
 800363c:	d118      	bne.n	8003670 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	b2f6      	uxtb	r6, r6
 8003642:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003644:	4642      	mov	r2, r8
 8003646:	4639      	mov	r1, r7
 8003648:	4620      	mov	r0, r4
 800364a:	f7ff ff18 	bl	800347e <I2C_WaitOnTXEFlagUntilTimeout>
 800364e:	b368      	cbz	r0, 80036ac <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003652:	2b04      	cmp	r3, #4
 8003654:	d024      	beq.n	80036a0 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8003656:	2001      	movs	r0, #1
 8003658:	e7dd      	b.n	8003616 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800365a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800365c:	2b04      	cmp	r3, #4
 800365e:	d001      	beq.n	8003664 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8003660:	2001      	movs	r0, #1
 8003662:	e7d8      	b.n	8003616 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003664:	6822      	ldr	r2, [r4, #0]
 8003666:	6813      	ldr	r3, [r2, #0]
 8003668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e7f7      	b.n	8003660 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	0a32      	lsrs	r2, r6, #8
 8003674:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003676:	4642      	mov	r2, r8
 8003678:	4639      	mov	r1, r7
 800367a:	4620      	mov	r0, r4
 800367c:	f7ff feff 	bl	800347e <I2C_WaitOnTXEFlagUntilTimeout>
 8003680:	b918      	cbnz	r0, 800368a <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	b2f6      	uxtb	r6, r6
 8003686:	611e      	str	r6, [r3, #16]
 8003688:	e7dc      	b.n	8003644 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800368c:	2b04      	cmp	r3, #4
 800368e:	d001      	beq.n	8003694 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8003690:	2001      	movs	r0, #1
 8003692:	e7c0      	b.n	8003616 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	6822      	ldr	r2, [r4, #0]
 8003696:	6813      	ldr	r3, [r2, #0]
 8003698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e7f7      	b.n	8003690 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e7d4      	b.n	8003656 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ac:	6822      	ldr	r2, [r4, #0]
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b6:	f8cd 8000 	str.w	r8, [sp]
 80036ba:	463b      	mov	r3, r7
 80036bc:	2200      	movs	r2, #0
 80036be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c2:	4620      	mov	r0, r4
 80036c4:	f7ff fe4c 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80036c8:	b968      	cbnz	r0, 80036e6 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	f04a 0301 	orr.w	r3, sl, #1
 80036d0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d2:	4643      	mov	r3, r8
 80036d4:	463a      	mov	r2, r7
 80036d6:	4909      	ldr	r1, [pc, #36]	; (80036fc <I2C_RequestMemoryRead+0x150>)
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff fe7b 	bl	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036de:	2800      	cmp	r0, #0
 80036e0:	d099      	beq.n	8003616 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 80036e2:	2001      	movs	r0, #1
 80036e4:	e797      	b.n	8003616 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036ee:	d002      	beq.n	80036f6 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80036f6:	2003      	movs	r0, #3
 80036f8:	e78d      	b.n	8003616 <I2C_RequestMemoryRead+0x6a>
 80036fa:	bf00      	nop
 80036fc:	00010002 	.word	0x00010002

08003700 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	4604      	mov	r4, r0
 8003704:	460d      	mov	r5, r1
 8003706:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f013 0f04 	tst.w	r3, #4
 8003710:	d11c      	bne.n	800374c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003712:	4620      	mov	r0, r4
 8003714:	f7ff fe0b 	bl	800332e <I2C_IsAcknowledgeFailed>
 8003718:	b9d0      	cbnz	r0, 8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800371a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800371e:	d0f3      	beq.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003720:	f7ff f94a 	bl	80029b8 <HAL_GetTick>
 8003724:	1b80      	subs	r0, r0, r6
 8003726:	42a8      	cmp	r0, r5
 8003728:	d801      	bhi.n	800372e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800372a:	2d00      	cmp	r5, #0
 800372c:	d1ec      	bne.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	2300      	movs	r3, #0
 8003730:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003732:	2220      	movs	r2, #32
 8003734:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003738:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800373e:	f042 0220 	orr.w	r2, r2, #32
 8003742:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003744:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003748:	2001      	movs	r0, #1
 800374a:	e000      	b.n	800374e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 800374c:	2000      	movs	r0, #0
}
 800374e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003750:	2001      	movs	r0, #1
 8003752:	e7fc      	b.n	800374e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003754 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4605      	mov	r5, r0
 8003758:	460c      	mov	r4, r1
 800375a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	6959      	ldr	r1, [r3, #20]
 8003760:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003764:	d129      	bne.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003766:	6959      	ldr	r1, [r3, #20]
 8003768:	f011 0f10 	tst.w	r1, #16
 800376c:	d115      	bne.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7ff f923 	bl	80029b8 <HAL_GetTick>
 8003772:	1b80      	subs	r0, r0, r6
 8003774:	42a0      	cmp	r0, r4
 8003776:	d801      	bhi.n	800377c <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8003778:	2c00      	cmp	r4, #0
 800377a:	d1ef      	bne.n	800375c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800377c:	2300      	movs	r3, #0
 800377e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	2220      	movs	r2, #32
 8003782:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003786:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800378a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800378c:	f042 0220 	orr.w	r2, r2, #32
 8003790:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003792:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003796:	2001      	movs	r0, #1
}
 8003798:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379a:	f06f 0210 	mvn.w	r2, #16
 800379e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	2220      	movs	r2, #32
 80037a6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037aa:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037ae:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80037b0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80037b2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80037b6:	2001      	movs	r0, #1
 80037b8:	e7ee      	b.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 80037ba:	2000      	movs	r0, #0
 80037bc:	e7ec      	b.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

080037c0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f000 80cc 	beq.w	800395e <HAL_I2C_Init+0x19e>
{
 80037c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d077      	beq.n	80038c2 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d2:	2324      	movs	r3, #36	; 0x24
 80037d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80037d8:	6822      	ldr	r2, [r4, #0]
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	6813      	ldr	r3, [r2, #0]
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ea:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ec:	6822      	ldr	r2, [r4, #0]
 80037ee:	6813      	ldr	r3, [r2, #0]
 80037f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037f4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f6:	f001 f839 	bl	800486c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037fa:	6862      	ldr	r2, [r4, #4]
 80037fc:	4b5a      	ldr	r3, [pc, #360]	; (8003968 <HAL_I2C_Init+0x1a8>)
 80037fe:	429a      	cmp	r2, r3
 8003800:	d864      	bhi.n	80038cc <HAL_I2C_Init+0x10c>
 8003802:	4b5a      	ldr	r3, [pc, #360]	; (800396c <HAL_I2C_Init+0x1ac>)
 8003804:	4298      	cmp	r0, r3
 8003806:	bf8c      	ite	hi
 8003808:	2300      	movhi	r3, #0
 800380a:	2301      	movls	r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	f040 80a8 	bne.w	8003962 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8003812:	4d57      	ldr	r5, [pc, #348]	; (8003970 <HAL_I2C_Init+0x1b0>)
 8003814:	fba5 3500 	umull	r3, r5, r5, r0
 8003818:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381a:	6826      	ldr	r6, [r4, #0]
 800381c:	6871      	ldr	r1, [r6, #4]
 800381e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003822:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8003826:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003828:	6821      	ldr	r1, [r4, #0]
 800382a:	6a0b      	ldr	r3, [r1, #32]
 800382c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003830:	6865      	ldr	r5, [r4, #4]
 8003832:	4a4d      	ldr	r2, [pc, #308]	; (8003968 <HAL_I2C_Init+0x1a8>)
 8003834:	4295      	cmp	r5, r2
 8003836:	d84f      	bhi.n	80038d8 <HAL_I2C_Init+0x118>
 8003838:	1c7a      	adds	r2, r7, #1
 800383a:	4313      	orrs	r3, r2
 800383c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800383e:	6825      	ldr	r5, [r4, #0]
 8003840:	69e9      	ldr	r1, [r5, #28]
 8003842:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003846:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800384a:	6863      	ldr	r3, [r4, #4]
 800384c:	4a46      	ldr	r2, [pc, #280]	; (8003968 <HAL_I2C_Init+0x1a8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d84c      	bhi.n	80038ec <HAL_I2C_Init+0x12c>
 8003852:	3801      	subs	r0, #1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fbb0 f0f3 	udiv	r0, r0, r3
 800385a:	3001      	adds	r0, #1
 800385c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003860:	4218      	tst	r0, r3
 8003862:	d078      	beq.n	8003956 <HAL_I2C_Init+0x196>
 8003864:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003868:	430b      	orrs	r3, r1
 800386a:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800386c:	6821      	ldr	r1, [r4, #0]
 800386e:	680b      	ldr	r3, [r1, #0]
 8003870:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003874:	69e2      	ldr	r2, [r4, #28]
 8003876:	6a20      	ldr	r0, [r4, #32]
 8003878:	4302      	orrs	r2, r0
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800387e:	6821      	ldr	r1, [r4, #0]
 8003880:	688b      	ldr	r3, [r1, #8]
 8003882:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800388a:	6922      	ldr	r2, [r4, #16]
 800388c:	68e0      	ldr	r0, [r4, #12]
 800388e:	4302      	orrs	r2, r0
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003894:	6821      	ldr	r1, [r4, #0]
 8003896:	68cb      	ldr	r3, [r1, #12]
 8003898:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800389c:	6962      	ldr	r2, [r4, #20]
 800389e:	69a0      	ldr	r0, [r4, #24]
 80038a0:	4302      	orrs	r2, r0
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	6813      	ldr	r3, [r2, #0]
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b0:	2000      	movs	r0, #0
 80038b2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	2320      	movs	r3, #32
 80038b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80038c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80038c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80038c6:	f002 fd0d 	bl	80062e4 <HAL_I2C_MspInit>
 80038ca:	e782      	b.n	80037d2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <HAL_I2C_Init+0x1b4>)
 80038ce:	4298      	cmp	r0, r3
 80038d0:	bf8c      	ite	hi
 80038d2:	2300      	movhi	r3, #0
 80038d4:	2301      	movls	r3, #1
 80038d6:	e799      	b.n	800380c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038dc:	fb02 f207 	mul.w	r2, r2, r7
 80038e0:	4d25      	ldr	r5, [pc, #148]	; (8003978 <HAL_I2C_Init+0x1b8>)
 80038e2:	fba5 5202 	umull	r5, r2, r5, r2
 80038e6:	0992      	lsrs	r2, r2, #6
 80038e8:	3201      	adds	r2, #1
 80038ea:	e7a6      	b.n	800383a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038ec:	68a2      	ldr	r2, [r4, #8]
 80038ee:	b9ba      	cbnz	r2, 8003920 <HAL_I2C_Init+0x160>
 80038f0:	1e46      	subs	r6, r0, #1
 80038f2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80038f6:	fbb6 f6f7 	udiv	r6, r6, r7
 80038fa:	3601      	adds	r6, #1
 80038fc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003900:	fab6 f686 	clz	r6, r6
 8003904:	0976      	lsrs	r6, r6, #5
 8003906:	bb46      	cbnz	r6, 800395a <HAL_I2C_Init+0x19a>
 8003908:	b9c2      	cbnz	r2, 800393c <HAL_I2C_Init+0x17c>
 800390a:	1e42      	subs	r2, r0, #1
 800390c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003910:	fbb2 f2f3 	udiv	r2, r2, r3
 8003914:	3201      	adds	r2, #1
 8003916:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800391a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800391e:	e7a3      	b.n	8003868 <HAL_I2C_Init+0xa8>
 8003920:	1e46      	subs	r6, r0, #1
 8003922:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003926:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800392a:	fbb6 f6f7 	udiv	r6, r6, r7
 800392e:	3601      	adds	r6, #1
 8003930:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003934:	fab6 f686 	clz	r6, r6
 8003938:	0976      	lsrs	r6, r6, #5
 800393a:	e7e4      	b.n	8003906 <HAL_I2C_Init+0x146>
 800393c:	1e42      	subs	r2, r0, #1
 800393e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003942:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003946:	fbb2 f2f3 	udiv	r2, r2, r3
 800394a:	3201      	adds	r2, #1
 800394c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003950:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003954:	e788      	b.n	8003868 <HAL_I2C_Init+0xa8>
 8003956:	2304      	movs	r3, #4
 8003958:	e786      	b.n	8003868 <HAL_I2C_Init+0xa8>
 800395a:	2301      	movs	r3, #1
 800395c:	e784      	b.n	8003868 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800395e:	2001      	movs	r0, #1
}
 8003960:	4770      	bx	lr
    return HAL_ERROR;
 8003962:	2001      	movs	r0, #1
 8003964:	e7ac      	b.n	80038c0 <HAL_I2C_Init+0x100>
 8003966:	bf00      	nop
 8003968:	000186a0 	.word	0x000186a0
 800396c:	001e847f 	.word	0x001e847f
 8003970:	431bde83 	.word	0x431bde83
 8003974:	003d08ff 	.word	0x003d08ff
 8003978:	10624dd3 	.word	0x10624dd3

0800397c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800397c:	b1a8      	cbz	r0, 80039aa <HAL_I2C_DeInit+0x2e>
{
 800397e:	b510      	push	{r4, lr}
 8003980:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003982:	2324      	movs	r3, #36	; 0x24
 8003984:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003988:	6802      	ldr	r2, [r0, #0]
 800398a:	6813      	ldr	r3, [r2, #0]
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003992:	f002 fcfd 	bl	8006390 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003996:	2000      	movs	r0, #0
 8003998:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800399a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039a0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 80039a4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80039a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80039aa:	2001      	movs	r0, #1
}
 80039ac:	4770      	bx	lr
	...

080039b0 <HAL_I2C_Mem_Write>:
{
 80039b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039b4:	b083      	sub	sp, #12
 80039b6:	4604      	mov	r4, r0
 80039b8:	460f      	mov	r7, r1
 80039ba:	4690      	mov	r8, r2
 80039bc:	4699      	mov	r9, r3
 80039be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7fe fffa 	bl	80029b8 <HAL_GetTick>
 80039c4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80039ca:	b2c0      	uxtb	r0, r0
 80039cc:	2820      	cmp	r0, #32
 80039ce:	d003      	beq.n	80039d8 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80039d0:	2002      	movs	r0, #2
}
 80039d2:	b003      	add	sp, #12
 80039d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d8:	9500      	str	r5, [sp, #0]
 80039da:	2319      	movs	r3, #25
 80039dc:	2201      	movs	r2, #1
 80039de:	494b      	ldr	r1, [pc, #300]	; (8003b0c <HAL_I2C_Mem_Write+0x15c>)
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7ff fcbd 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	2800      	cmp	r0, #0
 80039e8:	f040 8089 	bne.w	8003afe <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 80039ec:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	f000 8086 	beq.w	8003b02 <HAL_I2C_Mem_Write+0x152>
 80039f6:	2301      	movs	r3, #1
 80039f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	f012 0f01 	tst.w	r2, #1
 8003a04:	d103      	bne.n	8003a0e <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a0e:	6822      	ldr	r2, [r4, #0]
 8003a10:	6813      	ldr	r3, [r2, #0]
 8003a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a16:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a18:	2321      	movs	r3, #33	; 0x21
 8003a1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a2a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a2c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003a30:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a34:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_I2C_Mem_Write+0x160>)
 8003a38:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3a:	9501      	str	r5, [sp, #4]
 8003a3c:	9600      	str	r6, [sp, #0]
 8003a3e:	464b      	mov	r3, r9
 8003a40:	4642      	mov	r2, r8
 8003a42:	4639      	mov	r1, r7
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7ff fd45 	bl	80034d4 <I2C_RequestMemoryWrite>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d15b      	bne.n	8003b06 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8003a4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d035      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a54:	462a      	mov	r2, r5
 8003a56:	4631      	mov	r1, r6
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff fd10 	bl	800347e <I2C_WaitOnTXEFlagUntilTimeout>
 8003a5e:	bb20      	cbnz	r0, 8003aaa <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a6a:	1c4b      	adds	r3, r1, #1
 8003a6c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003a6e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003a70:	3a01      	subs	r2, #1
 8003a72:	b292      	uxth	r2, r2
 8003a74:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003a76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	6958      	ldr	r0, [r3, #20]
 8003a84:	f010 0f04 	tst.w	r0, #4
 8003a88:	d0e1      	beq.n	8003a4e <HAL_I2C_Mem_Write+0x9e>
 8003a8a:	2a00      	cmp	r2, #0
 8003a8c:	d0df      	beq.n	8003a4e <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8e:	784a      	ldrb	r2, [r1, #1]
 8003a90:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a94:	3301      	adds	r3, #1
 8003a96:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003a98:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003a9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003aa8:	e7d1      	b.n	8003a4e <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	e78e      	b.n	80039d2 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab4:	6822      	ldr	r2, [r4, #0]
 8003ab6:	6813      	ldr	r3, [r2, #0]
 8003ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e7f7      	b.n	8003ab0 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac0:	462a      	mov	r2, r5
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7ff fe1b 	bl	8003700 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aca:	b150      	cbz	r0, 8003ae2 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	e77d      	b.n	80039d2 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	6813      	ldr	r3, [r2, #0]
 8003ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	e7f7      	b.n	8003ad2 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	6813      	ldr	r3, [r2, #0]
 8003ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aea:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	2320      	movs	r3, #32
 8003aee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003af8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003afc:	e769      	b.n	80039d2 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8003afe:	2002      	movs	r0, #2
 8003b00:	e767      	b.n	80039d2 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8003b02:	2002      	movs	r0, #2
 8003b04:	e765      	b.n	80039d2 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8003b06:	2001      	movs	r0, #1
 8003b08:	e763      	b.n	80039d2 <HAL_I2C_Mem_Write+0x22>
 8003b0a:	bf00      	nop
 8003b0c:	00100002 	.word	0x00100002
 8003b10:	ffff0000 	.word	0xffff0000

08003b14 <HAL_I2C_Mem_Read>:
{
 8003b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	460f      	mov	r7, r1
 8003b1e:	4690      	mov	r8, r2
 8003b20:	4699      	mov	r9, r3
 8003b22:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8003b24:	f7fe ff48 	bl	80029b8 <HAL_GetTick>
 8003b28:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b2a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003b2e:	b2c0      	uxtb	r0, r0
 8003b30:	2820      	cmp	r0, #32
 8003b32:	d004      	beq.n	8003b3e <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8003b34:	2702      	movs	r7, #2
}
 8003b36:	4638      	mov	r0, r7
 8003b38:	b007      	add	sp, #28
 8003b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b3e:	9500      	str	r5, [sp, #0]
 8003b40:	2319      	movs	r3, #25
 8003b42:	2201      	movs	r2, #1
 8003b44:	499d      	ldr	r1, [pc, #628]	; (8003dbc <HAL_I2C_Mem_Read+0x2a8>)
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7ff fc0a 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	f040 8144 	bne.w	8003dda <HAL_I2C_Mem_Read+0x2c6>
    __HAL_LOCK(hi2c);
 8003b52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	f000 8141 	beq.w	8003dde <HAL_I2C_Mem_Read+0x2ca>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	f012 0f01 	tst.w	r2, #1
 8003b6a:	d103      	bne.n	8003b74 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b74:	6822      	ldr	r2, [r4, #0]
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b7c:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b7e:	2322      	movs	r3, #34	; 0x22
 8003b80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b84:	2340      	movs	r3, #64	; 0x40
 8003b86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b90:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b92:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003b96:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b9a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9c:	4b88      	ldr	r3, [pc, #544]	; (8003dc0 <HAL_I2C_Mem_Read+0x2ac>)
 8003b9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ba0:	9501      	str	r5, [sp, #4]
 8003ba2:	9600      	str	r6, [sp, #0]
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	4642      	mov	r2, r8
 8003ba8:	4639      	mov	r1, r7
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7ff fcfe 	bl	80035ac <I2C_RequestMemoryRead>
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	f040 8115 	bne.w	8003de2 <HAL_I2C_Mem_Read+0x2ce>
    if (hi2c->XferSize == 0U)
 8003bb8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bba:	b95b      	cbnz	r3, 8003bd4 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbc:	9302      	str	r3, [sp, #8]
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	9202      	str	r2, [sp, #8]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	9202      	str	r2, [sp, #8]
 8003bc8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e098      	b.n	8003d06 <HAL_I2C_Mem_Read+0x1f2>
    else if (hi2c->XferSize == 1U)
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d00a      	beq.n	8003bee <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d01a      	beq.n	8003c12 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9305      	str	r3, [sp, #20]
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	9205      	str	r2, [sp, #20]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	9305      	str	r3, [sp, #20]
 8003bea:	9b05      	ldr	r3, [sp, #20]
 8003bec:	e08b      	b.n	8003d06 <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bee:	6822      	ldr	r2, [r4, #0]
 8003bf0:	6813      	ldr	r3, [r2, #0]
 8003bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9303      	str	r3, [sp, #12]
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	9203      	str	r2, [sp, #12]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	9203      	str	r2, [sp, #12]
 8003c06:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e079      	b.n	8003d06 <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c1a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c1c:	6822      	ldr	r2, [r4, #0]
 8003c1e:	6813      	ldr	r3, [r2, #0]
 8003c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c24:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	9204      	str	r2, [sp, #16]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	9304      	str	r3, [sp, #16]
 8003c34:	9b04      	ldr	r3, [sp, #16]
 8003c36:	e066      	b.n	8003d06 <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c38:	462a      	mov	r2, r5
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7ff fd89 	bl	8003754 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	f040 80cf 	bne.w	8003de6 <HAL_I2C_Mem_Read+0x2d2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c4e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c52:	3301      	adds	r3, #1
 8003c54:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003c56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003c5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003c66:	e04e      	b.n	8003d06 <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c68:	9500      	str	r5, [sp, #0]
 8003c6a:	4633      	mov	r3, r6
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	4955      	ldr	r1, [pc, #340]	; (8003dc4 <HAL_I2C_Mem_Read+0x2b0>)
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7ff fb75 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	f040 80b7 	bne.w	8003dea <HAL_I2C_Mem_Read+0x2d6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	6822      	ldr	r2, [r4, #0]
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c84:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c8c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003c8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c90:	1c53      	adds	r3, r2, #1
 8003c92:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003c94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003c9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cac:	3301      	adds	r3, #1
 8003cae:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003cb0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003cb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003cc0:	e021      	b.n	8003d06 <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc2:	6822      	ldr	r2, [r4, #0]
 8003cc4:	6813      	ldr	r3, [r2, #0]
 8003cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cca:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cd2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003cd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cd6:	1c53      	adds	r3, r2, #1
 8003cd8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003cda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003ce0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003cf6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003cfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d05d      	beq.n	8003dc8 <HAL_I2C_Mem_Read+0x2b4>
      if (hi2c->XferSize <= 3U)
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d82b      	bhi.n	8003d68 <HAL_I2C_Mem_Read+0x254>
        if (hi2c->XferSize == 1U)
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d091      	beq.n	8003c38 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d0a7      	beq.n	8003c68 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d18:	9500      	str	r5, [sp, #0]
 8003d1a:	4633      	mov	r3, r6
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	4929      	ldr	r1, [pc, #164]	; (8003dc4 <HAL_I2C_Mem_Read+0x2b0>)
 8003d20:	4620      	mov	r0, r4
 8003d22:	f7ff fb1d 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d161      	bne.n	8003dee <HAL_I2C_Mem_Read+0x2da>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	6813      	ldr	r3, [r2, #0]
 8003d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d32:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d3a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d3e:	3301      	adds	r3, #1
 8003d40:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003d42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003d48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d52:	9500      	str	r5, [sp, #0]
 8003d54:	4633      	mov	r3, r6
 8003d56:	2200      	movs	r2, #0
 8003d58:	491a      	ldr	r1, [pc, #104]	; (8003dc4 <HAL_I2C_Mem_Read+0x2b0>)
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff fb00 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d0ae      	beq.n	8003cc2 <HAL_I2C_Mem_Read+0x1ae>
            return HAL_ERROR;
 8003d64:	2701      	movs	r7, #1
 8003d66:	e6e6      	b.n	8003b36 <HAL_I2C_Mem_Read+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d68:	462a      	mov	r2, r5
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f7ff fcf1 	bl	8003754 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d13d      	bne.n	8003df2 <HAL_I2C_Mem_Read+0x2de>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d7c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d80:	1c53      	adds	r3, r2, #1
 8003d82:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003d84:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	6959      	ldr	r1, [r3, #20]
 8003d98:	f011 0f04 	tst.w	r1, #4
 8003d9c:	d0b3      	beq.n	8003d06 <HAL_I2C_Mem_Read+0x1f2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003da4:	3301      	adds	r3, #1
 8003da6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003da8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003daa:	3b01      	subs	r3, #1
 8003dac:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003dae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003db8:	e7a5      	b.n	8003d06 <HAL_I2C_Mem_Read+0x1f2>
 8003dba:	bf00      	nop
 8003dbc:	00100002 	.word	0x00100002
 8003dc0:	ffff0000 	.word	0xffff0000
 8003dc4:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	2320      	movs	r3, #32
 8003dca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003dd4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003dd8:	e6ad      	b.n	8003b36 <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 8003dda:	2702      	movs	r7, #2
 8003ddc:	e6ab      	b.n	8003b36 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8003dde:	2702      	movs	r7, #2
 8003de0:	e6a9      	b.n	8003b36 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8003de2:	2701      	movs	r7, #1
 8003de4:	e6a7      	b.n	8003b36 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8003de6:	2701      	movs	r7, #1
 8003de8:	e6a5      	b.n	8003b36 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8003dea:	2701      	movs	r7, #1
 8003dec:	e6a3      	b.n	8003b36 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8003dee:	2701      	movs	r7, #1
 8003df0:	e6a1      	b.n	8003b36 <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 8003df2:	2701      	movs	r7, #1
 8003df4:	e69f      	b.n	8003b36 <HAL_I2C_Mem_Read+0x22>
 8003df6:	bf00      	nop

08003df8 <HAL_I2C_GetState>:
  return hi2c->State;
 8003df8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8003dfc:	4770      	bx	lr

08003dfe <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d001      	beq.n	8003e0c <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2002      	movs	r0, #2
  }
}
 8003e0a:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0c:	2324      	movs	r3, #36	; 0x24
 8003e0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8003e12:	6802      	ldr	r2, [r0, #0]
 8003e14:	6813      	ldr	r3, [r2, #0]
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e1c:	6802      	ldr	r2, [r0, #0]
 8003e1e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003e20:	f023 0310 	bic.w	r3, r3, #16
 8003e24:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e26:	6802      	ldr	r2, [r0, #0]
 8003e28:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003e2a:	4319      	orrs	r1, r3
 8003e2c:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8003e2e:	6802      	ldr	r2, [r0, #0]
 8003e30:	6813      	ldr	r3, [r2, #0]
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	2320      	movs	r3, #32
 8003e3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8003e3e:	2000      	movs	r0, #0
 8003e40:	4770      	bx	lr

08003e42 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2002      	movs	r0, #2
  }
}
 8003e4e:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e50:	2324      	movs	r3, #36	; 0x24
 8003e52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8003e56:	6802      	ldr	r2, [r0, #0]
 8003e58:	6813      	ldr	r3, [r2, #0]
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 8003e60:	6802      	ldr	r2, [r0, #0]
 8003e62:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003e64:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e66:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 8003e6a:	4319      	orrs	r1, r3
 8003e6c:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 8003e6e:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8003e70:	6802      	ldr	r2, [r0, #0]
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	2320      	movs	r3, #32
 8003e7c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8003e80:	2000      	movs	r0, #0
 8003e82:	4770      	bx	lr

08003e84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e84:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003e86:	684e      	ldr	r6, [r1, #4]
 8003e88:	6805      	ldr	r5, [r0, #0]
 8003e8a:	68eb      	ldr	r3, [r5, #12]
 8003e8c:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8003e90:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003e92:	01d4      	lsls	r4, r2, #7
 8003e94:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003e98:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003e9c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ea0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ea4:	680b      	ldr	r3, [r1, #0]
 8003ea6:	6805      	ldr	r5, [r0, #0]
 8003ea8:	68ef      	ldr	r7, [r5, #12]
 8003eaa:	f3c7 470b 	ubfx	r7, r7, #16, #12
 8003eae:	443b      	add	r3, r7
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003eba:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ebe:	68ce      	ldr	r6, [r1, #12]
 8003ec0:	6805      	ldr	r5, [r0, #0]
 8003ec2:	68eb      	ldr	r3, [r5, #12]
 8003ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ec8:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003eca:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003ece:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003ed2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ed6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003eda:	688b      	ldr	r3, [r1, #8]
 8003edc:	6805      	ldr	r5, [r0, #0]
 8003ede:	68ef      	ldr	r7, [r5, #12]
 8003ee0:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003ee4:	443b      	add	r3, r7
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003eec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003ef0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003ef4:	6803      	ldr	r3, [r0, #0]
 8003ef6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003efa:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 8003efe:	f025 0507 	bic.w	r5, r5, #7
 8003f02:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003f06:	6803      	ldr	r3, [r0, #0]
 8003f08:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003f0c:	690d      	ldr	r5, [r1, #16]
 8003f0e:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003f12:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003f16:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003f1a:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003f1c:	6806      	ldr	r6, [r0, #0]
 8003f1e:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8003f22:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 8003f26:	2500      	movs	r5, #0
 8003f28:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f2c:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8003f30:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8003f34:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003f38:	6806      	ldr	r6, [r0, #0]
 8003f3a:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8003f3e:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8003f42:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f46:	6803      	ldr	r3, [r0, #0]
 8003f48:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003f4c:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8003f50:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 8003f54:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f58:	6803      	ldr	r3, [r0, #0]
 8003f5a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003f5e:	694e      	ldr	r6, [r1, #20]
 8003f60:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f64:	6803      	ldr	r3, [r0, #0]
 8003f66:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003f6a:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8003f6e:	f426 66e0 	bic.w	r6, r6, #1792	; 0x700
 8003f72:	f026 0607 	bic.w	r6, r6, #7
 8003f76:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f7a:	69ce      	ldr	r6, [r1, #28]
 8003f7c:	6a0f      	ldr	r7, [r1, #32]
 8003f7e:	6803      	ldr	r3, [r0, #0]
 8003f80:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003f84:	433e      	orrs	r6, r7
 8003f86:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f8a:	6803      	ldr	r3, [r0, #0]
 8003f8c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003f90:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 8003f94:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f98:	6803      	ldr	r3, [r0, #0]
 8003f9a:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8003f9e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003fa0:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003fa4:	690b      	ldr	r3, [r1, #16]
 8003fa6:	b16b      	cbz	r3, 8003fc4 <LTDC_SetConfig+0x140>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d03b      	beq.n	8004024 <LTDC_SetConfig+0x1a0>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d03b      	beq.n	8004028 <LTDC_SetConfig+0x1a4>
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d008      	beq.n	8003fc6 <LTDC_SetConfig+0x142>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d039      	beq.n	800402c <LTDC_SetConfig+0x1a8>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fb8:	2b07      	cmp	r3, #7
 8003fba:	d001      	beq.n	8003fc0 <LTDC_SetConfig+0x13c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e002      	b.n	8003fc6 <LTDC_SetConfig+0x142>
    tmp = 2U;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e000      	b.n	8003fc6 <LTDC_SetConfig+0x142>
    tmp = 4U;
 8003fc4:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003fc6:	6802      	ldr	r2, [r0, #0]
 8003fc8:	4422      	add	r2, r4
 8003fca:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003fce:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003fd2:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003fd6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003fd8:	fb03 f502 	mul.w	r5, r3, r2
 8003fdc:	684a      	ldr	r2, [r1, #4]
 8003fde:	680e      	ldr	r6, [r1, #0]
 8003fe0:	1b92      	subs	r2, r2, r6
 8003fe2:	fb03 f302 	mul.w	r3, r3, r2
 8003fe6:	3303      	adds	r3, #3
 8003fe8:	6802      	ldr	r2, [r0, #0]
 8003fea:	4422      	add	r2, r4
 8003fec:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003ff0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003ff4:	6803      	ldr	r3, [r0, #0]
 8003ff6:	4423      	add	r3, r4
 8003ff8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003ffc:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8004000:	f022 0207 	bic.w	r2, r2, #7
 8004004:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004008:	6803      	ldr	r3, [r0, #0]
 800400a:	4423      	add	r3, r4
 800400c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800400e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004012:	6803      	ldr	r3, [r0, #0]
 8004014:	441c      	add	r4, r3
 8004016:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8004022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8004024:	2303      	movs	r3, #3
 8004026:	e7ce      	b.n	8003fc6 <LTDC_SetConfig+0x142>
    tmp = 2U;
 8004028:	2302      	movs	r3, #2
 800402a:	e7cc      	b.n	8003fc6 <LTDC_SetConfig+0x142>
 800402c:	2302      	movs	r3, #2
 800402e:	e7ca      	b.n	8003fc6 <LTDC_SetConfig+0x142>

08004030 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8004030:	2800      	cmp	r0, #0
 8004032:	d072      	beq.n	800411a <HAL_LTDC_Init+0xea>
{
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004038:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d067      	beq.n	8004110 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004040:	2302      	movs	r3, #2
 8004042:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	6993      	ldr	r3, [r2, #24]
 800404a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800404e:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004050:	6821      	ldr	r1, [r4, #0]
 8004052:	698a      	ldr	r2, [r1, #24]
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	68a0      	ldr	r0, [r4, #8]
 8004058:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800405a:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800405c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800405e:	6920      	ldr	r0, [r4, #16]
 8004060:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004062:	4313      	orrs	r3, r2
 8004064:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004066:	6821      	ldr	r1, [r4, #0]
 8004068:	688a      	ldr	r2, [r1, #8]
 800406a:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <HAL_LTDC_Init+0xf0>)
 800406c:	401a      	ands	r2, r3
 800406e:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004070:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004072:	6820      	ldr	r0, [r4, #0]
 8004074:	6882      	ldr	r2, [r0, #8]
 8004076:	69a1      	ldr	r1, [r4, #24]
 8004078:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800407c:	430a      	orrs	r2, r1
 800407e:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004080:	6821      	ldr	r1, [r4, #0]
 8004082:	68ca      	ldr	r2, [r1, #12]
 8004084:	401a      	ands	r2, r3
 8004086:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004088:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800408a:	6820      	ldr	r0, [r4, #0]
 800408c:	68c2      	ldr	r2, [r0, #12]
 800408e:	6a21      	ldr	r1, [r4, #32]
 8004090:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004094:	430a      	orrs	r2, r1
 8004096:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004098:	6821      	ldr	r1, [r4, #0]
 800409a:	690a      	ldr	r2, [r1, #16]
 800409c:	401a      	ands	r2, r3
 800409e:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80040a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80040a2:	6820      	ldr	r0, [r4, #0]
 80040a4:	6902      	ldr	r2, [r0, #16]
 80040a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80040a8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80040ac:	430a      	orrs	r2, r1
 80040ae:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80040b0:	6821      	ldr	r1, [r4, #0]
 80040b2:	694a      	ldr	r2, [r1, #20]
 80040b4:	4013      	ands	r3, r2
 80040b6:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80040b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80040ba:	6821      	ldr	r1, [r4, #0]
 80040bc:	694b      	ldr	r3, [r1, #20]
 80040be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040c0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80040c4:	4313      	orrs	r3, r2
 80040c6:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80040c8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80040cc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80040d0:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80040d2:	6821      	ldr	r1, [r4, #0]
 80040d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80040d6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80040da:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80040dc:	6821      	ldr	r1, [r4, #0]
 80040de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80040e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80040e4:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80040e8:	4303      	orrs	r3, r0
 80040ea:	4313      	orrs	r3, r2
 80040ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80040ee:	6822      	ldr	r2, [r4, #0]
 80040f0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80040f2:	f043 0306 	orr.w	r3, r3, #6
 80040f6:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80040f8:	6822      	ldr	r2, [r4, #0]
 80040fa:	6993      	ldr	r3, [r2, #24]
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004102:	2000      	movs	r0, #0
 8004104:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004108:	2301      	movs	r3, #1
 800410a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800410e:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8004110:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004114:	f002 f9b6 	bl	8006484 <HAL_LTDC_MspInit>
 8004118:	e792      	b.n	8004040 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800411a:	2001      	movs	r0, #1
}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	f000f800 	.word	0xf000f800

08004124 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8004124:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d027      	beq.n	800417c <HAL_LTDC_ConfigLayer+0x58>
{
 800412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004130:	4606      	mov	r6, r0
 8004132:	460f      	mov	r7, r1
 8004134:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8004136:	f04f 0801 	mov.w	r8, #1
 800413a:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800413e:	2302      	movs	r3, #2
 8004140:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004144:	2434      	movs	r4, #52	; 0x34
 8004146:	fb04 0402 	mla	r4, r4, r2, r0
 800414a:	3438      	adds	r4, #56	; 0x38
 800414c:	460d      	mov	r5, r1
 800414e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800415e:	4662      	mov	r2, ip
 8004160:	4639      	mov	r1, r7
 8004162:	4630      	mov	r0, r6
 8004164:	f7ff fe8e 	bl	8003e84 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004168:	6833      	ldr	r3, [r6, #0]
 800416a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800416e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004172:	2000      	movs	r0, #0
 8004174:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 800417c:	2002      	movs	r0, #2
}
 800417e:	4770      	bx	lr

08004180 <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 8004180:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004184:	2b01      	cmp	r3, #1
 8004186:	d01e      	beq.n	80041c6 <HAL_LTDC_ConfigColorKeying+0x46>
{
 8004188:	b430      	push	{r4, r5}
  __HAL_LOCK(hltdc);
 800418a:	2401      	movs	r4, #1
 800418c:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004190:	2302      	movs	r3, #2
 8004192:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8004196:	6803      	ldr	r3, [r0, #0]
 8004198:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800419c:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 80041a0:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 80041a4:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80041a8:	6803      	ldr	r3, [r0, #0]
 80041aa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80041ae:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80041b2:	6803      	ldr	r3, [r0, #0]
 80041b4:	625c      	str	r4, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80041b6:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80041ba:	2300      	movs	r3, #0
 80041bc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80041c0:	4618      	mov	r0, r3
}
 80041c2:	bc30      	pop	{r4, r5}
 80041c4:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80041c6:	2002      	movs	r0, #2
}
 80041c8:	4770      	bx	lr

080041ca <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 80041ca:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d017      	beq.n	8004202 <HAL_LTDC_EnableColorKeying+0x38>
 80041d2:	2201      	movs	r2, #1
 80041d4:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041d8:	2302      	movs	r3, #2
 80041da:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80041de:	6803      	ldr	r3, [r0, #0]
 80041e0:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 80041e4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80041f0:	6803      	ldr	r3, [r0, #0]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80041f4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80041f8:	2300      	movs	r3, #0
 80041fa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80041fe:	4618      	mov	r0, r3
 8004200:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8004202:	2002      	movs	r0, #2
}
 8004204:	4770      	bx	lr
	...

08004208 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8004208:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800420c:	2b01      	cmp	r3, #1
 800420e:	d011      	beq.n	8004234 <HAL_LTDC_EnableDither+0x2c>
 8004210:	2201      	movs	r2, #1
 8004212:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004216:	2302      	movs	r3, #2
 8004218:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800421c:	4906      	ldr	r1, [pc, #24]	; (8004238 <HAL_LTDC_EnableDither+0x30>)
 800421e:	698b      	ldr	r3, [r1, #24]
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	618b      	str	r3, [r1, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004226:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800422a:	2300      	movs	r3, #0
 800422c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8004230:	4618      	mov	r0, r3
 8004232:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8004234:	2002      	movs	r0, #2
}
 8004236:	4770      	bx	lr
 8004238:	40016800 	.word	0x40016800

0800423c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800423c:	2800      	cmp	r0, #0
 800423e:	f000 81df 	beq.w	8004600 <HAL_RCC_OscConfig+0x3c4>
{
 8004242:	b570      	push	{r4, r5, r6, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004248:	6803      	ldr	r3, [r0, #0]
 800424a:	f013 0f01 	tst.w	r3, #1
 800424e:	d03b      	beq.n	80042c8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004250:	4ba6      	ldr	r3, [pc, #664]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b04      	cmp	r3, #4
 800425a:	d02c      	beq.n	80042b6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425c:	4ba3      	ldr	r3, [pc, #652]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004264:	2b08      	cmp	r3, #8
 8004266:	d021      	beq.n	80042ac <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004268:	6863      	ldr	r3, [r4, #4]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d04f      	beq.n	8004310 <HAL_RCC_OscConfig+0xd4>
 8004270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004274:	d052      	beq.n	800431c <HAL_RCC_OscConfig+0xe0>
 8004276:	4b9d      	ldr	r3, [pc, #628]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004286:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004288:	6863      	ldr	r3, [r4, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d050      	beq.n	8004330 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428e:	f7fe fb93 	bl	80029b8 <HAL_GetTick>
 8004292:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004294:	4b95      	ldr	r3, [pc, #596]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800429c:	d114      	bne.n	80042c8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800429e:	f7fe fb8b 	bl	80029b8 <HAL_GetTick>
 80042a2:	1b40      	subs	r0, r0, r5
 80042a4:	2864      	cmp	r0, #100	; 0x64
 80042a6:	d9f5      	bls.n	8004294 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80042a8:	2003      	movs	r0, #3
 80042aa:	e1b0      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ac:	4b8f      	ldr	r3, [pc, #572]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80042b4:	d0d8      	beq.n	8004268 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b6:	4b8d      	ldr	r3, [pc, #564]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80042be:	d003      	beq.n	80042c8 <HAL_RCC_OscConfig+0x8c>
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 819e 	beq.w	8004604 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	f013 0f02 	tst.w	r3, #2
 80042ce:	d054      	beq.n	800437a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d0:	4b86      	ldr	r3, [pc, #536]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f013 0f0c 	tst.w	r3, #12
 80042d8:	d03e      	beq.n	8004358 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042da:	4b84      	ldr	r3, [pc, #528]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d033      	beq.n	800434e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042e6:	68e3      	ldr	r3, [r4, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d067      	beq.n	80043bc <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ec:	4b80      	ldr	r3, [pc, #512]	; (80044f0 <HAL_RCC_OscConfig+0x2b4>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fe fb61 	bl	80029b8 <HAL_GetTick>
 80042f6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f8:	4b7c      	ldr	r3, [pc, #496]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f013 0f02 	tst.w	r3, #2
 8004300:	d153      	bne.n	80043aa <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004302:	f7fe fb59 	bl	80029b8 <HAL_GetTick>
 8004306:	1b40      	subs	r0, r0, r5
 8004308:	2802      	cmp	r0, #2
 800430a:	d9f5      	bls.n	80042f8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800430c:	2003      	movs	r0, #3
 800430e:	e17e      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004310:	4a76      	ldr	r2, [pc, #472]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e7b5      	b.n	8004288 <HAL_RCC_OscConfig+0x4c>
 800431c:	4b73      	ldr	r3, [pc, #460]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e7ab      	b.n	8004288 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004330:	f7fe fb42 	bl	80029b8 <HAL_GetTick>
 8004334:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800433e:	d0c3      	beq.n	80042c8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004340:	f7fe fb3a 	bl	80029b8 <HAL_GetTick>
 8004344:	1b40      	subs	r0, r0, r5
 8004346:	2864      	cmp	r0, #100	; 0x64
 8004348:	d9f5      	bls.n	8004336 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800434a:	2003      	movs	r0, #3
 800434c:	e15f      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434e:	4b67      	ldr	r3, [pc, #412]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004356:	d1c6      	bne.n	80042e6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004358:	4b64      	ldr	r3, [pc, #400]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f013 0f02 	tst.w	r3, #2
 8004360:	d003      	beq.n	800436a <HAL_RCC_OscConfig+0x12e>
 8004362:	68e3      	ldr	r3, [r4, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 814f 	bne.w	8004608 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4a60      	ldr	r2, [pc, #384]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004372:	6921      	ldr	r1, [r4, #16]
 8004374:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004378:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f013 0f08 	tst.w	r3, #8
 8004380:	d040      	beq.n	8004404 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004382:	6963      	ldr	r3, [r4, #20]
 8004384:	b363      	cbz	r3, 80043e0 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004386:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <HAL_RCC_OscConfig+0x2b8>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fe fb14 	bl	80029b8 <HAL_GetTick>
 8004390:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004392:	4b56      	ldr	r3, [pc, #344]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	f013 0f02 	tst.w	r3, #2
 800439a:	d133      	bne.n	8004404 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439c:	f7fe fb0c 	bl	80029b8 <HAL_GetTick>
 80043a0:	1b40      	subs	r0, r0, r5
 80043a2:	2802      	cmp	r0, #2
 80043a4:	d9f5      	bls.n	8004392 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 80043a6:	2003      	movs	r0, #3
 80043a8:	e131      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043aa:	4a50      	ldr	r2, [pc, #320]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80043ac:	6813      	ldr	r3, [r2, #0]
 80043ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80043b2:	6921      	ldr	r1, [r4, #16]
 80043b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e7de      	b.n	800437a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80043bc:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <HAL_RCC_OscConfig+0x2b4>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043c2:	f7fe faf9 	bl	80029b8 <HAL_GetTick>
 80043c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c8:	4b48      	ldr	r3, [pc, #288]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f013 0f02 	tst.w	r3, #2
 80043d0:	d0d3      	beq.n	800437a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d2:	f7fe faf1 	bl	80029b8 <HAL_GetTick>
 80043d6:	1b40      	subs	r0, r0, r5
 80043d8:	2802      	cmp	r0, #2
 80043da:	d9f5      	bls.n	80043c8 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80043dc:	2003      	movs	r0, #3
 80043de:	e116      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	4b44      	ldr	r3, [pc, #272]	; (80044f4 <HAL_RCC_OscConfig+0x2b8>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fe fae7 	bl	80029b8 <HAL_GetTick>
 80043ea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80043ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f0:	f013 0f02 	tst.w	r3, #2
 80043f4:	d006      	beq.n	8004404 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f6:	f7fe fadf 	bl	80029b8 <HAL_GetTick>
 80043fa:	1b40      	subs	r0, r0, r5
 80043fc:	2802      	cmp	r0, #2
 80043fe:	d9f5      	bls.n	80043ec <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8004400:	2003      	movs	r0, #3
 8004402:	e104      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	f013 0f04 	tst.w	r3, #4
 800440a:	d078      	beq.n	80044fe <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440c:	4b37      	ldr	r3, [pc, #220]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004414:	d10d      	bne.n	8004432 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	9301      	str	r3, [sp, #4]
 800441a:	4b34      	ldr	r3, [pc, #208]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 800441c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800442e:	2501      	movs	r5, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <HAL_RCC_OscConfig+0x2bc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f413 7f80 	tst.w	r3, #256	; 0x100
 800443c:	d021      	beq.n	8004482 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d032      	beq.n	80044aa <HAL_RCC_OscConfig+0x26e>
 8004444:	2b05      	cmp	r3, #5
 8004446:	d036      	beq.n	80044b6 <HAL_RCC_OscConfig+0x27a>
 8004448:	4b28      	ldr	r3, [pc, #160]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 800444a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	671a      	str	r2, [r3, #112]	; 0x70
 8004452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004454:	f022 0204 	bic.w	r2, r2, #4
 8004458:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800445a:	68a3      	ldr	r3, [r4, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d034      	beq.n	80044ca <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fe faaa 	bl	80029b8 <HAL_GetTick>
 8004464:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004466:	4b21      	ldr	r3, [pc, #132]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	f013 0f02 	tst.w	r3, #2
 800446e:	d145      	bne.n	80044fc <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fe faa2 	bl	80029b8 <HAL_GetTick>
 8004474:	1b80      	subs	r0, r0, r6
 8004476:	f241 3388 	movw	r3, #5000	; 0x1388
 800447a:	4298      	cmp	r0, r3
 800447c:	d9f3      	bls.n	8004466 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800447e:	2003      	movs	r0, #3
 8004480:	e0c5      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <HAL_RCC_OscConfig+0x2bc>)
 8004484:	6813      	ldr	r3, [r2, #0]
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800448c:	f7fe fa94 	bl	80029b8 <HAL_GetTick>
 8004490:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004492:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCC_OscConfig+0x2bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f413 7f80 	tst.w	r3, #256	; 0x100
 800449a:	d1d0      	bne.n	800443e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449c:	f7fe fa8c 	bl	80029b8 <HAL_GetTick>
 80044a0:	1b80      	subs	r0, r0, r6
 80044a2:	2802      	cmp	r0, #2
 80044a4:	d9f5      	bls.n	8004492 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80044a6:	2003      	movs	r0, #3
 80044a8:	e0b1      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044aa:	4a10      	ldr	r2, [pc, #64]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80044ac:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	e7d1      	b.n	800445a <HAL_RCC_OscConfig+0x21e>
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80044b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ba:	f042 0204 	orr.w	r2, r2, #4
 80044be:	671a      	str	r2, [r3, #112]	; 0x70
 80044c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	671a      	str	r2, [r3, #112]	; 0x70
 80044c8:	e7c7      	b.n	800445a <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ca:	f7fe fa75 	bl	80029b8 <HAL_GetTick>
 80044ce:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_OscConfig+0x2b0>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	f013 0f02 	tst.w	r3, #2
 80044d8:	d010      	beq.n	80044fc <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fe fa6d 	bl	80029b8 <HAL_GetTick>
 80044de:	1b80      	subs	r0, r0, r6
 80044e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80044e4:	4298      	cmp	r0, r3
 80044e6:	d9f3      	bls.n	80044d0 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80044e8:	2003      	movs	r0, #3
 80044ea:	e090      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
 80044ec:	40023800 	.word	0x40023800
 80044f0:	42470000 	.word	0x42470000
 80044f4:	42470e80 	.word	0x42470e80
 80044f8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044fc:	b9ed      	cbnz	r5, 800453a <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044fe:	69a3      	ldr	r3, [r4, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8083 	beq.w	800460c <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004506:	4a49      	ldr	r2, [pc, #292]	; (800462c <HAL_RCC_OscConfig+0x3f0>)
 8004508:	6892      	ldr	r2, [r2, #8]
 800450a:	f002 020c 	and.w	r2, r2, #12
 800450e:	2a08      	cmp	r2, #8
 8004510:	d051      	beq.n	80045b6 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004512:	2b02      	cmp	r3, #2
 8004514:	d017      	beq.n	8004546 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004516:	4b46      	ldr	r3, [pc, #280]	; (8004630 <HAL_RCC_OscConfig+0x3f4>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fe fa4c 	bl	80029b8 <HAL_GetTick>
 8004520:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	4b42      	ldr	r3, [pc, #264]	; (800462c <HAL_RCC_OscConfig+0x3f0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800452a:	d042      	beq.n	80045b2 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452c:	f7fe fa44 	bl	80029b8 <HAL_GetTick>
 8004530:	1b00      	subs	r0, r0, r4
 8004532:	2802      	cmp	r0, #2
 8004534:	d9f5      	bls.n	8004522 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004536:	2003      	movs	r0, #3
 8004538:	e069      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800453a:	4a3c      	ldr	r2, [pc, #240]	; (800462c <HAL_RCC_OscConfig+0x3f0>)
 800453c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800453e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004542:	6413      	str	r3, [r2, #64]	; 0x40
 8004544:	e7db      	b.n	80044fe <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8004546:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCC_OscConfig+0x3f4>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800454c:	f7fe fa34 	bl	80029b8 <HAL_GetTick>
 8004550:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <HAL_RCC_OscConfig+0x3f0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800455a:	d006      	beq.n	800456a <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fe fa2c 	bl	80029b8 <HAL_GetTick>
 8004560:	1b40      	subs	r0, r0, r5
 8004562:	2802      	cmp	r0, #2
 8004564:	d9f5      	bls.n	8004552 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8004566:	2003      	movs	r0, #3
 8004568:	e051      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800456a:	69e3      	ldr	r3, [r4, #28]
 800456c:	6a22      	ldr	r2, [r4, #32]
 800456e:	4313      	orrs	r3, r2
 8004570:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004572:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004576:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004578:	0852      	lsrs	r2, r2, #1
 800457a:	3a01      	subs	r2, #1
 800457c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004582:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004586:	4a29      	ldr	r2, [pc, #164]	; (800462c <HAL_RCC_OscConfig+0x3f0>)
 8004588:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800458a:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RCC_OscConfig+0x3f4>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004590:	f7fe fa12 	bl	80029b8 <HAL_GetTick>
 8004594:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004596:	4b25      	ldr	r3, [pc, #148]	; (800462c <HAL_RCC_OscConfig+0x3f0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800459e:	d106      	bne.n	80045ae <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fe fa0a 	bl	80029b8 <HAL_GetTick>
 80045a4:	1b00      	subs	r0, r0, r4
 80045a6:	2802      	cmp	r0, #2
 80045a8:	d9f5      	bls.n	8004596 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80045aa:	2003      	movs	r0, #3
 80045ac:	e02f      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80045ae:	2000      	movs	r0, #0
 80045b0:	e02d      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e02b      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d02b      	beq.n	8004612 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 80045ba:	4b1c      	ldr	r3, [pc, #112]	; (800462c <HAL_RCC_OscConfig+0x3f0>)
 80045bc:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80045c2:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c4:	4291      	cmp	r1, r2
 80045c6:	d126      	bne.n	8004616 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045cc:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ce:	428a      	cmp	r2, r1
 80045d0:	d123      	bne.n	800461a <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80045d8:	401a      	ands	r2, r3
 80045da:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80045de:	d11e      	bne.n	800461e <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80045e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80045e6:	0852      	lsrs	r2, r2, #1
 80045e8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ea:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80045ee:	d118      	bne.n	8004622 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045f0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80045f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80045fa:	d114      	bne.n	8004626 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80045fc:	2000      	movs	r0, #0
 80045fe:	e006      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8004600:	2001      	movs	r0, #1
}
 8004602:	4770      	bx	lr
        return HAL_ERROR;
 8004604:	2001      	movs	r0, #1
 8004606:	e002      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8004608:	2001      	movs	r0, #1
 800460a:	e000      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 800460c:	2000      	movs	r0, #0
}
 800460e:	b002      	add	sp, #8
 8004610:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004612:	2001      	movs	r0, #1
 8004614:	e7fb      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8004616:	2001      	movs	r0, #1
 8004618:	e7f9      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
 800461a:	2001      	movs	r0, #1
 800461c:	e7f7      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
 800461e:	2001      	movs	r0, #1
 8004620:	e7f5      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
 8004622:	2001      	movs	r0, #1
 8004624:	e7f3      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
 8004626:	2001      	movs	r0, #1
 8004628:	e7f1      	b.n	800460e <HAL_RCC_OscConfig+0x3d2>
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	42470060 	.word	0x42470060

08004634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004636:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b04      	cmp	r3, #4
 8004640:	d053      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0xb6>
 8004642:	2b08      	cmp	r3, #8
 8004644:	d153      	bne.n	80046ee <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004646:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004654:	d028      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004656:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800465e:	0158      	lsls	r0, r3, #5
 8004660:	2100      	movs	r1, #0
 8004662:	1ac0      	subs	r0, r0, r3
 8004664:	f161 0100 	sbc.w	r1, r1, #0
 8004668:	018e      	lsls	r6, r1, #6
 800466a:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 800466e:	0187      	lsls	r7, r0, #6
 8004670:	1a3c      	subs	r4, r7, r0
 8004672:	eb66 0501 	sbc.w	r5, r6, r1
 8004676:	00e9      	lsls	r1, r5, #3
 8004678:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 800467c:	00e0      	lsls	r0, r4, #3
 800467e:	18c0      	adds	r0, r0, r3
 8004680:	f141 0100 	adc.w	r1, r1, #0
 8004684:	024b      	lsls	r3, r1, #9
 8004686:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800468a:	0244      	lsls	r4, r0, #9
 800468c:	4620      	mov	r0, r4
 800468e:	4619      	mov	r1, r3
 8004690:	2300      	movs	r3, #0
 8004692:	f7fc fa99 	bl	8000bc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004696:	4b17      	ldr	r3, [pc, #92]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800469e:	3301      	adds	r3, #1
 80046a0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80046a2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80046a6:	e023      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80046b0:	015c      	lsls	r4, r3, #5
 80046b2:	2500      	movs	r5, #0
 80046b4:	1ae4      	subs	r4, r4, r3
 80046b6:	f165 0500 	sbc.w	r5, r5, #0
 80046ba:	01ae      	lsls	r6, r5, #6
 80046bc:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80046c0:	01a7      	lsls	r7, r4, #6
 80046c2:	1b38      	subs	r0, r7, r4
 80046c4:	eb66 0105 	sbc.w	r1, r6, r5
 80046c8:	00cc      	lsls	r4, r1, #3
 80046ca:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80046ce:	00c5      	lsls	r5, r0, #3
 80046d0:	18e8      	adds	r0, r5, r3
 80046d2:	f144 0100 	adc.w	r1, r4, #0
 80046d6:	028b      	lsls	r3, r1, #10
 80046d8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80046dc:	0284      	lsls	r4, r0, #10
 80046de:	4620      	mov	r0, r4
 80046e0:	4619      	mov	r1, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	f7fc fa70 	bl	8000bc8 <__aeabi_uldivmod>
 80046e8:	e7d5      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 80046ea:	4803      	ldr	r0, [pc, #12]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046ec:	e000      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ee:	4803      	ldr	r0, [pc, #12]	; (80046fc <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80046f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800
 80046f8:	007a1200 	.word	0x007a1200
 80046fc:	00f42400 	.word	0x00f42400

08004700 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004700:	2800      	cmp	r0, #0
 8004702:	f000 809b 	beq.w	800483c <HAL_RCC_ClockConfig+0x13c>
{
 8004706:	b570      	push	{r4, r5, r6, lr}
 8004708:	460d      	mov	r5, r1
 800470a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800470c:	4b4f      	ldr	r3, [pc, #316]	; (800484c <HAL_RCC_ClockConfig+0x14c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	428b      	cmp	r3, r1
 8004716:	d208      	bcs.n	800472a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004718:	b2cb      	uxtb	r3, r1
 800471a:	4a4c      	ldr	r2, [pc, #304]	; (800484c <HAL_RCC_ClockConfig+0x14c>)
 800471c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	6813      	ldr	r3, [r2, #0]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	428b      	cmp	r3, r1
 8004726:	f040 808b 	bne.w	8004840 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	f013 0f02 	tst.w	r3, #2
 8004730:	d017      	beq.n	8004762 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004732:	f013 0f04 	tst.w	r3, #4
 8004736:	d004      	beq.n	8004742 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004738:	4a45      	ldr	r2, [pc, #276]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 800473a:	6893      	ldr	r3, [r2, #8]
 800473c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004740:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	f013 0f08 	tst.w	r3, #8
 8004748:	d004      	beq.n	8004754 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800474a:	4a41      	ldr	r2, [pc, #260]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 800474c:	6893      	ldr	r3, [r2, #8]
 800474e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004752:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4a3e      	ldr	r2, [pc, #248]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 8004756:	6893      	ldr	r3, [r2, #8]
 8004758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475c:	68a1      	ldr	r1, [r4, #8]
 800475e:	430b      	orrs	r3, r1
 8004760:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	f013 0f01 	tst.w	r3, #1
 8004768:	d032      	beq.n	80047d0 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476a:	6863      	ldr	r3, [r4, #4]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d021      	beq.n	80047b4 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004770:	1e9a      	subs	r2, r3, #2
 8004772:	2a01      	cmp	r2, #1
 8004774:	d925      	bls.n	80047c2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004776:	4a36      	ldr	r2, [pc, #216]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	f012 0f02 	tst.w	r2, #2
 800477e:	d061      	beq.n	8004844 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004780:	4933      	ldr	r1, [pc, #204]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 8004782:	688a      	ldr	r2, [r1, #8]
 8004784:	f022 0203 	bic.w	r2, r2, #3
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800478c:	f7fe f914 	bl	80029b8 <HAL_GetTick>
 8004790:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	6862      	ldr	r2, [r4, #4]
 800479c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a2:	f7fe f909 	bl	80029b8 <HAL_GetTick>
 80047a6:	1b80      	subs	r0, r0, r6
 80047a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80047ac:	4298      	cmp	r0, r3
 80047ae:	d9f0      	bls.n	8004792 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80047b0:	2003      	movs	r0, #3
 80047b2:	e042      	b.n	800483a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b4:	4a26      	ldr	r2, [pc, #152]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80047bc:	d1e0      	bne.n	8004780 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80047be:	2001      	movs	r0, #1
 80047c0:	e03b      	b.n	800483a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	4a23      	ldr	r2, [pc, #140]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80047ca:	d1d9      	bne.n	8004780 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80047cc:	2001      	movs	r0, #1
 80047ce:	e034      	b.n	800483a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b1e      	ldr	r3, [pc, #120]	; (800484c <HAL_RCC_ClockConfig+0x14c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	42ab      	cmp	r3, r5
 80047da:	d907      	bls.n	80047ec <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047dc:	b2ea      	uxtb	r2, r5
 80047de:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_ClockConfig+0x14c>)
 80047e0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	42ab      	cmp	r3, r5
 80047ea:	d12d      	bne.n	8004848 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	f013 0f04 	tst.w	r3, #4
 80047f2:	d006      	beq.n	8004802 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f4:	4a16      	ldr	r2, [pc, #88]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 80047f6:	6893      	ldr	r3, [r2, #8]
 80047f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80047fc:	68e1      	ldr	r1, [r4, #12]
 80047fe:	430b      	orrs	r3, r1
 8004800:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	f013 0f08 	tst.w	r3, #8
 8004808:	d007      	beq.n	800481a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800480a:	4a11      	ldr	r2, [pc, #68]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 800480c:	6893      	ldr	r3, [r2, #8]
 800480e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004812:	6921      	ldr	r1, [r4, #16]
 8004814:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004818:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800481a:	f7ff ff0b 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <HAL_RCC_ClockConfig+0x150>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004826:	4a0b      	ldr	r2, [pc, #44]	; (8004854 <HAL_RCC_ClockConfig+0x154>)
 8004828:	5cd3      	ldrb	r3, [r2, r3]
 800482a:	40d8      	lsrs	r0, r3
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x158>)
 800482e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <HAL_RCC_ClockConfig+0x15c>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	f002 fbae 	bl	8006f94 <HAL_InitTick>
  return HAL_OK;
 8004838:	2000      	movs	r0, #0
}
 800483a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800483c:	2001      	movs	r0, #1
}
 800483e:	4770      	bx	lr
      return HAL_ERROR;
 8004840:	2001      	movs	r0, #1
 8004842:	e7fa      	b.n	800483a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8004844:	2001      	movs	r0, #1
 8004846:	e7f8      	b.n	800483a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8004848:	2001      	movs	r0, #1
 800484a:	e7f6      	b.n	800483a <HAL_RCC_ClockConfig+0x13a>
 800484c:	40023c00 	.word	0x40023c00
 8004850:	40023800 	.word	0x40023800
 8004854:	081883a4 	.word	0x081883a4
 8004858:	20000bbc 	.word	0x20000bbc
 800485c:	200000d0 	.word	0x200000d0

08004860 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004860:	4b01      	ldr	r3, [pc, #4]	; (8004868 <HAL_RCC_GetHCLKFreq+0x8>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000bbc 	.word	0x20000bbc

0800486c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800486c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800486e:	f7ff fff7 	bl	8004860 <HAL_RCC_GetHCLKFreq>
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800487a:	4a03      	ldr	r2, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800487c:	5cd3      	ldrb	r3, [r2, r3]
}
 800487e:	40d8      	lsrs	r0, r3
 8004880:	bd08      	pop	{r3, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	081883b4 	.word	0x081883b4

0800488c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800488c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800488e:	f7ff ffe7 	bl	8004860 <HAL_RCC_GetHCLKFreq>
 8004892:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800489a:	4a03      	ldr	r2, [pc, #12]	; (80048a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800489c:	5cd3      	ldrb	r3, [r2, r3]
}
 800489e:	40d8      	lsrs	r0, r3
 80048a0:	bd08      	pop	{r3, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800
 80048a8:	081883b4 	.word	0x081883b4

080048ac <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048ac:	230f      	movs	r3, #15
 80048ae:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_GetClockConfig+0x34>)
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	f002 0203 	and.w	r2, r2, #3
 80048b8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80048c0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80048c8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	08db      	lsrs	r3, r3, #3
 80048ce:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80048d2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <HAL_RCC_GetClockConfig+0x38>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	600b      	str	r3, [r1, #0]
}
 80048de:	4770      	bx	lr
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40023c00 	.word	0x40023c00

080048e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e8:	b530      	push	{r4, r5, lr}
 80048ea:	b083      	sub	sp, #12
 80048ec:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048ee:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048f0:	f013 0f43 	tst.w	r3, #67	; 0x43
 80048f4:	d114      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x38>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	f013 0f0c 	tst.w	r3, #12
 80048fc:	d169      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	f013 0f20 	tst.w	r3, #32
 8004904:	f040 80be 	bne.w	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	f013 0f10 	tst.w	r3, #16
 800490e:	f000 8120 	beq.w	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004912:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8004916:	4b90      	ldr	r3, [pc, #576]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004918:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800491a:	2000      	movs	r0, #0
}
 800491c:	b003      	add	sp, #12
 800491e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8004920:	4b8e      	ldr	r3, [pc, #568]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004926:	f7fe f847 	bl	80029b8 <HAL_GetTick>
 800492a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800492c:	4b8c      	ldr	r3, [pc, #560]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004934:	d006      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004936:	f7fe f83f 	bl	80029b8 <HAL_GetTick>
 800493a:	1b43      	subs	r3, r0, r5
 800493c:	2b02      	cmp	r3, #2
 800493e:	d9f5      	bls.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x44>
        return HAL_TIMEOUT;
 8004940:	2003      	movs	r0, #3
 8004942:	e7eb      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	f013 0f01 	tst.w	r3, #1
 800494a:	d007      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800494c:	6862      	ldr	r2, [r4, #4]
 800494e:	68a3      	ldr	r3, [r4, #8]
 8004950:	071b      	lsls	r3, r3, #28
 8004952:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004956:	4a82      	ldr	r2, [pc, #520]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004958:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	f013 0f02 	tst.w	r3, #2
 8004962:	d015      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004964:	4a7e      	ldr	r2, [pc, #504]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004966:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800496a:	6860      	ldr	r0, [r4, #4]
 800496c:	68e3      	ldr	r3, [r4, #12]
 800496e:	061b      	lsls	r3, r3, #24
 8004970:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004974:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004978:	430b      	orrs	r3, r1
 800497a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800497e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004982:	f023 031f 	bic.w	r3, r3, #31
 8004986:	69e1      	ldr	r1, [r4, #28]
 8004988:	3901      	subs	r1, #1
 800498a:	430b      	orrs	r3, r1
 800498c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004996:	d00a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004998:	6862      	ldr	r2, [r4, #4]
 800499a:	68e3      	ldr	r3, [r4, #12]
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80049a2:	68a2      	ldr	r2, [r4, #8]
 80049a4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80049a8:	4a6d      	ldr	r2, [pc, #436]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80049aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80049ae:	4b6b      	ldr	r3, [pc, #428]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80049b4:	f7fe f800 	bl	80029b8 <HAL_GetTick>
 80049b8:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ba:	4b69      	ldr	r3, [pc, #420]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80049c2:	d198      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049c4:	f7fd fff8 	bl	80029b8 <HAL_GetTick>
 80049c8:	1b40      	subs	r0, r0, r5
 80049ca:	2802      	cmp	r0, #2
 80049cc:	d9f5      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
        return HAL_TIMEOUT;
 80049ce:	2003      	movs	r0, #3
 80049d0:	e7a4      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLSAI_DISABLE();
 80049d2:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80049d8:	f7fd ffee 	bl	80029b8 <HAL_GetTick>
 80049dc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049de:	4b60      	ldr	r3, [pc, #384]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80049e6:	d006      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049e8:	f7fd ffe6 	bl	80029b8 <HAL_GetTick>
 80049ec:	1b43      	subs	r3, r0, r5
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d9f5      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xf6>
        return HAL_TIMEOUT;
 80049f2:	2003      	movs	r0, #3
 80049f4:	e792      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	f013 0f04 	tst.w	r3, #4
 80049fc:	d016      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x144>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049fe:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004a00:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a04:	6920      	ldr	r0, [r4, #16]
 8004a06:	6963      	ldr	r3, [r4, #20]
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004a0e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004a12:	430b      	orrs	r3, r1
 8004a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a18:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004a1c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004a20:	6a21      	ldr	r1, [r4, #32]
 8004a22:	3901      	subs	r1, #1
 8004a24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004a28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	f013 0f08 	tst.w	r3, #8
 8004a32:	d014      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a34:	4a4a      	ldr	r2, [pc, #296]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004a36:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a3a:	6921      	ldr	r1, [r4, #16]
 8004a3c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004a40:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004a44:	69a1      	ldr	r1, [r4, #24]
 8004a46:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004a4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a4e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004a52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004a64:	f7fd ffa8 	bl	80029b8 <HAL_GetTick>
 8004a68:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a6a:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004a72:	f47f af44 	bne.w	80048fe <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a76:	f7fd ff9f 	bl	80029b8 <HAL_GetTick>
 8004a7a:	1b40      	subs	r0, r0, r5
 8004a7c:	2802      	cmp	r0, #2
 8004a7e:	d9f4      	bls.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x182>
        return HAL_TIMEOUT;
 8004a80:	2003      	movs	r0, #3
 8004a82:	e74b      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a84:	2300      	movs	r3, #0
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004a9c:	4a32      	ldr	r2, [pc, #200]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a9e:	6813      	ldr	r3, [r2, #0]
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004aa6:	f7fd ff87 	bl	80029b8 <HAL_GetTick>
 8004aaa:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004aac:	4b2e      	ldr	r3, [pc, #184]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ab6:	f7fd ff7f 	bl	80029b8 <HAL_GetTick>
 8004aba:	1b40      	subs	r0, r0, r5
 8004abc:	2802      	cmp	r0, #2
 8004abe:	d9f5      	bls.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        return HAL_TIMEOUT;
 8004ac0:	2003      	movs	r0, #3
 8004ac2:	e72b      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x34>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ac4:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ac8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004acc:	d012      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004ace:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ad0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d00d      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ad8:	4b21      	ldr	r3, [pc, #132]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004ada:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004adc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ae0:	4922      	ldr	r1, [pc, #136]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8004aea:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	f013 0f01 	tst.w	r3, #1
 8004af2:	d112      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004af6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004afa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004afe:	d01d      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004b00:	4a17      	ldr	r2, [pc, #92]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004b02:	6893      	ldr	r3, [r2, #8]
 8004b04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b08:	6093      	str	r3, [r2, #8]
 8004b0a:	4915      	ldr	r1, [pc, #84]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004b0c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004b0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004b10:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004b14:	4313      	orrs	r3, r2
 8004b16:	670b      	str	r3, [r1, #112]	; 0x70
 8004b18:	e6f6      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8004b1a:	f7fd ff4d 	bl	80029b8 <HAL_GetTick>
 8004b1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	f013 0f02 	tst.w	r3, #2
 8004b28:	d1e4      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fd ff45 	bl	80029b8 <HAL_GetTick>
 8004b2e:	1b40      	subs	r0, r0, r5
 8004b30:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b34:	4298      	cmp	r0, r3
 8004b36:	d9f3      	bls.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
            return HAL_TIMEOUT;
 8004b38:	2003      	movs	r0, #3
 8004b3a:	e6ef      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b3c:	4908      	ldr	r1, [pc, #32]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004b3e:	688a      	ldr	r2, [r1, #8]
 8004b40:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004b44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]
 8004b50:	e7db      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x222>
  return HAL_OK;
 8004b52:	2000      	movs	r0, #0
 8004b54:	e6e2      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004b56:	bf00      	nop
 8004b58:	424711e0 	.word	0x424711e0
 8004b5c:	42470068 	.word	0x42470068
 8004b60:	40023800 	.word	0x40023800
 8004b64:	42470070 	.word	0x42470070
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	42470e40 	.word	0x42470e40

08004b70 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004b70:	b1e0      	cbz	r0, 8004bac <HAL_SDRAM_Init+0x3c>
{   
 8004b72:	b538      	push	{r3, r4, r5, lr}
 8004b74:	460d      	mov	r5, r1
 8004b76:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004b78:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004b7c:	b18b      	cbz	r3, 8004ba2 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004b84:	4621      	mov	r1, r4
 8004b86:	f851 0b04 	ldr.w	r0, [r1], #4
 8004b8a:	f001 f846 	bl	8005c1a <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004b8e:	6862      	ldr	r2, [r4, #4]
 8004b90:	4629      	mov	r1, r5
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	f001 f87d 	bl	8005c92 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8004b9e:	2000      	movs	r0, #0
}
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004ba2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004ba6:	f001 fa83 	bl	80060b0 <HAL_SDRAM_MspInit>
 8004baa:	e7e8      	b.n	8004b7e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8004bac:	2001      	movs	r0, #1
}
 8004bae:	4770      	bx	lr

08004bb0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004bb4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004bb8:	b2c0      	uxtb	r0, r0
 8004bba:	2802      	cmp	r0, #2
 8004bbc:	d00d      	beq.n	8004bda <HAL_SDRAM_SendCommand+0x2a>
 8004bbe:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004bc6:	6820      	ldr	r0, [r4, #0]
 8004bc8:	f001 f8ae 	bl	8005d28 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d004      	beq.n	8004bdc <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004bd8:	2000      	movs	r0, #0
}
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004bdc:	2305      	movs	r3, #5
 8004bde:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8004be2:	2000      	movs	r0, #0
 8004be4:	e7f9      	b.n	8004bda <HAL_SDRAM_SendCommand+0x2a>

08004be6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004be6:	b510      	push	{r4, lr}
 8004be8:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004bea:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004bee:	b2c0      	uxtb	r0, r0
 8004bf0:	2802      	cmp	r0, #2
 8004bf2:	d009      	beq.n	8004c08 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	f001 f8bc 	bl	8005d78 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8004c06:	2000      	movs	r0, #0
}
 8004c08:	bd10      	pop	{r4, pc}
	...

08004c0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	4605      	mov	r5, r0
 8004c14:	4688      	mov	r8, r1
 8004c16:	4617      	mov	r7, r2
 8004c18:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c1a:	f7fd fecd 	bl	80029b8 <HAL_GetTick>
 8004c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c20:	1a1b      	subs	r3, r3, r0
 8004c22:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8004c26:	f7fd fec7 	bl	80029b8 <HAL_GetTick>
 8004c2a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c2c:	4b2a      	ldr	r3, [pc, #168]	; (8004cd8 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004c34:	fb09 f303 	mul.w	r3, r9, r3
 8004c38:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	689c      	ldr	r4, [r3, #8]
 8004c3e:	ea38 0304 	bics.w	r3, r8, r4
 8004c42:	bf0c      	ite	eq
 8004c44:	2401      	moveq	r4, #1
 8004c46:	2400      	movne	r4, #0
 8004c48:	42bc      	cmp	r4, r7
 8004c4a:	d040      	beq.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c4c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004c50:	d0f3      	beq.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c52:	f7fd feb1 	bl	80029b8 <HAL_GetTick>
 8004c56:	eba0 000a 	sub.w	r0, r0, sl
 8004c5a:	4548      	cmp	r0, r9
 8004c5c:	d20a      	bcs.n	8004c74 <SPI_WaitFlagStateUntilTimeout+0x68>
 8004c5e:	f1b9 0f00 	cmp.w	r9, #0
 8004c62:	d007      	beq.n	8004c74 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c64:	9a01      	ldr	r2, [sp, #4]
 8004c66:	b102      	cbz	r2, 8004c6a <SPI_WaitFlagStateUntilTimeout+0x5e>
 8004c68:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8004c6a:	9b01      	ldr	r3, [sp, #4]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	4691      	mov	r9, r2
 8004c72:	e7e2      	b.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c74:	682a      	ldr	r2, [r5, #0]
 8004c76:	6853      	ldr	r3, [r2, #4]
 8004c78:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004c7c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c7e:	686b      	ldr	r3, [r5, #4]
 8004c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c84:	d00b      	beq.n	8004c9e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c86:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c8c:	d014      	beq.n	8004cb8 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004c94:	2300      	movs	r3, #0
 8004c96:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8004c9a:	2003      	movs	r0, #3
 8004c9c:	e018      	b.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c9e:	68ab      	ldr	r3, [r5, #8]
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca4:	d002      	beq.n	8004cac <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004caa:	d1ec      	bne.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004cac:	682a      	ldr	r2, [r5, #0]
 8004cae:	6813      	ldr	r3, [r2, #0]
 8004cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e7e6      	b.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004cb8:	682a      	ldr	r2, [r5, #0]
 8004cba:	6813      	ldr	r3, [r2, #0]
 8004cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	682a      	ldr	r2, [r5, #0]
 8004cc4:	6813      	ldr	r3, [r2, #0]
 8004cc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e7df      	b.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8004cce:	2000      	movs	r0, #0
}
 8004cd0:	b002      	add	sp, #8
 8004cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000bbc 	.word	0x20000bbc

08004cdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b530      	push	{r4, r5, lr}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ce2:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <SPI_EndRxTxTransaction+0x60>)
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <SPI_EndRxTxTransaction+0x64>)
 8004ce8:	fba3 3000 	umull	r3, r0, r3, r0
 8004cec:	0d40      	lsrs	r0, r0, #21
 8004cee:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004cf2:	fb05 f000 	mul.w	r0, r5, r0
 8004cf6:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf8:	6863      	ldr	r3, [r4, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfe:	d00b      	beq.n	8004d18 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	b1bb      	cbz	r3, 8004d34 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8004d04:	9b03      	ldr	r3, [sp, #12]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d12:	d1f5      	bne.n	8004d00 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8004d14:	2000      	movs	r0, #0
 8004d16:	e00e      	b.n	8004d36 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d18:	9200      	str	r2, [sp, #0]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7ff ff73 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004d26:	b130      	cbz	r0, 8004d36 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d2a:	f043 0320 	orr.w	r3, r3, #32
 8004d2e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d30:	2003      	movs	r0, #3
 8004d32:	e000      	b.n	8004d36 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004d34:	2000      	movs	r0, #0
}
 8004d36:	b005      	add	sp, #20
 8004d38:	bd30      	pop	{r4, r5, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000bbc 	.word	0x20000bbc
 8004d40:	165e9f81 	.word	0x165e9f81

08004d44 <SPI_EndRxTransaction>:
{
 8004d44:	b510      	push	{r4, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	4604      	mov	r4, r0
 8004d4a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d4c:	6841      	ldr	r1, [r0, #4]
 8004d4e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004d52:	d014      	beq.n	8004d7e <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d54:	6861      	ldr	r1, [r4, #4]
 8004d56:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004d5a:	d12a      	bne.n	8004db2 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d5c:	68a1      	ldr	r1, [r4, #8]
 8004d5e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004d62:	d019      	beq.n	8004d98 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d64:	9200      	str	r2, [sp, #0]
 8004d66:	2200      	movs	r2, #0
 8004d68:	2180      	movs	r1, #128	; 0x80
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f7ff ff4e 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004d70:	b330      	cbz	r0, 8004dc0 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d74:	f043 0320 	orr.w	r3, r3, #32
 8004d78:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d7a:	2003      	movs	r0, #3
 8004d7c:	e020      	b.n	8004dc0 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d7e:	6881      	ldr	r1, [r0, #8]
 8004d80:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004d84:	d002      	beq.n	8004d8c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d86:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004d8a:	d1e3      	bne.n	8004d54 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8004d8c:	6820      	ldr	r0, [r4, #0]
 8004d8e:	6801      	ldr	r1, [r0, #0]
 8004d90:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004d94:	6001      	str	r1, [r0, #0]
 8004d96:	e7dd      	b.n	8004d54 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d98:	9200      	str	r2, [sp, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7ff ff34 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004da4:	b160      	cbz	r0, 8004dc0 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004da8:	f043 0320 	orr.w	r3, r3, #32
 8004dac:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004dae:	2003      	movs	r0, #3
 8004db0:	e006      	b.n	8004dc0 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004db2:	9200      	str	r2, [sp, #0]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2101      	movs	r1, #1
 8004db8:	4620      	mov	r0, r4
 8004dba:	f7ff ff27 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004dbe:	b908      	cbnz	r0, 8004dc4 <SPI_EndRxTransaction+0x80>
}
 8004dc0:	b002      	add	sp, #8
 8004dc2:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004dc6:	f043 0320 	orr.w	r3, r3, #32
 8004dca:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004dcc:	2003      	movs	r0, #3
 8004dce:	e7f7      	b.n	8004dc0 <SPI_EndRxTransaction+0x7c>

08004dd0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d05a      	beq.n	8004e8a <HAL_SPI_Init+0xba>
{
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004dda:	b933      	cbnz	r3, 8004dea <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ddc:	6843      	ldr	r3, [r0, #4]
 8004dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de2:	d005      	beq.n	8004df0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61c3      	str	r3, [r0, #28]
 8004de8:	e002      	b.n	8004df0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dea:	2300      	movs	r3, #0
 8004dec:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dee:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004df4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d040      	beq.n	8004e7e <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	6813      	ldr	r3, [r2, #0]
 8004e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e0c:	6863      	ldr	r3, [r4, #4]
 8004e0e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004e12:	68a2      	ldr	r2, [r4, #8]
 8004e14:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	68e2      	ldr	r2, [r4, #12]
 8004e1c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004e20:	4313      	orrs	r3, r2
 8004e22:	6922      	ldr	r2, [r4, #16]
 8004e24:	f002 0202 	and.w	r2, r2, #2
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	6962      	ldr	r2, [r4, #20]
 8004e2c:	f002 0201 	and.w	r2, r2, #1
 8004e30:	4313      	orrs	r3, r2
 8004e32:	69a2      	ldr	r2, [r4, #24]
 8004e34:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	69e2      	ldr	r2, [r4, #28]
 8004e3c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004e40:	4313      	orrs	r3, r2
 8004e42:	6a22      	ldr	r2, [r4, #32]
 8004e44:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e4c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004e50:	6821      	ldr	r1, [r4, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e56:	8b63      	ldrh	r3, [r4, #26]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004e5e:	f002 0210 	and.w	r2, r2, #16
 8004e62:	6821      	ldr	r1, [r4, #0]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e68:	6822      	ldr	r2, [r4, #0]
 8004e6a:	69d3      	ldr	r3, [r2, #28]
 8004e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e70:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e72:	2000      	movs	r0, #0
 8004e74:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004e7c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004e7e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004e82:	4620      	mov	r0, r4
 8004e84:	f002 f81a 	bl	8006ebc <HAL_SPI_MspInit>
 8004e88:	e7b8      	b.n	8004dfc <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004e8a:	2001      	movs	r0, #1
}
 8004e8c:	4770      	bx	lr

08004e8e <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8004e8e:	b190      	cbz	r0, 8004eb6 <HAL_SPI_DeInit+0x28>
{
 8004e90:	b510      	push	{r4, lr}
 8004e92:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e94:	2302      	movs	r3, #2
 8004e96:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004e9a:	6802      	ldr	r2, [r0, #0]
 8004e9c:	6813      	ldr	r3, [r2, #0]
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea2:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004ea4:	f002 f842 	bl	8006f2c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004eac:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004eb0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 8004eb4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004eb6:	2001      	movs	r0, #1
}
 8004eb8:	4770      	bx	lr

08004eba <HAL_SPI_Transmit>:
{
 8004eba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004ec2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	f000 80cc 	beq.w	8005064 <HAL_SPI_Transmit+0x1aa>
 8004ecc:	4604      	mov	r4, r0
 8004ece:	4688      	mov	r8, r1
 8004ed0:	4691      	mov	r9, r2
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004ed8:	f7fd fd6e 	bl	80029b8 <HAL_GetTick>
 8004edc:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004ede:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8004ee2:	b2f6      	uxtb	r6, r6
 8004ee4:	2e01      	cmp	r6, #1
 8004ee6:	f040 80aa 	bne.w	800503e <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 8004eea:	f1b8 0f00 	cmp.w	r8, #0
 8004eee:	f000 80a7 	beq.w	8005040 <HAL_SPI_Transmit+0x186>
 8004ef2:	f1b9 0f00 	cmp.w	r9, #0
 8004ef6:	f000 80a3 	beq.w	8005040 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004efa:	2303      	movs	r3, #3
 8004efc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f04:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f08:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f0c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f10:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f12:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f14:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f16:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f18:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1a:	68a3      	ldr	r3, [r4, #8]
 8004f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f20:	d01e      	beq.n	8004f60 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004f2a:	d103      	bne.n	8004f34 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f32:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f34:	68e3      	ldr	r3, [r4, #12]
 8004f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3a:	d01c      	beq.n	8004f76 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	b113      	cbz	r3, 8004f46 <HAL_SPI_Transmit+0x8c>
 8004f40:	f1b9 0f01 	cmp.w	r9, #1
 8004f44:	d152      	bne.n	8004fec <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f50:	3301      	adds	r3, #1
 8004f52:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004f5e:	e045      	b.n	8004fec <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f68:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004f6a:	6822      	ldr	r2, [r4, #0]
 8004f6c:	6813      	ldr	r3, [r2, #0]
 8004f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e7d5      	b.n	8004f22 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	b113      	cbz	r3, 8004f80 <HAL_SPI_Transmit+0xc6>
 8004f7a:	f1b9 0f01 	cmp.w	r9, #1
 8004f7e:	d116      	bne.n	8004fae <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	8812      	ldrh	r2, [r2, #0]
 8004f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f8e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004f98:	e009      	b.n	8004fae <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9a:	f7fd fd0d 	bl	80029b8 <HAL_GetTick>
 8004f9e:	1bc0      	subs	r0, r0, r7
 8004fa0:	42a8      	cmp	r0, r5
 8004fa2:	d302      	bcc.n	8004faa <HAL_SPI_Transmit+0xf0>
 8004fa4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004fa8:	d154      	bne.n	8005054 <HAL_SPI_Transmit+0x19a>
 8004faa:	2d00      	cmp	r5, #0
 8004fac:	d054      	beq.n	8005058 <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 8004fae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d02e      	beq.n	8005014 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	f012 0f02 	tst.w	r2, #2
 8004fbe:	d0ec      	beq.n	8004f9a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fc2:	8812      	ldrh	r2, [r2, #0]
 8004fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fc8:	3302      	adds	r3, #2
 8004fca:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004fcc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004fd6:	e7ea      	b.n	8004fae <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fd8:	f7fd fcee 	bl	80029b8 <HAL_GetTick>
 8004fdc:	1bc0      	subs	r0, r0, r7
 8004fde:	42a8      	cmp	r0, r5
 8004fe0:	d302      	bcc.n	8004fe8 <HAL_SPI_Transmit+0x12e>
 8004fe2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004fe6:	d139      	bne.n	800505c <HAL_SPI_Transmit+0x1a2>
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	d039      	beq.n	8005060 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 8004fec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	b183      	cbz	r3, 8005014 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	f012 0f02 	tst.w	r2, #2
 8004ffa:	d0ed      	beq.n	8004fd8 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ffc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ffe:	7812      	ldrb	r2, [r2, #0]
 8005000:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005002:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005004:	3301      	adds	r3, #1
 8005006:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005008:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800500a:	b292      	uxth	r2, r2
 800500c:	3a01      	subs	r2, #1
 800500e:	b292      	uxth	r2, r2
 8005010:	86e2      	strh	r2, [r4, #54]	; 0x36
 8005012:	e7eb      	b.n	8004fec <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005014:	463a      	mov	r2, r7
 8005016:	4629      	mov	r1, r5
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff fe5f 	bl	8004cdc <SPI_EndRxTxTransaction>
 800501e:	b108      	cbz	r0, 8005024 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005020:	2320      	movs	r3, #32
 8005022:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	b933      	cbnz	r3, 8005036 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	9201      	str	r2, [sp, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005036:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005038:	b913      	cbnz	r3, 8005040 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800503a:	2600      	movs	r6, #0
 800503c:	e000      	b.n	8005040 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 800503e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005040:	2301      	movs	r3, #1
 8005042:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005046:	2300      	movs	r3, #0
 8005048:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800504c:	4630      	mov	r0, r6
 800504e:	b003      	add	sp, #12
 8005050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8005054:	2603      	movs	r6, #3
 8005056:	e7f3      	b.n	8005040 <HAL_SPI_Transmit+0x186>
 8005058:	2603      	movs	r6, #3
 800505a:	e7f1      	b.n	8005040 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 800505c:	2603      	movs	r6, #3
 800505e:	e7ef      	b.n	8005040 <HAL_SPI_Transmit+0x186>
 8005060:	2603      	movs	r6, #3
 8005062:	e7ed      	b.n	8005040 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 8005064:	2602      	movs	r6, #2
 8005066:	e7f1      	b.n	800504c <HAL_SPI_Transmit+0x192>

08005068 <HAL_SPI_TransmitReceive>:
{
 8005068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800506c:	b083      	sub	sp, #12
 800506e:	461f      	mov	r7, r3
 8005070:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8005072:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005076:	2b01      	cmp	r3, #1
 8005078:	f000 8110 	beq.w	800529c <HAL_SPI_TransmitReceive+0x234>
 800507c:	4604      	mov	r4, r0
 800507e:	4688      	mov	r8, r1
 8005080:	4691      	mov	r9, r2
 8005082:	2301      	movs	r3, #1
 8005084:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005088:	f7fd fc96 	bl	80029b8 <HAL_GetTick>
 800508c:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800508e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005092:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8005094:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005096:	2b01      	cmp	r3, #1
 8005098:	d00a      	beq.n	80050b0 <HAL_SPI_TransmitReceive+0x48>
 800509a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800509e:	f040 80e3 	bne.w	8005268 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050a2:	68a2      	ldr	r2, [r4, #8]
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	f040 80e9 	bne.w	800527c <HAL_SPI_TransmitReceive+0x214>
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	f040 80e8 	bne.w	8005280 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050b0:	f1b8 0f00 	cmp.w	r8, #0
 80050b4:	f000 80e6 	beq.w	8005284 <HAL_SPI_TransmitReceive+0x21c>
 80050b8:	f1b9 0f00 	cmp.w	r9, #0
 80050bc:	f000 80e4 	beq.w	8005288 <HAL_SPI_TransmitReceive+0x220>
 80050c0:	2f00      	cmp	r7, #0
 80050c2:	f000 80e3 	beq.w	800528c <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d002      	beq.n	80050d6 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050d0:	2305      	movs	r3, #5
 80050d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050da:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050de:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050e0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050e2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050e6:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80050e8:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80050ea:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050ec:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050f6:	d103      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050fe:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005100:	68e3      	ldr	r3, [r4, #12]
 8005102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005106:	d011      	beq.n	800512c <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005108:	6863      	ldr	r3, [r4, #4]
 800510a:	b10b      	cbz	r3, 8005110 <HAL_SPI_TransmitReceive+0xa8>
 800510c:	2f01      	cmp	r7, #1
 800510e:	d10b      	bne.n	8005128 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005110:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	7812      	ldrb	r2, [r2, #0]
 8005116:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005118:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800511a:	3301      	adds	r3, #1
 800511c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800511e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005128:	2701      	movs	r7, #1
 800512a:	e06b      	b.n	8005204 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	b10b      	cbz	r3, 8005134 <HAL_SPI_TransmitReceive+0xcc>
 8005130:	2f01      	cmp	r7, #1
 8005132:	d10b      	bne.n	800514c <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005134:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	8812      	ldrh	r2, [r2, #0]
 800513a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800513c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800513e:	3302      	adds	r3, #2
 8005140:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005142:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800514c:	2701      	movs	r7, #1
 800514e:	e01c      	b.n	800518a <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	f012 0f01 	tst.w	r2, #1
 8005158:	d00e      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x110>
 800515a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800515c:	b292      	uxth	r2, r2
 800515e:	b15a      	cbz	r2, 8005178 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005168:	3302      	adds	r3, #2
 800516a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800516c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29b      	uxth	r3, r3
 8005174:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005176:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005178:	f7fd fc1e 	bl	80029b8 <HAL_GetTick>
 800517c:	1b80      	subs	r0, r0, r6
 800517e:	42a8      	cmp	r0, r5
 8005180:	d303      	bcc.n	800518a <HAL_SPI_TransmitReceive+0x122>
 8005182:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005186:	f040 8083 	bne.w	8005290 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800518c:	b29b      	uxth	r3, r3
 800518e:	b91b      	cbnz	r3, 8005198 <HAL_SPI_TransmitReceive+0x130>
 8005190:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d053      	beq.n	8005240 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	f012 0f02 	tst.w	r2, #2
 80051a0:	d0d6      	beq.n	8005150 <HAL_SPI_TransmitReceive+0xe8>
 80051a2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80051a4:	b292      	uxth	r2, r2
 80051a6:	2a00      	cmp	r2, #0
 80051a8:	d0d2      	beq.n	8005150 <HAL_SPI_TransmitReceive+0xe8>
 80051aa:	2f00      	cmp	r7, #0
 80051ac:	d0d0      	beq.n	8005150 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051b0:	8812      	ldrh	r2, [r2, #0]
 80051b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051b6:	3302      	adds	r3, #2
 80051b8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80051ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80051c4:	2700      	movs	r7, #0
 80051c6:	e7c3      	b.n	8005150 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	f012 0f01 	tst.w	r2, #1
 80051d0:	d00e      	beq.n	80051f0 <HAL_SPI_TransmitReceive+0x188>
 80051d2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80051d4:	b292      	uxth	r2, r2
 80051d6:	b15a      	cbz	r2, 80051f0 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051e0:	3301      	adds	r3, #1
 80051e2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80051e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80051ee:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051f0:	f7fd fbe2 	bl	80029b8 <HAL_GetTick>
 80051f4:	1b83      	subs	r3, r0, r6
 80051f6:	42ab      	cmp	r3, r5
 80051f8:	d302      	bcc.n	8005200 <HAL_SPI_TransmitReceive+0x198>
 80051fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80051fe:	d149      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x22c>
 8005200:	2d00      	cmp	r5, #0
 8005202:	d049      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005204:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005206:	b29b      	uxth	r3, r3
 8005208:	b913      	cbnz	r3, 8005210 <HAL_SPI_TransmitReceive+0x1a8>
 800520a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800520c:	b29b      	uxth	r3, r3
 800520e:	b1bb      	cbz	r3, 8005240 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	f012 0f02 	tst.w	r2, #2
 8005218:	d0d6      	beq.n	80051c8 <HAL_SPI_TransmitReceive+0x160>
 800521a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800521c:	b292      	uxth	r2, r2
 800521e:	2a00      	cmp	r2, #0
 8005220:	d0d2      	beq.n	80051c8 <HAL_SPI_TransmitReceive+0x160>
 8005222:	2f00      	cmp	r7, #0
 8005224:	d0d0      	beq.n	80051c8 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005226:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800522c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800522e:	3301      	adds	r3, #1
 8005230:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005232:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29b      	uxth	r3, r3
 800523a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800523c:	2700      	movs	r7, #0
 800523e:	e7c3      	b.n	80051c8 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005240:	4632      	mov	r2, r6
 8005242:	4629      	mov	r1, r5
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff fd49 	bl	8004cdc <SPI_EndRxTxTransaction>
 800524a:	b948      	cbnz	r0, 8005260 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800524c:	68a3      	ldr	r3, [r4, #8]
 800524e:	b963      	cbnz	r3, 800526a <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	9201      	str	r2, [sp, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	9b01      	ldr	r3, [sp, #4]
 800525e:	e004      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005260:	2320      	movs	r3, #32
 8005262:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005264:	2001      	movs	r0, #1
    goto error;
 8005266:	e000      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8005268:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800526a:	2301      	movs	r3, #1
 800526c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005270:	2300      	movs	r3, #0
 8005272:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005276:	b003      	add	sp, #12
 8005278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800527c:	2002      	movs	r0, #2
 800527e:	e7f4      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
 8005280:	2002      	movs	r0, #2
 8005282:	e7f2      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8005284:	2001      	movs	r0, #1
 8005286:	e7f0      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
 8005288:	2001      	movs	r0, #1
 800528a:	e7ee      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
 800528c:	2001      	movs	r0, #1
 800528e:	e7ec      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8005290:	2003      	movs	r0, #3
 8005292:	e7ea      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8005294:	2003      	movs	r0, #3
 8005296:	e7e8      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
 8005298:	2003      	movs	r0, #3
 800529a:	e7e6      	b.n	800526a <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 800529c:	2002      	movs	r0, #2
 800529e:	e7ea      	b.n	8005276 <HAL_SPI_TransmitReceive+0x20e>

080052a0 <HAL_SPI_Receive>:
{
 80052a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052a4:	b083      	sub	sp, #12
 80052a6:	4604      	mov	r4, r0
 80052a8:	4688      	mov	r8, r1
 80052aa:	4691      	mov	r9, r2
 80052ac:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052ae:	6843      	ldr	r3, [r0, #4]
 80052b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b4:	d038      	beq.n	8005328 <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 80052b6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	f000 80a8 	beq.w	8005410 <HAL_SPI_Receive+0x170>
 80052c0:	2301      	movs	r3, #1
 80052c2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80052c6:	f7fd fb77 	bl	80029b8 <HAL_GetTick>
 80052ca:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80052cc:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80052d0:	b2f6      	uxtb	r6, r6
 80052d2:	2e01      	cmp	r6, #1
 80052d4:	f040 8089 	bne.w	80053ea <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 80052d8:	f1b8 0f00 	cmp.w	r8, #0
 80052dc:	f000 8086 	beq.w	80053ec <HAL_SPI_Receive+0x14c>
 80052e0:	f1b9 0f00 	cmp.w	r9, #0
 80052e4:	f000 8082 	beq.w	80053ec <HAL_SPI_Receive+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052e8:	2304      	movs	r3, #4
 80052ea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052f2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052f6:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052fa:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052fe:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005300:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005302:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005304:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005306:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005308:	68a3      	ldr	r3, [r4, #8]
 800530a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530e:	d018      	beq.n	8005342 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005318:	d103      	bne.n	8005322 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005320:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005322:	68e3      	ldr	r3, [r4, #12]
 8005324:	b313      	cbz	r3, 800536c <HAL_SPI_Receive+0xcc>
 8005326:	e040      	b.n	80053aa <HAL_SPI_Receive+0x10a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005328:	6883      	ldr	r3, [r0, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1c3      	bne.n	80052b6 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800532e:	2304      	movs	r3, #4
 8005330:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005334:	9500      	str	r5, [sp, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	460a      	mov	r2, r1
 800533a:	f7ff fe95 	bl	8005068 <HAL_SPI_TransmitReceive>
 800533e:	4606      	mov	r6, r0
 8005340:	e05a      	b.n	80053f8 <HAL_SPI_Receive+0x158>
    __HAL_SPI_DISABLE(hspi);
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	6813      	ldr	r3, [r2, #0]
 8005346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800534c:	6822      	ldr	r2, [r4, #0]
 800534e:	6813      	ldr	r3, [r2, #0]
 8005350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e7db      	b.n	8005310 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005358:	f7fd fb2e 	bl	80029b8 <HAL_GetTick>
 800535c:	1bc0      	subs	r0, r0, r7
 800535e:	42a8      	cmp	r0, r5
 8005360:	d302      	bcc.n	8005368 <HAL_SPI_Receive+0xc8>
 8005362:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005366:	d14b      	bne.n	8005400 <HAL_SPI_Receive+0x160>
 8005368:	2d00      	cmp	r5, #0
 800536a:	d04b      	beq.n	8005404 <HAL_SPI_Receive+0x164>
    while (hspi->RxXferCount > 0U)
 800536c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02e      	beq.n	80053d2 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	f012 0f01 	tst.w	r2, #1
 800537c:	d0ec      	beq.n	8005358 <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800537e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005380:	7b1b      	ldrb	r3, [r3, #12]
 8005382:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005386:	3301      	adds	r3, #1
 8005388:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800538a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29b      	uxth	r3, r3
 8005392:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005394:	e7ea      	b.n	800536c <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005396:	f7fd fb0f 	bl	80029b8 <HAL_GetTick>
 800539a:	1bc0      	subs	r0, r0, r7
 800539c:	42a8      	cmp	r0, r5
 800539e:	d302      	bcc.n	80053a6 <HAL_SPI_Receive+0x106>
 80053a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80053a4:	d130      	bne.n	8005408 <HAL_SPI_Receive+0x168>
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	d030      	beq.n	800540c <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 80053aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	b183      	cbz	r3, 80053d2 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	f012 0f01 	tst.w	r2, #1
 80053b8:	d0ed      	beq.n	8005396 <HAL_SPI_Receive+0xf6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053c2:	3302      	adds	r3, #2
 80053c4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80053c6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80053c8:	b292      	uxth	r2, r2
 80053ca:	3a01      	subs	r2, #1
 80053cc:	b292      	uxth	r2, r2
 80053ce:	87e2      	strh	r2, [r4, #62]	; 0x3e
 80053d0:	e7eb      	b.n	80053aa <HAL_SPI_Receive+0x10a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d2:	463a      	mov	r2, r7
 80053d4:	4629      	mov	r1, r5
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7ff fcb4 	bl	8004d44 <SPI_EndRxTransaction>
 80053dc:	b108      	cbz	r0, 80053e2 <HAL_SPI_Receive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053de:	2320      	movs	r3, #32
 80053e0:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053e4:	b913      	cbnz	r3, 80053ec <HAL_SPI_Receive+0x14c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053e6:	2600      	movs	r6, #0
 80053e8:	e000      	b.n	80053ec <HAL_SPI_Receive+0x14c>
    errorcode = HAL_BUSY;
 80053ea:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053f2:	2300      	movs	r3, #0
 80053f4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80053f8:	4630      	mov	r0, r6
 80053fa:	b003      	add	sp, #12
 80053fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8005400:	2603      	movs	r6, #3
 8005402:	e7f3      	b.n	80053ec <HAL_SPI_Receive+0x14c>
 8005404:	2603      	movs	r6, #3
 8005406:	e7f1      	b.n	80053ec <HAL_SPI_Receive+0x14c>
          errorcode = HAL_TIMEOUT;
 8005408:	2603      	movs	r6, #3
 800540a:	e7ef      	b.n	80053ec <HAL_SPI_Receive+0x14c>
 800540c:	2603      	movs	r6, #3
 800540e:	e7ed      	b.n	80053ec <HAL_SPI_Receive+0x14c>
  __HAL_LOCK(hspi);
 8005410:	2602      	movs	r6, #2
 8005412:	e7f1      	b.n	80053f8 <HAL_SPI_Receive+0x158>

08005414 <HAL_SPI_GetState>:
  return hspi->State;
 8005414:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8005418:	4770      	bx	lr

0800541a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541a:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800541c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541e:	6a05      	ldr	r5, [r0, #32]
 8005420:	f025 0501 	bic.w	r5, r5, #1
 8005424:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005426:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005428:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800542c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005430:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005434:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005436:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8005438:	6203      	str	r3, [r0, #32]
}
 800543a:	bc30      	pop	{r4, r5}
 800543c:	4770      	bx	lr

0800543e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543e:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005440:	6a05      	ldr	r5, [r0, #32]
 8005442:	f025 0510 	bic.w	r5, r5, #16
 8005446:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005448:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800544a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800544c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005450:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005458:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800545c:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 800545e:	6203      	str	r3, [r0, #32]
}
 8005460:	bc30      	pop	{r4, r5}
 8005462:	4770      	bx	lr

08005464 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005464:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800546a:	430b      	orrs	r3, r1
 800546c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005470:	6083      	str	r3, [r0, #8]
}
 8005472:	4770      	bx	lr

08005474 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005474:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	d137      	bne.n	80054ee <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 800547e:	2302      	movs	r3, #2
 8005480:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005484:	6802      	ldr	r2, [r0, #0]
 8005486:	68d3      	ldr	r3, [r2, #12]
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548e:	6803      	ldr	r3, [r0, #0]
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <HAL_TIM_Base_Start_IT+0x84>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d020      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x64>
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549a:	d01d      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x64>
 800549c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d019      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x64>
 80054a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d015      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x64>
 80054ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d011      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x64>
 80054b4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00d      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x64>
 80054bc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x64>
 80054c4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d005      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80054d4:	2000      	movs	r0, #0
 80054d6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054de:	2a06      	cmp	r2, #6
 80054e0:	d007      	beq.n	80054f2 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	f042 0201 	orr.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80054ea:	2000      	movs	r0, #0
 80054ec:	4770      	bx	lr
    return HAL_ERROR;
 80054ee:	2001      	movs	r0, #1
 80054f0:	4770      	bx	lr
  return HAL_OK;
 80054f2:	2000      	movs	r0, #0
}
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000

080054fc <HAL_TIM_OC_DelayElapsedCallback>:
}
 80054fc:	4770      	bx	lr

080054fe <HAL_TIM_IC_CaptureCallback>:
}
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005500:	4770      	bx	lr

08005502 <HAL_TIM_TriggerCallback>:
}
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_IRQHandler>:
{
 8005504:	b510      	push	{r4, lr}
 8005506:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005508:	6803      	ldr	r3, [r0, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	f012 0f02 	tst.w	r2, #2
 8005510:	d011      	beq.n	8005536 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	f012 0f02 	tst.w	r2, #2
 8005518:	d00d      	beq.n	8005536 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800551a:	f06f 0202 	mvn.w	r2, #2
 800551e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005520:	2301      	movs	r3, #1
 8005522:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005524:	6803      	ldr	r3, [r0, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f013 0f03 	tst.w	r3, #3
 800552c:	d070      	beq.n	8005610 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800552e:	f7ff ffe6 	bl	80054fe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	2300      	movs	r3, #0
 8005534:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	f012 0f04 	tst.w	r2, #4
 800553e:	d012      	beq.n	8005566 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	f012 0f04 	tst.w	r2, #4
 8005546:	d00e      	beq.n	8005566 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005548:	f06f 0204 	mvn.w	r2, #4
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800554e:	2302      	movs	r3, #2
 8005550:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f413 7f40 	tst.w	r3, #768	; 0x300
 800555a:	d05f      	beq.n	800561c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800555c:	4620      	mov	r0, r4
 800555e:	f7ff ffce 	bl	80054fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	2300      	movs	r3, #0
 8005564:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	f012 0f08 	tst.w	r2, #8
 800556e:	d012      	beq.n	8005596 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	f012 0f08 	tst.w	r2, #8
 8005576:	d00e      	beq.n	8005596 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005578:	f06f 0208 	mvn.w	r2, #8
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800557e:	2304      	movs	r3, #4
 8005580:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f013 0f03 	tst.w	r3, #3
 800558a:	d04e      	beq.n	800562a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800558c:	4620      	mov	r0, r4
 800558e:	f7ff ffb6 	bl	80054fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	2300      	movs	r3, #0
 8005594:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	f012 0f10 	tst.w	r2, #16
 800559e:	d012      	beq.n	80055c6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	f012 0f10 	tst.w	r2, #16
 80055a6:	d00e      	beq.n	80055c6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055a8:	f06f 0210 	mvn.w	r2, #16
 80055ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ae:	2308      	movs	r3, #8
 80055b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80055ba:	d03d      	beq.n	8005638 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff ff9e 	bl	80054fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	2300      	movs	r3, #0
 80055c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	f012 0f01 	tst.w	r2, #1
 80055ce:	d003      	beq.n	80055d8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	f012 0f01 	tst.w	r2, #1
 80055d6:	d136      	bne.n	8005646 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80055e0:	d003      	beq.n	80055ea <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80055e8:	d134      	bne.n	8005654 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80055f2:	d003      	beq.n	80055fc <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80055fa:	d132      	bne.n	8005662 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	f012 0f20 	tst.w	r2, #32
 8005604:	d003      	beq.n	800560e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	f012 0f20 	tst.w	r2, #32
 800560c:	d130      	bne.n	8005670 <HAL_TIM_IRQHandler+0x16c>
}
 800560e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005610:	f7ff ff74 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff ff73 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
 800561a:	e78a      	b.n	8005532 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561c:	4620      	mov	r0, r4
 800561e:	f7ff ff6d 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005622:	4620      	mov	r0, r4
 8005624:	f7ff ff6c 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
 8005628:	e79b      	b.n	8005562 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	4620      	mov	r0, r4
 800562c:	f7ff ff66 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	4620      	mov	r0, r4
 8005632:	f7ff ff65 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
 8005636:	e7ac      	b.n	8005592 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005638:	4620      	mov	r0, r4
 800563a:	f7ff ff5f 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563e:	4620      	mov	r0, r4
 8005640:	f7ff ff5e 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
 8005644:	e7bd      	b.n	80055c2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005646:	f06f 0201 	mvn.w	r2, #1
 800564a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800564c:	4620      	mov	r0, r4
 800564e:	f001 fac1 	bl	8006bd4 <HAL_TIM_PeriodElapsedCallback>
 8005652:	e7c1      	b.n	80055d8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005658:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800565a:	4620      	mov	r0, r4
 800565c:	f000 f971 	bl	8005942 <HAL_TIMEx_BreakCallback>
 8005660:	e7c3      	b.n	80055ea <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005666:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005668:	4620      	mov	r0, r4
 800566a:	f7ff ff4a 	bl	8005502 <HAL_TIM_TriggerCallback>
 800566e:	e7c5      	b.n	80055fc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005670:	f06f 0220 	mvn.w	r2, #32
 8005674:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005676:	4620      	mov	r0, r4
 8005678:	f000 f962 	bl	8005940 <HAL_TIMEx_CommutCallback>
}
 800567c:	e7c7      	b.n	800560e <HAL_TIM_IRQHandler+0x10a>
	...

08005680 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005680:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005682:	4a30      	ldr	r2, [pc, #192]	; (8005744 <TIM_Base_SetConfig+0xc4>)
 8005684:	4290      	cmp	r0, r2
 8005686:	d012      	beq.n	80056ae <TIM_Base_SetConfig+0x2e>
 8005688:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800568c:	d00f      	beq.n	80056ae <TIM_Base_SetConfig+0x2e>
 800568e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005692:	4290      	cmp	r0, r2
 8005694:	d00b      	beq.n	80056ae <TIM_Base_SetConfig+0x2e>
 8005696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800569a:	4290      	cmp	r0, r2
 800569c:	d007      	beq.n	80056ae <TIM_Base_SetConfig+0x2e>
 800569e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056a2:	4290      	cmp	r0, r2
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0x2e>
 80056a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80056aa:	4290      	cmp	r0, r2
 80056ac:	d103      	bne.n	80056b6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80056b2:	684a      	ldr	r2, [r1, #4]
 80056b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b6:	4a23      	ldr	r2, [pc, #140]	; (8005744 <TIM_Base_SetConfig+0xc4>)
 80056b8:	4290      	cmp	r0, r2
 80056ba:	d02a      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 80056bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80056c0:	d027      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 80056c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80056c6:	4290      	cmp	r0, r2
 80056c8:	d023      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 80056ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056ce:	4290      	cmp	r0, r2
 80056d0:	d01f      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 80056d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056d6:	4290      	cmp	r0, r2
 80056d8:	d01b      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 80056da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80056de:	4290      	cmp	r0, r2
 80056e0:	d017      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 80056e2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80056e6:	4290      	cmp	r0, r2
 80056e8:	d013      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 80056ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056ee:	4290      	cmp	r0, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 80056f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056f6:	4290      	cmp	r0, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 80056fa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80056fe:	4290      	cmp	r0, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 8005702:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005706:	4290      	cmp	r0, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0x92>
 800570a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800570e:	4290      	cmp	r0, r2
 8005710:	d103      	bne.n	800571a <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	68ca      	ldr	r2, [r1, #12]
 8005718:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800571a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571e:	694a      	ldr	r2, [r1, #20]
 8005720:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005722:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005724:	688b      	ldr	r3, [r1, #8]
 8005726:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005728:	680b      	ldr	r3, [r1, #0]
 800572a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <TIM_Base_SetConfig+0xc4>)
 800572e:	4298      	cmp	r0, r3
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0xba>
 8005732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005736:	4298      	cmp	r0, r3
 8005738:	d101      	bne.n	800573e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800573a:	690b      	ldr	r3, [r1, #16]
 800573c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800573e:	2301      	movs	r3, #1
 8005740:	6143      	str	r3, [r0, #20]
}
 8005742:	4770      	bx	lr
 8005744:	40010000 	.word	0x40010000

08005748 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005748:	b340      	cbz	r0, 800579c <HAL_TIM_Base_Init+0x54>
{
 800574a:	b510      	push	{r4, lr}
 800574c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800574e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005752:	b1f3      	cbz	r3, 8005792 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	2302      	movs	r3, #2
 8005756:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800575a:	4621      	mov	r1, r4
 800575c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005760:	f7ff ff8e 	bl	8005680 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005764:	2301      	movs	r3, #1
 8005766:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800576e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005772:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005776:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800577e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005782:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800578a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800578e:	2000      	movs	r0, #0
}
 8005790:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005792:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005796:	f001 fce9 	bl	800716c <HAL_TIM_Base_MspInit>
 800579a:	e7db      	b.n	8005754 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800579c:	2001      	movs	r0, #1
}
 800579e:	4770      	bx	lr

080057a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057a2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057a8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80057ac:	430a      	orrs	r2, r1
 80057ae:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057b0:	6082      	str	r2, [r0, #8]
}
 80057b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80057b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d078      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0xfa>
{
 80057c0:	b510      	push	{r4, lr}
 80057c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80057c4:	2301      	movs	r3, #1
 80057c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80057ca:	2302      	movs	r3, #2
 80057cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80057d0:	6802      	ldr	r2, [r0, #0]
 80057d2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80057dc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80057de:	680b      	ldr	r3, [r1, #0]
 80057e0:	2b60      	cmp	r3, #96	; 0x60
 80057e2:	d04c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0xc6>
 80057e4:	d829      	bhi.n	800583a <HAL_TIM_ConfigClockSource+0x82>
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d054      	beq.n	8005894 <HAL_TIM_ConfigClockSource+0xdc>
 80057ea:	d90c      	bls.n	8005806 <HAL_TIM_ConfigClockSource+0x4e>
 80057ec:	2b50      	cmp	r3, #80	; 0x50
 80057ee:	d122      	bne.n	8005836 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f0:	68ca      	ldr	r2, [r1, #12]
 80057f2:	6849      	ldr	r1, [r1, #4]
 80057f4:	6800      	ldr	r0, [r0, #0]
 80057f6:	f7ff fe10 	bl	800541a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057fa:	2150      	movs	r1, #80	; 0x50
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	f7ff fe31 	bl	8005464 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2000      	movs	r0, #0
      break;
 8005804:	e005      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005806:	2b20      	cmp	r3, #32
 8005808:	d00d      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x6e>
 800580a:	d909      	bls.n	8005820 <HAL_TIM_ConfigClockSource+0x68>
 800580c:	2b30      	cmp	r3, #48	; 0x30
 800580e:	d00a      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8005810:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005812:	2301      	movs	r3, #1
 8005814:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005818:	2300      	movs	r3, #0
 800581a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800581e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8005820:	b10b      	cbz	r3, 8005826 <HAL_TIM_ConfigClockSource+0x6e>
 8005822:	2b10      	cmp	r3, #16
 8005824:	d105      	bne.n	8005832 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005826:	4619      	mov	r1, r3
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	f7ff fe1b 	bl	8005464 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2000      	movs	r0, #0
      break;
 8005830:	e7ef      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005832:	2001      	movs	r0, #1
 8005834:	e7ed      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
 8005836:	2001      	movs	r0, #1
 8005838:	e7eb      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800583a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583e:	d034      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0xf2>
 8005840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005844:	d10c      	bne.n	8005860 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005846:	68cb      	ldr	r3, [r1, #12]
 8005848:	684a      	ldr	r2, [r1, #4]
 800584a:	6889      	ldr	r1, [r1, #8]
 800584c:	6800      	ldr	r0, [r0, #0]
 800584e:	f7ff ffa7 	bl	80057a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	6893      	ldr	r3, [r2, #8]
 8005856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800585a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2000      	movs	r0, #0
      break;
 800585e:	e7d8      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005860:	2b70      	cmp	r3, #112	; 0x70
 8005862:	d124      	bne.n	80058ae <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8005864:	68cb      	ldr	r3, [r1, #12]
 8005866:	684a      	ldr	r2, [r1, #4]
 8005868:	6889      	ldr	r1, [r1, #8]
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	f7ff ff98 	bl	80057a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005878:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2000      	movs	r0, #0
      break;
 800587c:	e7c9      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800587e:	68ca      	ldr	r2, [r1, #12]
 8005880:	6849      	ldr	r1, [r1, #4]
 8005882:	6800      	ldr	r0, [r0, #0]
 8005884:	f7ff fddb 	bl	800543e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005888:	2160      	movs	r1, #96	; 0x60
 800588a:	6820      	ldr	r0, [r4, #0]
 800588c:	f7ff fdea 	bl	8005464 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005890:	2000      	movs	r0, #0
      break;
 8005892:	e7be      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005894:	68ca      	ldr	r2, [r1, #12]
 8005896:	6849      	ldr	r1, [r1, #4]
 8005898:	6800      	ldr	r0, [r0, #0]
 800589a:	f7ff fdbe 	bl	800541a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800589e:	2140      	movs	r1, #64	; 0x40
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	f7ff fddf 	bl	8005464 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80058a6:	2000      	movs	r0, #0
      break;
 80058a8:	e7b3      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80058aa:	2000      	movs	r0, #0
 80058ac:	e7b1      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80058ae:	2001      	movs	r0, #1
 80058b0:	e7af      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80058b2:	2002      	movs	r0, #2
}
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d03b      	beq.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 80058c0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80058c2:	2301      	movs	r3, #1
 80058c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	2302      	movs	r3, #2
 80058ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058ce:	6803      	ldr	r3, [r0, #0]
 80058d0:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d2:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d8:	680a      	ldr	r2, [r1, #0]
 80058da:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058de:	6803      	ldr	r3, [r0, #0]
 80058e0:	4a16      	ldr	r2, [pc, #88]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01a      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d017      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80058ec:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80058f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00f      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80058fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005900:	4293      	cmp	r3, r2
 8005902:	d00b      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005904:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005908:	4293      	cmp	r3, r2
 800590a:	d007      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800590c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005914:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005918:	4293      	cmp	r3, r2
 800591a:	d104      	bne.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005920:	684a      	ldr	r2, [r1, #4]
 8005922:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005924:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005926:	2301      	movs	r3, #1
 8005928:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800592c:	2300      	movs	r3, #0
 800592e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005932:	4618      	mov	r0, r3
}
 8005934:	bc30      	pop	{r4, r5}
 8005936:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005938:	2002      	movs	r0, #2
}
 800593a:	4770      	bx	lr
 800593c:	40010000 	.word	0x40010000

08005940 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005940:	4770      	bx	lr

08005942 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005942:	4770      	bx	lr

08005944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005948:	6802      	ldr	r2, [r0, #0]
 800594a:	6913      	ldr	r3, [r2, #16]
 800594c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005950:	68c1      	ldr	r1, [r0, #12]
 8005952:	430b      	orrs	r3, r1
 8005954:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005956:	6883      	ldr	r3, [r0, #8]
 8005958:	6902      	ldr	r2, [r0, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	6942      	ldr	r2, [r0, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	69c2      	ldr	r2, [r0, #28]
 8005962:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005964:	6801      	ldr	r1, [r0, #0]
 8005966:	68cb      	ldr	r3, [r1, #12]
 8005968:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800596c:	f023 030c 	bic.w	r3, r3, #12
 8005970:	4313      	orrs	r3, r2
 8005972:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005974:	6802      	ldr	r2, [r0, #0]
 8005976:	6953      	ldr	r3, [r2, #20]
 8005978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597c:	6981      	ldr	r1, [r0, #24]
 800597e:	430b      	orrs	r3, r1
 8005980:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005982:	6803      	ldr	r3, [r0, #0]
 8005984:	4a34      	ldr	r2, [pc, #208]	; (8005a58 <UART_SetConfig+0x114>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d006      	beq.n	8005998 <UART_SetConfig+0x54>
 800598a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800598e:	4293      	cmp	r3, r2
 8005990:	d002      	beq.n	8005998 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005992:	f7fe ff6b 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8005996:	e001      	b.n	800599c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005998:	f7fe ff78 	bl	800488c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800599c:	69e3      	ldr	r3, [r4, #28]
 800599e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a2:	d02a      	beq.n	80059fa <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059a4:	2600      	movs	r6, #0
 80059a6:	1805      	adds	r5, r0, r0
 80059a8:	eb46 0106 	adc.w	r1, r6, r6
 80059ac:	182d      	adds	r5, r5, r0
 80059ae:	eb46 0101 	adc.w	r1, r6, r1
 80059b2:	00cb      	lsls	r3, r1, #3
 80059b4:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80059b8:	00ea      	lsls	r2, r5, #3
 80059ba:	4615      	mov	r5, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	009a      	lsls	r2, r3, #2
 80059c2:	0f9b      	lsrs	r3, r3, #30
 80059c4:	1828      	adds	r0, r5, r0
 80059c6:	eb46 0101 	adc.w	r1, r6, r1
 80059ca:	f7fb f8fd 	bl	8000bc8 <__aeabi_uldivmod>
 80059ce:	4d23      	ldr	r5, [pc, #140]	; (8005a5c <UART_SetConfig+0x118>)
 80059d0:	fba5 3200 	umull	r3, r2, r5, r0
 80059d4:	0951      	lsrs	r1, r2, #5
 80059d6:	2364      	movs	r3, #100	; 0x64
 80059d8:	fb03 0311 	mls	r3, r3, r1, r0
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	3332      	adds	r3, #50	; 0x32
 80059e0:	fba5 2303 	umull	r2, r3, r5, r3
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059ea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	6821      	ldr	r1, [r4, #0]
 80059f4:	4413      	add	r3, r2
 80059f6:	608b      	str	r3, [r1, #8]
  }
}
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059fa:	2600      	movs	r6, #0
 80059fc:	1805      	adds	r5, r0, r0
 80059fe:	eb46 0106 	adc.w	r1, r6, r6
 8005a02:	182d      	adds	r5, r5, r0
 8005a04:	eb46 0101 	adc.w	r1, r6, r1
 8005a08:	00cb      	lsls	r3, r1, #3
 8005a0a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005a0e:	00ea      	lsls	r2, r5, #3
 8005a10:	4615      	mov	r5, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	6862      	ldr	r2, [r4, #4]
 8005a16:	4633      	mov	r3, r6
 8005a18:	1892      	adds	r2, r2, r2
 8005a1a:	eb46 0303 	adc.w	r3, r6, r3
 8005a1e:	1828      	adds	r0, r5, r0
 8005a20:	eb46 0101 	adc.w	r1, r6, r1
 8005a24:	f7fb f8d0 	bl	8000bc8 <__aeabi_uldivmod>
 8005a28:	4d0c      	ldr	r5, [pc, #48]	; (8005a5c <UART_SetConfig+0x118>)
 8005a2a:	fba5 3200 	umull	r3, r2, r5, r0
 8005a2e:	0951      	lsrs	r1, r2, #5
 8005a30:	2364      	movs	r3, #100	; 0x64
 8005a32:	fb03 0311 	mls	r3, r3, r1, r0
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	3332      	adds	r3, #50	; 0x32
 8005a3a:	fba5 2303 	umull	r2, r3, r5, r3
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	005a      	lsls	r2, r3, #1
 8005a42:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005a46:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	6821      	ldr	r1, [r4, #0]
 8005a50:	4413      	add	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]
 8005a54:	e7d0      	b.n	80059f8 <UART_SetConfig+0xb4>
 8005a56:	bf00      	nop
 8005a58:	40011000 	.word	0x40011000
 8005a5c:	51eb851f 	.word	0x51eb851f

08005a60 <UART_WaitOnFlagUntilTimeout>:
{
 8005a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a64:	4605      	mov	r5, r0
 8005a66:	460f      	mov	r7, r1
 8005a68:	4616      	mov	r6, r2
 8005a6a:	4699      	mov	r9, r3
 8005a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a70:	682c      	ldr	r4, [r5, #0]
 8005a72:	6824      	ldr	r4, [r4, #0]
 8005a74:	ea37 0304 	bics.w	r3, r7, r4
 8005a78:	bf0c      	ite	eq
 8005a7a:	2401      	moveq	r4, #1
 8005a7c:	2400      	movne	r4, #0
 8005a7e:	42b4      	cmp	r4, r6
 8005a80:	d12d      	bne.n	8005ade <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8005a82:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005a86:	d0f3      	beq.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a88:	f1b8 0f00 	cmp.w	r8, #0
 8005a8c:	d005      	beq.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x3a>
 8005a8e:	f7fc ff93 	bl	80029b8 <HAL_GetTick>
 8005a92:	eba0 0009 	sub.w	r0, r0, r9
 8005a96:	4540      	cmp	r0, r8
 8005a98:	d9ea      	bls.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9a:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	f102 030c 	add.w	r3, r2, #12
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	320c      	adds	r2, #12
 8005aaa:	e842 3100 	strex	r1, r3, [r2]
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	d1f3      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	f102 0314 	add.w	r3, r2, #20
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	3214      	adds	r2, #20
 8005ac2:	e842 3100 	strex	r1, r3, [r2]
 8005ac6:	2900      	cmp	r1, #0
 8005ac8:	d1f3      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 8005aca:	2320      	movs	r3, #32
 8005acc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005ada:	2003      	movs	r0, #3
 8005adc:	e000      	b.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8005ade:	2000      	movs	r0, #0
}
 8005ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005ae4 <HAL_UART_Init>:
  if (huart == NULL)
 8005ae4:	b358      	cbz	r0, 8005b3e <HAL_UART_Init+0x5a>
{
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005aea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005aee:	b30b      	cbz	r3, 8005b34 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005af0:	2324      	movs	r3, #36	; 0x24
 8005af2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	68d3      	ldr	r3, [r2, #12]
 8005afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005afe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005b00:	4620      	mov	r0, r4
 8005b02:	f7ff ff1f 	bl	8005944 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	6913      	ldr	r3, [r2, #16]
 8005b0a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005b0e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	6953      	ldr	r3, [r2, #20]
 8005b14:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005b18:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005b1a:	6822      	ldr	r2, [r4, #0]
 8005b1c:	68d3      	ldr	r3, [r2, #12]
 8005b1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b22:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b24:	2000      	movs	r0, #0
 8005b26:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b28:	2320      	movs	r3, #32
 8005b2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005b32:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005b34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005b38:	f001 fb4a 	bl	80071d0 <HAL_UART_MspInit>
 8005b3c:	e7d8      	b.n	8005af0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005b3e:	2001      	movs	r0, #1
}
 8005b40:	4770      	bx	lr

08005b42 <HAL_UART_Transmit>:
{
 8005b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d154      	bne.n	8005bfe <HAL_UART_Transmit+0xbc>
 8005b54:	4604      	mov	r4, r0
 8005b56:	460d      	mov	r5, r1
 8005b58:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005b5a:	2900      	cmp	r1, #0
 8005b5c:	d053      	beq.n	8005c06 <HAL_UART_Transmit+0xc4>
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	d053      	beq.n	8005c0a <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8005b62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d051      	beq.n	8005c0e <HAL_UART_Transmit+0xcc>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b74:	2321      	movs	r3, #33	; 0x21
 8005b76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8005b7a:	f7fc ff1d 	bl	80029b8 <HAL_GetTick>
 8005b7e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005b80:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b84:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b88:	68a3      	ldr	r3, [r4, #8]
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8e:	d005      	beq.n	8005b9c <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8005b90:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8005b94:	2300      	movs	r3, #0
 8005b96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8005b9a:	e012      	b.n	8005bc2 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	b113      	cbz	r3, 8005ba6 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8005ba0:	f04f 0800 	mov.w	r8, #0
 8005ba4:	e7f6      	b.n	8005b94 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8005ba6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005ba8:	2500      	movs	r5, #0
 8005baa:	e7f3      	b.n	8005b94 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bac:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005bb0:	6822      	ldr	r2, [r4, #0]
 8005bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8005bb8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	3a01      	subs	r2, #1
 8005bbe:	b292      	uxth	r2, r2
 8005bc0:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bc2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	b173      	cbz	r3, 8005be6 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc8:	9600      	str	r6, [sp, #0]
 8005bca:	463b      	mov	r3, r7
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7ff ff45 	bl	8005a60 <UART_WaitOnFlagUntilTimeout>
 8005bd6:	b9e0      	cbnz	r0, 8005c12 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	d0e7      	beq.n	8005bac <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bdc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005be4:	e7e8      	b.n	8005bb8 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be6:	9600      	str	r6, [sp, #0]
 8005be8:	463b      	mov	r3, r7
 8005bea:	2200      	movs	r2, #0
 8005bec:	2140      	movs	r1, #64	; 0x40
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f7ff ff36 	bl	8005a60 <UART_WaitOnFlagUntilTimeout>
 8005bf4:	b978      	cbnz	r0, 8005c16 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8005bf6:	2320      	movs	r3, #32
 8005bf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8005bfc:	e000      	b.n	8005c00 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8005bfe:	2002      	movs	r0, #2
}
 8005c00:	b002      	add	sp, #8
 8005c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005c06:	2001      	movs	r0, #1
 8005c08:	e7fa      	b.n	8005c00 <HAL_UART_Transmit+0xbe>
 8005c0a:	2001      	movs	r0, #1
 8005c0c:	e7f8      	b.n	8005c00 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8005c0e:	2002      	movs	r0, #2
 8005c10:	e7f6      	b.n	8005c00 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8005c12:	2003      	movs	r0, #3
 8005c14:	e7f4      	b.n	8005c00 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8005c16:	2003      	movs	r0, #3
 8005c18:	e7f2      	b.n	8005c00 <HAL_UART_Transmit+0xbe>

08005c1a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005c1a:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005c1c:	680b      	ldr	r3, [r1, #0]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d01a      	beq.n	8005c58 <FMC_SDRAM_Init+0x3e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005c22:	6802      	ldr	r2, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c24:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8005c28:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c2c:	684b      	ldr	r3, [r1, #4]
                                               Init->RowBitsNumber      |\
 8005c2e:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c30:	4323      	orrs	r3, r4
                                               Init->MemoryDataWidth    |\
 8005c32:	68cc      	ldr	r4, [r1, #12]
                                               Init->RowBitsNumber      |\
 8005c34:	4323      	orrs	r3, r4
                                               Init->InternalBankNumber |\
 8005c36:	690c      	ldr	r4, [r1, #16]
                                               Init->MemoryDataWidth    |\
 8005c38:	4323      	orrs	r3, r4
                                               Init->CASLatency         |\
 8005c3a:	694c      	ldr	r4, [r1, #20]
                                               Init->InternalBankNumber |\
 8005c3c:	4323      	orrs	r3, r4
                                               Init->WriteProtection    |\
 8005c3e:	698c      	ldr	r4, [r1, #24]
                                               Init->CASLatency         |\
 8005c40:	4323      	orrs	r3, r4
                                               Init->SDClockPeriod      |\
 8005c42:	69cc      	ldr	r4, [r1, #28]
                                               Init->WriteProtection    |\
 8005c44:	4323      	orrs	r3, r4
                                               Init->ReadBurst          |\
 8005c46:	6a0c      	ldr	r4, [r1, #32]
                                               Init->SDClockPeriod      |\
 8005c48:	4323      	orrs	r3, r4
                                               Init->ReadPipeDelay
 8005c4a:	6a49      	ldr	r1, [r1, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005c4c:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c4e:	4313      	orrs	r3, r2
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005c50:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8005c52:	2000      	movs	r0, #0
 8005c54:	bc30      	pop	{r4, r5}
 8005c56:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005c58:	6802      	ldr	r2, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005c5a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c5e:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8005c60:	6a0c      	ldr	r4, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c62:	431c      	orrs	r4, r3
                        Init->ReadPipeDelay);  
 8005c64:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005c66:	431c      	orrs	r4, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c68:	4314      	orrs	r4, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005c6a:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c6c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8005c70:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c74:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber      |\
 8005c76:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c78:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth    |\
 8005c7a:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber      |\
 8005c7c:	432b      	orrs	r3, r5
                       Init->InternalBankNumber |\
 8005c7e:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth    |\
 8005c80:	432b      	orrs	r3, r5
                       Init->CASLatency         |\
 8005c82:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber |\
 8005c84:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8005c86:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency         |\
 8005c88:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c8a:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005c8c:	6004      	str	r4, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005c8e:	6043      	str	r3, [r0, #4]
 8005c90:	e7df      	b.n	8005c52 <FMC_SDRAM_Init+0x38>

08005c92 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c92:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005c94:	2a01      	cmp	r2, #1
 8005c96:	d021      	beq.n	8005cdc <FMC_SDRAM_Timing_Init+0x4a>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005c98:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005c9a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005c9e:	680b      	ldr	r3, [r1, #0]
 8005ca0:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005ca2:	684c      	ldr	r4, [r1, #4]
 8005ca4:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005ca6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005caa:	688c      	ldr	r4, [r1, #8]
 8005cac:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005cae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005cb2:	68cc      	ldr	r4, [r1, #12]
 8005cb4:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005cb6:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005cba:	690c      	ldr	r4, [r1, #16]
 8005cbc:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005cc2:	694c      	ldr	r4, [r1, #20]
 8005cc4:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005cc6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8005cca:	6989      	ldr	r1, [r1, #24]
 8005ccc:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005cce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005cd2:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005cd4:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	bc30      	pop	{r4, r5}
 8005cda:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005cdc:	6884      	ldr	r4, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005cde:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 8005ce2:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005ce6:	68ca      	ldr	r2, [r1, #12]
 8005ce8:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005cea:	694b      	ldr	r3, [r1, #20]
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005cf0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8005cf4:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005cf6:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005cf8:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005cfc:	680b      	ldr	r3, [r1, #0]
 8005cfe:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005d00:	684d      	ldr	r5, [r1, #4]
 8005d02:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005d04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005d08:	688d      	ldr	r5, [r1, #8]
 8005d0a:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005d0c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005d10:	690d      	ldr	r5, [r1, #16]
 8005d12:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005d14:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005d18:	6989      	ldr	r1, [r1, #24]
 8005d1a:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005d1c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005d20:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005d22:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005d24:	60c3      	str	r3, [r0, #12]
 8005d26:	e7d6      	b.n	8005cd6 <FMC_SDRAM_Timing_Init+0x44>

08005d28 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	4615      	mov	r5, r2
  __IO uint32_t tmpr = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	9301      	str	r3, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d34:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 8005d36:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d38:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005d3a:	688a      	ldr	r2, [r1, #8]
 8005d3c:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8005d3e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9U)
 8005d42:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d44:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8005d48:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	6103      	str	r3, [r0, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005d4e:	f7fc fe33 	bl	80029b8 <HAL_GetTick>
 8005d52:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005d54:	69a3      	ldr	r3, [r4, #24]
 8005d56:	f013 0f20 	tst.w	r3, #32
 8005d5a:	d00a      	beq.n	8005d72 <FMC_SDRAM_SendCommand+0x4a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005d5c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005d60:	d0f8      	beq.n	8005d54 <FMC_SDRAM_SendCommand+0x2c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005d62:	b125      	cbz	r5, 8005d6e <FMC_SDRAM_SendCommand+0x46>
 8005d64:	f7fc fe28 	bl	80029b8 <HAL_GetTick>
 8005d68:	1b80      	subs	r0, r0, r6
 8005d6a:	42a8      	cmp	r0, r5
 8005d6c:	d9f2      	bls.n	8005d54 <FMC_SDRAM_SendCommand+0x2c>
      {
        return HAL_TIMEOUT;
 8005d6e:	2003      	movs	r0, #3
 8005d70:	e000      	b.n	8005d74 <FMC_SDRAM_SendCommand+0x4c>
      }
    }
  }

  return HAL_OK;
 8005d72:	2000      	movs	r0, #0
}
 8005d74:	b002      	add	sp, #8
 8005d76:	bd70      	pop	{r4, r5, r6, pc}

08005d78 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005d78:	6943      	ldr	r3, [r0, #20]
 8005d7a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005d7e:	6143      	str	r3, [r0, #20]
  
  return HAL_OK;   
}
 8005d80:	2000      	movs	r0, #0
 8005d82:	4770      	bx	lr

08005d84 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8005d84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 0 */
  if (fct)
 8005d86:	b129      	cbz	r1, 8005d94 <ai_log_err+0x10>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005d88:	0a03      	lsrs	r3, r0, #8
 8005d8a:	b2c2      	uxtb	r2, r0
 8005d8c:	4804      	ldr	r0, [pc, #16]	; (8005da0 <ai_log_err+0x1c>)
 8005d8e:	f004 fb57 	bl	800a440 <iprintf>
        err.type, err.code);
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);

  do {} while (1);
 8005d92:	e7fe      	b.n	8005d92 <ai_log_err+0xe>
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8005d94:	0a02      	lsrs	r2, r0, #8
 8005d96:	b2c1      	uxtb	r1, r0
 8005d98:	4802      	ldr	r0, [pc, #8]	; (8005da4 <ai_log_err+0x20>)
 8005d9a:	f004 fb51 	bl	800a440 <iprintf>
 8005d9e:	e7f8      	b.n	8005d92 <ai_log_err+0xe>
 8005da0:	081883c0 	.word	0x081883c0
 8005da4:	081883f4 	.word	0x081883f4

08005da8 <ai_boostrap>:
  /* USER CODE END 0 */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8005da8:	b530      	push	{r4, r5, lr}
 8005daa:	b08d      	sub	sp, #52	; 0x34
 8005dac:	4604      	mov	r4, r0
 8005dae:	460d      	mov	r5, r1
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8005db0:	2100      	movs	r1, #0
 8005db2:	4820      	ldr	r0, [pc, #128]	; (8005e34 <ai_boostrap+0x8c>)
 8005db4:	f000 ff72 	bl	8006c9c <ai_network_create>
  if (err.type != AI_ERROR_NONE) {
 8005db8:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005dbc:	d129      	bne.n	8005e12 <ai_boostrap+0x6a>
    ai_log_err(err, "ai_network_create");
    return -1;
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	; (8005e38 <ai_boostrap+0x90>)
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005dc8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005dcc:	f8ad 3008 	strh.w	r3, [sp, #8]
 8005dd0:	4a1a      	ldr	r2, [pc, #104]	; (8005e3c <ai_boostrap+0x94>)
 8005dd2:	9203      	str	r2, [sp, #12]
 8005dd4:	9404      	str	r4, [sp, #16]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	9205      	str	r2, [sp, #20]
 8005dda:	4919      	ldr	r1, [pc, #100]	; (8005e40 <ai_boostrap+0x98>)
 8005ddc:	9106      	str	r1, [sp, #24]
 8005dde:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005de2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005de6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005dea:	f24b 13c0 	movw	r3, #45504	; 0xb1c0
 8005dee:	9309      	str	r3, [sp, #36]	; 0x24
 8005df0:	950a      	str	r5, [sp, #40]	; 0x28
 8005df2:	920b      	str	r2, [sp, #44]	; 0x2c
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 8005df4:	4669      	mov	r1, sp
 8005df6:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <ai_boostrap+0x8c>)
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	f000 ff5f 	bl	8006cbc <ai_network_init>
 8005dfe:	b158      	cbz	r0, 8005e18 <ai_boostrap+0x70>
      ai_log_err(err, "ai_network_init");
      return -1;
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8005e00:	490c      	ldr	r1, [pc, #48]	; (8005e34 <ai_boostrap+0x8c>)
 8005e02:	f851 0b04 	ldr.w	r0, [r1], #4
 8005e06:	f000 fef3 	bl	8006bf0 <ai_network_get_info>
 8005e0a:	b160      	cbz	r0, 8005e26 <ai_boostrap+0x7e>
    network = AI_HANDLE_NULL;
    return -3;
  }

  return 0;
}
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	b00d      	add	sp, #52	; 0x34
 8005e10:	bd30      	pop	{r4, r5, pc}
    ai_log_err(err, "ai_network_create");
 8005e12:	490c      	ldr	r1, [pc, #48]	; (8005e44 <ai_boostrap+0x9c>)
 8005e14:	f7ff ffb6 	bl	8005d84 <ai_log_err>
      err = ai_network_get_error(network);
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <ai_boostrap+0x8c>)
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	f000 ff3a 	bl	8006c94 <ai_network_get_error>
      ai_log_err(err, "ai_network_init");
 8005e20:	4909      	ldr	r1, [pc, #36]	; (8005e48 <ai_boostrap+0xa0>)
 8005e22:	f7ff ffaf 	bl	8005d84 <ai_log_err>
    err = ai_network_get_error(network);
 8005e26:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <ai_boostrap+0x8c>)
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f000 ff33 	bl	8006c94 <ai_network_get_error>
    ai_log_err(err, "ai_network_get_error");
 8005e2e:	4907      	ldr	r1, [pc, #28]	; (8005e4c <ai_boostrap+0xa4>)
 8005e30:	f7ff ffa8 	bl	8005d84 <ai_log_err>
 8005e34:	20000fc8 	.word	0x20000fc8
 8005e38:	40040440 	.word	0x40040440
 8005e3c:	00177ca8 	.word	0x00177ca8
 8005e40:	00040440 	.word	0x00040440
 8005e44:	08188424 	.word	0x08188424
 8005e48:	08188438 	.word	0x08188438
 8005e4c:	08188448 	.word	0x08188448

08005e50 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8005e50:	b508      	push	{r3, lr}
    /* USER CODE BEGIN 3 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005e52:	4804      	ldr	r0, [pc, #16]	; (8005e64 <MX_X_CUBE_AI_Init+0x14>)
 8005e54:	f004 fb7a 	bl	800a54c <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 8005e58:	f001 f80c 	bl	8006e74 <ai_network_data_weights_get>
 8005e5c:	4902      	ldr	r1, [pc, #8]	; (8005e68 <MX_X_CUBE_AI_Init+0x18>)
 8005e5e:	f7ff ffa3 	bl	8005da8 <ai_boostrap>
    /* USER CODE END 3 */
}
 8005e62:	bd08      	pop	{r3, pc}
 8005e64:	08188470 	.word	0x08188470
 8005e68:	20001ca8 	.word	0x20001ca8

08005e6c <aiRun>:
}

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data) {
 8005e6c:	b510      	push	{r4, lr}
    ai_error err;

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <aiRun+0x30>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005e74:	6118      	str	r0, [r3, #16]
    ai_output[0].n_batches = 1;
 8005e76:	839a      	strh	r2, [r3, #28]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8005e78:	6299      	str	r1, [r3, #40]	; 0x28

    /* 2 - Perform the inference */
     ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005e7a:	4c09      	ldr	r4, [pc, #36]	; (8005ea0 <aiRun+0x34>)
 8005e7c:	f103 0218 	add.w	r2, r3, #24
 8005e80:	4619      	mov	r1, r3
 8005e82:	6820      	ldr	r0, [r4, #0]
 8005e84:	f000 fff2 	bl	8006e6c <ai_network_run>
     err = ai_network_get_error(network);
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	f000 ff03 	bl	8006c94 <ai_network_get_error>
    printf("ERROR : type=%d code=%d\r\n",err.type,err.code);
 8005e8e:	0a02      	lsrs	r2, r0, #8
 8005e90:	b2c1      	uxtb	r1, r0
 8005e92:	4804      	ldr	r0, [pc, #16]	; (8005ea4 <aiRun+0x38>)
 8005e94:	f004 fad4 	bl	800a440 <iprintf>

}
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	bf00      	nop
 8005e9c:	200000d4 	.word	0x200000d4
 8005ea0:	20000fc8 	.word	0x20000fc8
 8005ea4:	08188508 	.word	0x08188508

08005ea8 <MX_X_CUBE_AI_Process_2>:

// Process NN input data and output predictions
void MX_X_CUBE_AI_Process_2(ai_float * nn_input_data, ai_float *nn_output_data) {
 8005ea8:	b508      	push	{r3, lr}
     aiRun(nn_input_data, nn_output_data);
 8005eaa:	f7ff ffdf 	bl	8005e6c <aiRun>
}
 8005eae:	bd08      	pop	{r3, pc}

08005eb0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8005eb0:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005eb2:	4805      	ldr	r0, [pc, #20]	; (8005ec8 <MX_CRC_Init+0x18>)
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <MX_CRC_Init+0x1c>)
 8005eb6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005eb8:	f7fc fdec 	bl	8002a94 <HAL_CRC_Init>
 8005ebc:	b900      	cbnz	r0, 8005ec0 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005ebe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005ec0:	f000 fe94 	bl	8006bec <Error_Handler>
}
 8005ec4:	e7fb      	b.n	8005ebe <MX_CRC_Init+0xe>
 8005ec6:	bf00      	nop
 8005ec8:	2000d034 	.word	0x2000d034
 8005ecc:	40023000 	.word	0x40023000

08005ed0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8005ed0:	6802      	ldr	r2, [r0, #0]
 8005ed2:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <HAL_CRC_MspInit+0x28>)
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d000      	beq.n	8005eda <HAL_CRC_MspInit+0xa>
 8005ed8:	4770      	bx	lr
{
 8005eda:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005edc:	2300      	movs	r3, #0
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_CRC_MspInit+0x2c>)
 8005ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8005eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8005ef4:	b002      	add	sp, #8
 8005ef6:	4770      	bx	lr
 8005ef8:	40023000 	.word	0x40023000
 8005efc:	40023800 	.word	0x40023800

08005f00 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8005f00:	b508      	push	{r3, lr}
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8005f02:	480d      	ldr	r0, [pc, #52]	; (8005f38 <MX_DMA2D_Init+0x38>)
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <MX_DMA2D_Init+0x3c>)
 8005f06:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8005f0c:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8005f0e:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005f10:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8005f12:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005f14:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8005f16:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005f18:	f7fc ff14 	bl	8002d44 <HAL_DMA2D_Init>
 8005f1c:	b928      	cbnz	r0, 8005f2a <MX_DMA2D_Init+0x2a>
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8005f1e:	2101      	movs	r1, #1
 8005f20:	4805      	ldr	r0, [pc, #20]	; (8005f38 <MX_DMA2D_Init+0x38>)
 8005f22:	f7fc fff7 	bl	8002f14 <HAL_DMA2D_ConfigLayer>
 8005f26:	b918      	cbnz	r0, 8005f30 <MX_DMA2D_Init+0x30>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8005f28:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005f2a:	f000 fe5f 	bl	8006bec <Error_Handler>
 8005f2e:	e7f6      	b.n	8005f1e <MX_DMA2D_Init+0x1e>
    Error_Handler();
 8005f30:	f000 fe5c 	bl	8006bec <Error_Handler>
}
 8005f34:	e7f8      	b.n	8005f28 <MX_DMA2D_Init+0x28>
 8005f36:	bf00      	nop
 8005f38:	2000d03c 	.word	0x2000d03c
 8005f3c:	4002b000 	.word	0x4002b000

08005f40 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8005f40:	6802      	ldr	r2, [r0, #0]
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_DMA2D_MspInit+0x28>)
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d000      	beq.n	8005f4a <HAL_DMA2D_MspInit+0xa>
 8005f48:	4770      	bx	lr
{
 8005f4a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <HAL_DMA2D_MspInit+0x2c>)
 8005f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8005f64:	b002      	add	sp, #8
 8005f66:	4770      	bx	lr
 8005f68:	4002b000 	.word	0x4002b000
 8005f6c:	40023800 	.word	0x40023800

08005f70 <HAL_FMC_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8005f70:	4b2e      	ldr	r3, [pc, #184]	; (800602c <HAL_FMC_MspInit+0xbc>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	b103      	cbz	r3, 8005f78 <HAL_FMC_MspInit+0x8>
 8005f76:	4770      	bx	lr
static void HAL_FMC_MspInit(void){
 8005f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7c:	b086      	sub	sp, #24
    return;
  }
  FMC_Initialized = 1;
 8005f7e:	f04f 0801 	mov.w	r8, #1
 8005f82:	4b2a      	ldr	r3, [pc, #168]	; (800602c <HAL_FMC_MspInit+0xbc>)
 8005f84:	f8c3 8000 	str.w	r8, [r3]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f88:	2400      	movs	r4, #0
 8005f8a:	9400      	str	r4, [sp, #0]
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <HAL_FMC_MspInit+0xc0>)
 8005f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f90:	ea42 0208 	orr.w	r2, r2, r8
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	ea03 0308 	and.w	r3, r3, r8
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	9b00      	ldr	r3, [sp, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8005fa0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005fa4:	9301      	str	r3, [sp, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa6:	2702      	movs	r7, #2
 8005fa8:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005faa:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fac:	2603      	movs	r6, #3
 8005fae:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005fb0:	250c      	movs	r5, #12
 8005fb2:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005fb4:	a901      	add	r1, sp, #4
 8005fb6:	481f      	ldr	r0, [pc, #124]	; (8006034 <HAL_FMC_MspInit+0xc4>)
 8005fb8:	f7fd f80e 	bl	8002fd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8005fbc:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005fc6:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8005fc8:	a901      	add	r1, sp, #4
 8005fca:	481b      	ldr	r0, [pc, #108]	; (8006038 <HAL_FMC_MspInit+0xc8>)
 8005fcc:	f7fd f804 	bl	8002fd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8005fd0:	f248 1333 	movw	r3, #33075	; 0x8133
 8005fd4:	9301      	str	r3, [sp, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fda:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005fdc:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005fde:	a901      	add	r1, sp, #4
 8005fe0:	4816      	ldr	r0, [pc, #88]	; (800603c <HAL_FMC_MspInit+0xcc>)
 8005fe2:	f7fc fff9 	bl	8002fd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8005fe6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005fea:	9301      	str	r3, [sp, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fec:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fee:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ff2:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ff4:	a901      	add	r1, sp, #4
 8005ff6:	4812      	ldr	r0, [pc, #72]	; (8006040 <HAL_FMC_MspInit+0xd0>)
 8005ff8:	f7fc ffee 	bl	8002fd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8005ffc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006000:	9301      	str	r3, [sp, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006002:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006004:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006006:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006008:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800600a:	a901      	add	r1, sp, #4
 800600c:	480d      	ldr	r0, [pc, #52]	; (8006044 <HAL_FMC_MspInit+0xd4>)
 800600e:	f7fc ffe3 	bl	8002fd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006012:	2360      	movs	r3, #96	; 0x60
 8006014:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006016:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006018:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800601a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800601c:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800601e:	a901      	add	r1, sp, #4
 8006020:	4809      	ldr	r0, [pc, #36]	; (8006048 <HAL_FMC_MspInit+0xd8>)
 8006022:	f7fc ffd9 	bl	8002fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006026:	b006      	add	sp, #24
 8006028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602c:	2000ce68 	.word	0x2000ce68
 8006030:	40023800 	.word	0x40023800
 8006034:	40021400 	.word	0x40021400
 8006038:	40020800 	.word	0x40020800
 800603c:	40021800 	.word	0x40021800
 8006040:	40021000 	.word	0x40021000
 8006044:	40020c00 	.word	0x40020c00
 8006048:	40020400 	.word	0x40020400

0800604c <MX_FMC_Init>:
{
 800604c:	b500      	push	{lr}
 800604e:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006050:	4815      	ldr	r0, [pc, #84]	; (80060a8 <MX_FMC_Init+0x5c>)
 8006052:	4b16      	ldr	r3, [pc, #88]	; (80060ac <MX_FMC_Init+0x60>)
 8006054:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006056:	2301      	movs	r3, #1
 8006058:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800605a:	2300      	movs	r3, #0
 800605c:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800605e:	2104      	movs	r1, #4
 8006060:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006062:	2210      	movs	r2, #16
 8006064:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006066:	2240      	movs	r2, #64	; 0x40
 8006068:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800606a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800606e:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006070:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8006072:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006076:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006078:	6243      	str	r3, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800607a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800607e:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8006080:	2302      	movs	r3, #2
 8006082:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006084:	2207      	movs	r2, #7
 8006086:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8006088:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 800608a:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800608c:	2203      	movs	r2, #3
 800608e:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 8006090:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8006092:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006094:	4469      	add	r1, sp
 8006096:	f7fe fd6b 	bl	8004b70 <HAL_SDRAM_Init>
 800609a:	b910      	cbnz	r0, 80060a2 <MX_FMC_Init+0x56>
}
 800609c:	b009      	add	sp, #36	; 0x24
 800609e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 80060a2:	f000 fda3 	bl	8006bec <Error_Handler>
}
 80060a6:	e7f9      	b.n	800609c <MX_FMC_Init+0x50>
 80060a8:	2000d07c 	.word	0x2000d07c
 80060ac:	a0000140 	.word	0xa0000140

080060b0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80060b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80060b2:	f7ff ff5d 	bl	8005f70 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80060b6:	bd08      	pop	{r3, pc}

080060b8 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80060b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060bc:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060be:	2400      	movs	r4, #0
 80060c0:	9409      	str	r4, [sp, #36]	; 0x24
 80060c2:	940a      	str	r4, [sp, #40]	; 0x28
 80060c4:	940b      	str	r4, [sp, #44]	; 0x2c
 80060c6:	940c      	str	r4, [sp, #48]	; 0x30
 80060c8:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ca:	9401      	str	r4, [sp, #4]
 80060cc:	4b69      	ldr	r3, [pc, #420]	; (8006274 <MX_GPIO_Init+0x1bc>)
 80060ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d0:	f042 0204 	orr.w	r2, r2, #4
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
 80060d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d8:	f002 0204 	and.w	r2, r2, #4
 80060dc:	9201      	str	r2, [sp, #4]
 80060de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80060e0:	9402      	str	r4, [sp, #8]
 80060e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e4:	f042 0220 	orr.w	r2, r2, #32
 80060e8:	631a      	str	r2, [r3, #48]	; 0x30
 80060ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ec:	f002 0220 	and.w	r2, r2, #32
 80060f0:	9202      	str	r2, [sp, #8]
 80060f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80060f4:	9403      	str	r4, [sp, #12]
 80060f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
 80060fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006100:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006104:	9203      	str	r2, [sp, #12]
 8006106:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006108:	9404      	str	r4, [sp, #16]
 800610a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
 8006112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006114:	f002 0201 	and.w	r2, r2, #1
 8006118:	9204      	str	r2, [sp, #16]
 800611a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800611c:	9405      	str	r4, [sp, #20]
 800611e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006120:	f042 0202 	orr.w	r2, r2, #2
 8006124:	631a      	str	r2, [r3, #48]	; 0x30
 8006126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006128:	f002 0202 	and.w	r2, r2, #2
 800612c:	9205      	str	r2, [sp, #20]
 800612e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006130:	9406      	str	r4, [sp, #24]
 8006132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006138:	631a      	str	r2, [r3, #48]	; 0x30
 800613a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006140:	9206      	str	r2, [sp, #24]
 8006142:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006144:	9407      	str	r4, [sp, #28]
 8006146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006148:	f042 0210 	orr.w	r2, r2, #16
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
 800614e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006150:	f002 0210 	and.w	r2, r2, #16
 8006154:	9207      	str	r2, [sp, #28]
 8006156:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006158:	9408      	str	r4, [sp, #32]
 800615a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800615c:	f042 0208 	orr.w	r2, r2, #8
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
 8006162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	9308      	str	r3, [sp, #32]
 800616a:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800616c:	4f42      	ldr	r7, [pc, #264]	; (8006278 <MX_GPIO_Init+0x1c0>)
 800616e:	4622      	mov	r2, r4
 8006170:	2116      	movs	r1, #22
 8006172:	4638      	mov	r0, r7
 8006174:	f7fd f8d5 	bl	8003322 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8006178:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8006280 <MX_GPIO_Init+0x1c8>
 800617c:	4622      	mov	r2, r4
 800617e:	2180      	movs	r1, #128	; 0x80
 8006180:	4640      	mov	r0, r8
 8006182:	f7fd f8ce 	bl	8003322 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8006186:	4e3d      	ldr	r6, [pc, #244]	; (800627c <MX_GPIO_Init+0x1c4>)
 8006188:	4622      	mov	r2, r4
 800618a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800618e:	4630      	mov	r0, r6
 8006190:	f7fd f8c7 	bl	8003322 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8006194:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8006284 <MX_GPIO_Init+0x1cc>
 8006198:	4622      	mov	r2, r4
 800619a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800619e:	4648      	mov	r0, r9
 80061a0:	f7fd f8bf 	bl	8003322 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80061a4:	2316      	movs	r3, #22
 80061a6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061a8:	2501      	movs	r5, #1
 80061aa:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ac:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ae:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061b0:	a909      	add	r1, sp, #36	; 0x24
 80061b2:	4638      	mov	r0, r7
 80061b4:	f7fc ff10 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80061b8:	f248 0306 	movw	r3, #32774	; 0x8006
 80061bc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80061be:	f44f 1a90 	mov.w	sl, #1179648	; 0x120000
 80061c2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061c8:	a909      	add	r1, sp, #36	; 0x24
 80061ca:	4640      	mov	r0, r8
 80061cc:	f7fc ff04 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80061d0:	2380      	movs	r3, #128	; 0x80
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061d4:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061d8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80061da:	a909      	add	r1, sp, #36	; 0x24
 80061dc:	4640      	mov	r0, r8
 80061de:	f7fc fefb 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80061e2:	2320      	movs	r3, #32
 80061e4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80061e6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ea:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80061ec:	a909      	add	r1, sp, #36	; 0x24
 80061ee:	4638      	mov	r0, r7
 80061f0:	f7fc fef2 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80061f4:	2304      	movs	r3, #4
 80061f6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061f8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80061fc:	f5a7 6780 	sub.w	r7, r7, #1024	; 0x400
 8006200:	a909      	add	r1, sp, #36	; 0x24
 8006202:	4638      	mov	r0, r7
 8006204:	f7fc fee8 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8006208:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800620c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800620e:	2302      	movs	r3, #2
 8006210:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006212:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006214:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006216:	230c      	movs	r3, #12
 8006218:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800621a:	a909      	add	r1, sp, #36	; 0x24
 800621c:	4638      	mov	r0, r7
 800621e:	f7fc fedb 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8006222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006226:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006228:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800622a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800622c:	a909      	add	r1, sp, #36	; 0x24
 800622e:	4638      	mov	r0, r7
 8006230:	f7fc fed2 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8006234:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006238:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800623a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800623c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800623e:	a909      	add	r1, sp, #36	; 0x24
 8006240:	4630      	mov	r0, r6
 8006242:	f7fc fec9 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8006246:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800624a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800624c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006250:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006252:	a909      	add	r1, sp, #36	; 0x24
 8006254:	4630      	mov	r0, r6
 8006256:	f7fc febf 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800625a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800625e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006260:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006262:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006264:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006266:	a909      	add	r1, sp, #36	; 0x24
 8006268:	4648      	mov	r0, r9
 800626a:	f7fc feb5 	bl	8002fd8 <HAL_GPIO_Init>

}
 800626e:	b00e      	add	sp, #56	; 0x38
 8006270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006274:	40023800 	.word	0x40023800
 8006278:	40020800 	.word	0x40020800
 800627c:	40020c00 	.word	0x40020c00
 8006280:	40020000 	.word	0x40020000
 8006284:	40021800 	.word	0x40021800

08006288 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8006288:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800628a:	4813      	ldr	r0, [pc, #76]	; (80062d8 <MX_I2C3_Init+0x50>)
 800628c:	4b13      	ldr	r3, [pc, #76]	; (80062dc <MX_I2C3_Init+0x54>)
 800628e:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8006290:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <MX_I2C3_Init+0x58>)
 8006292:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006294:	2300      	movs	r3, #0
 8006296:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006298:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800629a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800629e:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80062a0:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80062a2:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80062a4:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80062a6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80062a8:	f7fd fa8a 	bl	80037c0 <HAL_I2C_Init>
 80062ac:	b950      	cbnz	r0, 80062c4 <MX_I2C3_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80062ae:	2100      	movs	r1, #0
 80062b0:	4809      	ldr	r0, [pc, #36]	; (80062d8 <MX_I2C3_Init+0x50>)
 80062b2:	f7fd fda4 	bl	8003dfe <HAL_I2CEx_ConfigAnalogFilter>
 80062b6:	b940      	cbnz	r0, 80062ca <MX_I2C3_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80062b8:	2100      	movs	r1, #0
 80062ba:	4807      	ldr	r0, [pc, #28]	; (80062d8 <MX_I2C3_Init+0x50>)
 80062bc:	f7fd fdc1 	bl	8003e42 <HAL_I2CEx_ConfigDigitalFilter>
 80062c0:	b930      	cbnz	r0, 80062d0 <MX_I2C3_Init+0x48>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80062c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80062c4:	f000 fc92 	bl	8006bec <Error_Handler>
 80062c8:	e7f1      	b.n	80062ae <MX_I2C3_Init+0x26>
    Error_Handler();
 80062ca:	f000 fc8f 	bl	8006bec <Error_Handler>
 80062ce:	e7f3      	b.n	80062b8 <MX_I2C3_Init+0x30>
    Error_Handler();
 80062d0:	f000 fc8c 	bl	8006bec <Error_Handler>
}
 80062d4:	e7f5      	b.n	80062c2 <MX_I2C3_Init+0x3a>
 80062d6:	bf00      	nop
 80062d8:	2000d0b0 	.word	0x2000d0b0
 80062dc:	40005c00 	.word	0x40005c00
 80062e0:	000186a0 	.word	0x000186a0

080062e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80062e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ea:	2300      	movs	r3, #0
 80062ec:	9303      	str	r3, [sp, #12]
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	9305      	str	r3, [sp, #20]
 80062f2:	9306      	str	r3, [sp, #24]
 80062f4:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C3)
 80062f6:	6802      	ldr	r2, [r0, #0]
 80062f8:	4b21      	ldr	r3, [pc, #132]	; (8006380 <HAL_I2C_MspInit+0x9c>)
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d002      	beq.n	8006304 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80062fe:	b008      	add	sp, #32
 8006300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006304:	2500      	movs	r5, #0
 8006306:	9500      	str	r5, [sp, #0]
 8006308:	4c1e      	ldr	r4, [pc, #120]	; (8006384 <HAL_I2C_MspInit+0xa0>)
 800630a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800630c:	f043 0304 	orr.w	r3, r3, #4
 8006310:	6323      	str	r3, [r4, #48]	; 0x30
 8006312:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800631c:	9501      	str	r5, [sp, #4]
 800631e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	6323      	str	r3, [r4, #48]	; 0x30
 8006326:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8006330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006334:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006336:	f04f 0812 	mov.w	r8, #18
 800633a:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800633e:	2701      	movs	r7, #1
 8006340:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006342:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006344:	2604      	movs	r6, #4
 8006346:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8006348:	a903      	add	r1, sp, #12
 800634a:	480f      	ldr	r0, [pc, #60]	; (8006388 <HAL_I2C_MspInit+0xa4>)
 800634c:	f7fc fe44 	bl	8002fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8006350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006354:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006356:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800635a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800635c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800635e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8006360:	a903      	add	r1, sp, #12
 8006362:	480a      	ldr	r0, [pc, #40]	; (800638c <HAL_I2C_MspInit+0xa8>)
 8006364:	f7fc fe38 	bl	8002fd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006368:	9502      	str	r5, [sp, #8]
 800636a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800636c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006370:	6423      	str	r3, [r4, #64]	; 0x40
 8006372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006378:	9302      	str	r3, [sp, #8]
 800637a:	9b02      	ldr	r3, [sp, #8]
}
 800637c:	e7bf      	b.n	80062fe <HAL_I2C_MspInit+0x1a>
 800637e:	bf00      	nop
 8006380:	40005c00 	.word	0x40005c00
 8006384:	40023800 	.word	0x40023800
 8006388:	40020800 	.word	0x40020800
 800638c:	40020000 	.word	0x40020000

08006390 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8006390:	b508      	push	{r3, lr}

  if(i2cHandle->Instance==I2C3)
 8006392:	6802      	ldr	r2, [r0, #0]
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_I2C_MspDeInit+0x2c>)
 8006396:	429a      	cmp	r2, r3
 8006398:	d000      	beq.n	800639c <HAL_I2C_MspDeInit+0xc>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800639a:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C3_CLK_DISABLE();
 800639c:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <HAL_I2C_MspDeInit+0x30>)
 800639e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80063a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063a4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 80063a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063aa:	4806      	ldr	r0, [pc, #24]	; (80063c4 <HAL_I2C_MspDeInit+0x34>)
 80063ac:	f7fc ff0c 	bl	80031c8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80063b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063b4:	4804      	ldr	r0, [pc, #16]	; (80063c8 <HAL_I2C_MspDeInit+0x38>)
 80063b6:	f7fc ff07 	bl	80031c8 <HAL_GPIO_DeInit>
}
 80063ba:	e7ee      	b.n	800639a <HAL_I2C_MspDeInit+0xa>
 80063bc:	40005c00 	.word	0x40005c00
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40020800 	.word	0x40020800
 80063c8:	40020000 	.word	0x40020000

080063cc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80063cc:	b500      	push	{lr}
 80063ce:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80063d0:	2234      	movs	r2, #52	; 0x34
 80063d2:	2100      	movs	r1, #0
 80063d4:	a801      	add	r0, sp, #4
 80063d6:	f003 fb17 	bl	8009a08 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80063da:	4828      	ldr	r0, [pc, #160]	; (800647c <MX_LTDC_Init+0xb0>)
 80063dc:	4b28      	ldr	r3, [pc, #160]	; (8006480 <MX_LTDC_Init+0xb4>)
 80063de:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80063e4:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80063e6:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80063e8:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 9;
 80063ea:	2209      	movs	r2, #9
 80063ec:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 1;
 80063ee:	2201      	movs	r2, #1
 80063f0:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80063f2:	221d      	movs	r2, #29
 80063f4:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80063f6:	2203      	movs	r2, #3
 80063f8:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80063fa:	f240 120d 	movw	r2, #269	; 0x10d
 80063fe:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8006400:	f240 1243 	movw	r2, #323	; 0x143
 8006404:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8006406:	f240 1217 	movw	r2, #279	; 0x117
 800640a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800640c:	f240 1247 	movw	r2, #327	; 0x147
 8006410:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006412:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006416:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800641a:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800641e:	f7fd fe07 	bl	8004030 <HAL_LTDC_Init>
 8006422:	bb20      	cbnz	r0, 800646e <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 8006424:	2200      	movs	r2, #0
 8006426:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 240;
 8006428:	21f0      	movs	r1, #240	; 0xf0
 800642a:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 800642c:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 320;
 800642e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006432:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8006434:	2002      	movs	r0, #2
 8006436:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8006438:	20ff      	movs	r0, #255	; 0xff
 800643a:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 800643c:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800643e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8006442:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006444:	2007      	movs	r0, #7
 8006446:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8006448:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 800644c:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800644e:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8006450:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8006452:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8006456:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800645a:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800645e:	a901      	add	r1, sp, #4
 8006460:	4806      	ldr	r0, [pc, #24]	; (800647c <MX_LTDC_Init+0xb0>)
 8006462:	f7fd fe5f 	bl	8004124 <HAL_LTDC_ConfigLayer>
 8006466:	b928      	cbnz	r0, 8006474 <MX_LTDC_Init+0xa8>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006468:	b00f      	add	sp, #60	; 0x3c
 800646a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800646e:	f000 fbbd 	bl	8006bec <Error_Handler>
 8006472:	e7d7      	b.n	8006424 <MX_LTDC_Init+0x58>
    Error_Handler();
 8006474:	f000 fbba 	bl	8006bec <Error_Handler>
}
 8006478:	e7f6      	b.n	8006468 <MX_LTDC_Init+0x9c>
 800647a:	bf00      	nop
 800647c:	2000d104 	.word	0x2000d104
 8006480:	40016800 	.word	0x40016800

08006484 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8006484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006488:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800648a:	2300      	movs	r3, #0
 800648c:	9307      	str	r3, [sp, #28]
 800648e:	9308      	str	r3, [sp, #32]
 8006490:	9309      	str	r3, [sp, #36]	; 0x24
 8006492:	930a      	str	r3, [sp, #40]	; 0x28
 8006494:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(ltdcHandle->Instance==LTDC)
 8006496:	6802      	ldr	r2, [r0, #0]
 8006498:	4b57      	ldr	r3, [pc, #348]	; (80065f8 <HAL_LTDC_MspInit+0x174>)
 800649a:	429a      	cmp	r2, r3
 800649c:	d002      	beq.n	80064a4 <HAL_LTDC_MspInit+0x20>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800649e:	b00c      	add	sp, #48	; 0x30
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 80064a4:	2400      	movs	r4, #0
 80064a6:	9400      	str	r4, [sp, #0]
 80064a8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80064ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80064b2:	645a      	str	r2, [r3, #68]	; 0x44
 80064b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064b6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80064ba:	9200      	str	r2, [sp, #0]
 80064bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80064be:	9401      	str	r4, [sp, #4]
 80064c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c2:	f042 0220 	orr.w	r2, r2, #32
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30
 80064c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ca:	f002 0220 	and.w	r2, r2, #32
 80064ce:	9201      	str	r2, [sp, #4]
 80064d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064d2:	9402      	str	r4, [sp, #8]
 80064d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
 80064dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064de:	f002 0201 	and.w	r2, r2, #1
 80064e2:	9202      	str	r2, [sp, #8]
 80064e4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064e6:	9403      	str	r4, [sp, #12]
 80064e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ea:	f042 0202 	orr.w	r2, r2, #2
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
 80064f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f2:	f002 0202 	and.w	r2, r2, #2
 80064f6:	9203      	str	r2, [sp, #12]
 80064f8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80064fa:	9404      	str	r4, [sp, #16]
 80064fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006502:	631a      	str	r2, [r3, #48]	; 0x30
 8006504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006506:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800650a:	9204      	str	r2, [sp, #16]
 800650c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800650e:	9405      	str	r4, [sp, #20]
 8006510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006512:	f042 0204 	orr.w	r2, r2, #4
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
 8006518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651a:	f002 0204 	and.w	r2, r2, #4
 800651e:	9205      	str	r2, [sp, #20]
 8006520:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006522:	9406      	str	r4, [sp, #24]
 8006524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006526:	f042 0208 	orr.w	r2, r2, #8
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	9306      	str	r3, [sp, #24]
 8006534:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8006536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800653a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800653c:	2502      	movs	r5, #2
 800653e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006540:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006542:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006544:	260e      	movs	r6, #14
 8006546:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8006548:	a907      	add	r1, sp, #28
 800654a:	482c      	ldr	r0, [pc, #176]	; (80065fc <HAL_LTDC_MspInit+0x178>)
 800654c:	f7fc fd44 	bl	8002fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8006550:	f641 0358 	movw	r3, #6232	; 0x1858
 8006554:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006556:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006558:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800655a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800655c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800655e:	a907      	add	r1, sp, #28
 8006560:	4827      	ldr	r0, [pc, #156]	; (8006600 <HAL_LTDC_MspInit+0x17c>)
 8006562:	f7fc fd39 	bl	8002fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8006566:	2303      	movs	r3, #3
 8006568:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800656a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800656c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800656e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006570:	f04f 0809 	mov.w	r8, #9
 8006574:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006578:	4f22      	ldr	r7, [pc, #136]	; (8006604 <HAL_LTDC_MspInit+0x180>)
 800657a:	a907      	add	r1, sp, #28
 800657c:	4638      	mov	r0, r7
 800657e:	f7fc fd2b 	bl	8002fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8006582:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006586:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006588:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800658c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800658e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006590:	a907      	add	r1, sp, #28
 8006592:	4638      	mov	r0, r7
 8006594:	f7fc fd20 	bl	8002fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8006598:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800659c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800659e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a2:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80065a4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80065a6:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 80065aa:	a907      	add	r1, sp, #28
 80065ac:	4638      	mov	r0, r7
 80065ae:	f7fc fd13 	bl	8002fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80065b2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80065b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065b8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ba:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065bc:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80065be:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065c0:	a907      	add	r1, sp, #28
 80065c2:	4811      	ldr	r0, [pc, #68]	; (8006608 <HAL_LTDC_MspInit+0x184>)
 80065c4:	f7fc fd08 	bl	8002fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80065c8:	2348      	movs	r3, #72	; 0x48
 80065ca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065cc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ce:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80065d2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065d4:	a907      	add	r1, sp, #28
 80065d6:	480d      	ldr	r0, [pc, #52]	; (800660c <HAL_LTDC_MspInit+0x188>)
 80065d8:	f7fc fcfe 	bl	8002fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80065dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80065e0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065e6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80065e8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80065ec:	a907      	add	r1, sp, #28
 80065ee:	4638      	mov	r0, r7
 80065f0:	f7fc fcf2 	bl	8002fd8 <HAL_GPIO_Init>
}
 80065f4:	e753      	b.n	800649e <HAL_LTDC_MspInit+0x1a>
 80065f6:	bf00      	nop
 80065f8:	40016800 	.word	0x40016800
 80065fc:	40021400 	.word	0x40021400
 8006600:	40020000 	.word	0x40020000
 8006604:	40020400 	.word	0x40020400
 8006608:	40020800 	.word	0x40020800
 800660c:	40020c00 	.word	0x40020c00

08006610 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 8006610:	b500      	push	{lr}
 8006612:	b083      	sub	sp, #12
 8006614:	9001      	str	r0, [sp, #4]
        while (HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10) != HAL_OK) {};
 8006616:	230a      	movs	r3, #10
 8006618:	2201      	movs	r2, #1
 800661a:	a901      	add	r1, sp, #4
 800661c:	4804      	ldr	r0, [pc, #16]	; (8006630 <__io_putchar+0x20>)
 800661e:	f7ff fa90 	bl	8005b42 <HAL_UART_Transmit>
 8006622:	2800      	cmp	r0, #0
 8006624:	d1f7      	bne.n	8006616 <__io_putchar+0x6>
 return ch;
}
 8006626:	9801      	ldr	r0, [sp, #4]
 8006628:	b003      	add	sp, #12
 800662a:	f85d fb04 	ldr.w	pc, [sp], #4
 800662e:	bf00      	nop
 8006630:	2000d29c 	.word	0x2000d29c

08006634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006634:	b530      	push	{r4, r5, lr}
 8006636:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006638:	2530      	movs	r5, #48	; 0x30
 800663a:	462a      	mov	r2, r5
 800663c:	2100      	movs	r1, #0
 800663e:	a814      	add	r0, sp, #80	; 0x50
 8006640:	f003 f9e2 	bl	8009a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006644:	2400      	movs	r4, #0
 8006646:	940f      	str	r4, [sp, #60]	; 0x3c
 8006648:	9410      	str	r4, [sp, #64]	; 0x40
 800664a:	9411      	str	r4, [sp, #68]	; 0x44
 800664c:	9412      	str	r4, [sp, #72]	; 0x48
 800664e:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006650:	462a      	mov	r2, r5
 8006652:	4621      	mov	r1, r4
 8006654:	a803      	add	r0, sp, #12
 8006656:	f003 f9d7 	bl	8009a08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800665a:	9401      	str	r4, [sp, #4]
 800665c:	4b20      	ldr	r3, [pc, #128]	; (80066e0 <SystemClock_Config+0xac>)
 800665e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006660:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006670:	9402      	str	r4, [sp, #8]
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <SystemClock_Config+0xb0>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006682:	9302      	str	r3, [sp, #8]
 8006684:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006686:	2301      	movs	r3, #1
 8006688:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800668a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800668e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006690:	2502      	movs	r5, #2
 8006692:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006694:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006698:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800669a:	2304      	movs	r3, #4
 800669c:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 800669e:	23a8      	movs	r3, #168	; 0xa8
 80066a0:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80066a2:	951e      	str	r5, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80066a4:	2307      	movs	r3, #7
 80066a6:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066a8:	a814      	add	r0, sp, #80	; 0x50
 80066aa:	f7fd fdc7 	bl	800423c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066ae:	230f      	movs	r3, #15
 80066b0:	930f      	str	r3, [sp, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066b2:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066b4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80066b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80066ba:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80066bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066c0:	9313      	str	r3, [sp, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80066c2:	2105      	movs	r1, #5
 80066c4:	a80f      	add	r0, sp, #60	; 0x3c
 80066c6:	f7fe f81b 	bl	8004700 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80066ca:	2308      	movs	r3, #8
 80066cc:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80066ce:	2332      	movs	r3, #50	; 0x32
 80066d0:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80066d2:	9509      	str	r5, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80066d4:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066d6:	a803      	add	r0, sp, #12
 80066d8:	f7fe f906 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80066dc:	b021      	add	sp, #132	; 0x84
 80066de:	bd30      	pop	{r4, r5, pc}
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40007000 	.word	0x40007000

080066e8 <mnist_game_reset>:

/* USER CODE BEGIN 4 */

void mnist_game_reset(ai_float** in_data, pred_probType * _1st_pred, pred_probType *_2nd_pred){
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	460d      	mov	r5, r1
 80066ec:	4614      	mov	r4, r2
	memset(in_data,0.0,sizeof(in_data[0][0])*NN_INPUT_IMAGE_WIDTH *NN_INPUT_IMAGE_HEIGHT);
 80066ee:	f44f 6244 	mov.w	r2, #3136	; 0xc40
 80066f2:	2100      	movs	r1, #0
 80066f4:	f003 f988 	bl	8009a08 <memset>
	_2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob  =0.0;
 80066f8:	2200      	movs	r2, #0
 80066fa:	602a      	str	r2, [r5, #0]
 80066fc:	2300      	movs	r3, #0
 80066fe:	712b      	strb	r3, [r5, #4]
 8006700:	6022      	str	r2, [r4, #0]
 8006702:	7123      	strb	r3, [r4, #4]
}
 8006704:	bd38      	pop	{r3, r4, r5, pc}
	...

08006708 <user_interface_init>:
 * @brief: TLCD INIT Implementation
 * @Param: Board Support Package
 *
 */
void user_interface_init(void)
{
 8006708:	b508      	push	{r3, lr}
	// Initialize LCD. Use functions from stm32f429i_discovery_lcd.h
	BSP_LCD_Init();
 800670a:	f7fb fcf3 	bl	80020f4 <BSP_LCD_Init>

	// Initialize LCD Layer 1 (background layer) with FB address that points to layer 1
	BSP_LCD_LayerDefaultInit(LCD_LAYER_1, LCD_FRAME_BUFFER_LAYER1);
 800670e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8006712:	2001      	movs	r0, #1
 8006714:	f7fb fae8 	bl	8001ce8 <BSP_LCD_LayerDefaultInit>

	// Select layer 1
	BSP_LCD_SelectLayer(LCD_LAYER_1);
 8006718:	2001      	movs	r0, #1
 800671a:	f7fb fb27 	bl	8001d6c <BSP_LCD_SelectLayer>

	// Clear LCD (color red)
	BSP_LCD_Clear(LCD_COLOR_RED);
 800671e:	4811      	ldr	r0, [pc, #68]	; (8006764 <user_interface_init+0x5c>)
 8006720:	f7fb fb76 	bl	8001e10 <BSP_LCD_Clear>

	// Set color keyring for layer 1 (color dark cyan)
	BSP_LCD_SetColorKeying(LCD_LAYER_1, LCD_COLOR_DARKCYAN);
 8006724:	4910      	ldr	r1, [pc, #64]	; (8006768 <user_interface_init+0x60>)
 8006726:	2001      	movs	r0, #1
 8006728:	f7fb fb46 	bl	8001db8 <BSP_LCD_SetColorKeying>

	// Set layer 1 visibility to disabled
	BSP_LCD_SetLayerVisible(LCD_LAYER_1, DISABLE);
 800672c:	2100      	movs	r1, #0
 800672e:	2001      	movs	r0, #1
 8006730:	f7fb fb22 	bl	8001d78 <BSP_LCD_SetLayerVisible>

	// Initialize Layer 0 (foreground or visible layer) with FB address that points to layer 0
	BSP_LCD_LayerDefaultInit(LCD_LAYER_0, LCD_FRAME_BUFFER_LAYER0);
 8006734:	490d      	ldr	r1, [pc, #52]	; (800676c <user_interface_init+0x64>)
 8006736:	2000      	movs	r0, #0
 8006738:	f7fb fad6 	bl	8001ce8 <BSP_LCD_LayerDefaultInit>

	// Select Layer 0
	BSP_LCD_SelectLayer(LCD_LAYER_0);
 800673c:	2000      	movs	r0, #0
 800673e:	f7fb fb15 	bl	8001d6c <BSP_LCD_SelectLayer>

	// Switch LCD display on
	BSP_LCD_DisplayOn();
 8006742:	f7fb fc29 	bl	8001f98 <BSP_LCD_DisplayOn>

	HAL_Delay(200);
 8006746:	20c8      	movs	r0, #200	; 0xc8
 8006748:	f7fc f93c 	bl	80029c4 <HAL_Delay>

	// Clear the whole LCD with color lightcyan
	BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 800674c:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8006750:	f7fb fb5e 	bl	8001e10 <BSP_LCD_Clear>

	HAL_Delay(100);
 8006754:	2064      	movs	r0, #100	; 0x64
 8006756:	f7fc f935 	bl	80029c4 <HAL_Delay>

	printf("LCD initialization completed \r\n");
 800675a:	4805      	ldr	r0, [pc, #20]	; (8006770 <user_interface_init+0x68>)
 800675c:	f003 fef6 	bl	800a54c <puts>
}
 8006760:	bd08      	pop	{r3, pc}
 8006762:	bf00      	nop
 8006764:	ffff0000 	.word	0xffff0000
 8006768:	ff008080 	.word	0xff008080
 800676c:	d0130000 	.word	0xd0130000
 8006770:	08188524 	.word	0x08188524

08006774 <user_interface_reset>:
 *
 * @brief: User Interface Control Function Implementation
 * @Param: Board Support Package
 *
 */
void user_interface_reset(void) {
 8006774:	b538      	push	{r3, r4, r5, lr}
	// Clear LCD with light cyan color. Possible color definitions in stm32f429i_discovery_lcd.h
	BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8006776:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800677a:	f7fb fb49 	bl	8001e10 <BSP_LCD_Clear>

	// Set text color to black
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800677e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006782:	f7fb fb27 	bl	8001dd4 <BSP_LCD_SetTextColor>

	// set font size 16
	BSP_LCD_SetFont(&Font16);
 8006786:	4d1f      	ldr	r5, [pc, #124]	; (8006804 <user_interface_reset+0x90>)
 8006788:	4628      	mov	r0, r5
 800678a:	f7fb fb37 	bl	8001dfc <BSP_LCD_SetFont>

	// Set background color (lightcyan)
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 800678e:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8006792:	f7fb fb29 	bl	8001de8 <BSP_LCD_SetBackColor>

	// Write prediction output string "NN OUTPUT" to position x,y = (5, 255)
	BSP_LCD_DisplayStringAt(5,  255,  (uint8_t*) "NN OUTPUT: ", LEFT_MODE);
 8006796:	2303      	movs	r3, #3
 8006798:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <user_interface_reset+0x94>)
 800679a:	21ff      	movs	r1, #255	; 0xff
 800679c:	2005      	movs	r0, #5
 800679e:	f7fb fd95 	bl	80022cc <BSP_LCD_DisplayStringAt>

	// Draw rectangle to mark prediction output area. Marked with "B" on image.
	// Position x,y = (200, 250) and dimensions = (28, 28)
	BSP_LCD_DrawRect(200, 250, 28, 28);
 80067a2:	231c      	movs	r3, #28
 80067a4:	461a      	mov	r2, r3
 80067a6:	21fa      	movs	r1, #250	; 0xfa
 80067a8:	20c8      	movs	r0, #200	; 0xc8
 80067aa:	f7fb fba5 	bl	8001ef8 <BSP_LCD_DrawRect>

	// Set text color to blue
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80067ae:	4c17      	ldr	r4, [pc, #92]	; (800680c <user_interface_reset+0x98>)
 80067b0:	4620      	mov	r0, r4
 80067b2:	f7fb fb0f 	bl	8001dd4 <BSP_LCD_SetTextColor>

	// Write clear button area, marked with "C". Draw filled rectangle to position x,y = (5, 285) with dimensions = (230, 30)
	BSP_LCD_FillRect(5, 285, 230, 30);
 80067b6:	231e      	movs	r3, #30
 80067b8:	22e6      	movs	r2, #230	; 0xe6
 80067ba:	f240 111d 	movw	r1, #285	; 0x11d
 80067be:	2005      	movs	r0, #5
 80067c0:	f7fb fbb4 	bl	8001f2c <BSP_LCD_FillRect>

	// Set text color to white
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	f7fb fb04 	bl	8001dd4 <BSP_LCD_SetTextColor>

	// Set font size to 16
	BSP_LCD_SetFont(&Font16);
 80067cc:	4628      	mov	r0, r5
 80067ce:	f7fb fb15 	bl	8001dfc <BSP_LCD_SetFont>

	// Set background color as blue
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80067d2:	4620      	mov	r0, r4
 80067d4:	f7fb fb08 	bl	8001de8 <BSP_LCD_SetBackColor>

	// Display string "CLEAR" to position x,y = (330, 291)
	BSP_LCD_DisplayStringAt(330, 291, (uint8_t*) "CLEAR", LEFT_MODE);
 80067d8:	2303      	movs	r3, #3
 80067da:	4a0d      	ldr	r2, [pc, #52]	; (8006810 <user_interface_reset+0x9c>)
 80067dc:	f240 1123 	movw	r1, #291	; 0x123
 80067e0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80067e4:	f7fb fd72 	bl	80022cc <BSP_LCD_DisplayStringAt>

	// Draw minimized user drawing area, marked with "D" on figure. Draw rectangle to position x,y = (2,2) and dimensions (237,237)
	BSP_LCD_DrawRect(2, 2, 237, 237);
 80067e8:	23ed      	movs	r3, #237	; 0xed
 80067ea:	461a      	mov	r2, r3
 80067ec:	2102      	movs	r1, #2
 80067ee:	4608      	mov	r0, r1
 80067f0:	f7fb fb82 	bl	8001ef8 <BSP_LCD_DrawRect>

	// Set text color as black
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80067f4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80067f8:	f7fb faec 	bl	8001dd4 <BSP_LCD_SetTextColor>

	printf("LCD Interface INIT successful \r\n");
 80067fc:	4805      	ldr	r0, [pc, #20]	; (8006814 <user_interface_reset+0xa0>)
 80067fe:	f003 fea5 	bl	800a54c <puts>
}
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	200000b8 	.word	0x200000b8
 8006808:	08188544 	.word	0x08188544
 800680c:	ff0000ff 	.word	0xff0000ff
 8006810:	08188550 	.word	0x08188550
 8006814:	08188558 	.word	0x08188558

08006818 <touch_sensor_init>:
 *
 * @brief: Touch Sensor INIT Implementation
 * @Param: Board Support Package
 *
 */
void touch_sensor_init(void) {
 8006818:	b508      	push	{r3, lr}
	// Initialize touch sensor to use a whole LCD area (240x320) and print to UART whether the initialization was successful or not
	if(BSP_TS_Init(240, 320) == TS_ERROR) {
 800681a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800681e:	20f0      	movs	r0, #240	; 0xf0
 8006820:	f7fc f812 	bl	8002848 <BSP_TS_Init>
 8006824:	2801      	cmp	r0, #1
 8006826:	d006      	beq.n	8006836 <touch_sensor_init+0x1e>
		printf("Touch sensor initialization failed \r\n");
	} else{
		printf("Touch sensor initialization successful \r\n");
 8006828:	4805      	ldr	r0, [pc, #20]	; (8006840 <touch_sensor_init+0x28>)
 800682a:	f003 fe8f 	bl	800a54c <puts>
	}
	HAL_Delay(50);
 800682e:	2032      	movs	r0, #50	; 0x32
 8006830:	f7fc f8c8 	bl	80029c4 <HAL_Delay>
}
 8006834:	bd08      	pop	{r3, pc}
		printf("Touch sensor initialization failed \r\n");
 8006836:	4803      	ldr	r0, [pc, #12]	; (8006844 <touch_sensor_init+0x2c>)
 8006838:	f003 fe88 	bl	800a54c <puts>
 800683c:	e7f7      	b.n	800682e <touch_sensor_init+0x16>
 800683e:	bf00      	nop
 8006840:	081885a0 	.word	0x081885a0
 8006844:	08188578 	.word	0x08188578

08006848 <main>:
{
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	f6ad 4d9c 	subw	sp, sp, #3228	; 0xc9c
	setvbuf(stdin, NULL, _IONBF, 0);
 8006850:	4bd1      	ldr	r3, [pc, #836]	; (8006b98 <main+0x350>)
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	2202      	movs	r2, #2
 8006858:	4619      	mov	r1, r3
 800685a:	6840      	ldr	r0, [r0, #4]
 800685c:	f003 fe8e 	bl	800a57c <setvbuf>
  HAL_Init();
 8006860:	f7fc f884 	bl	800296c <HAL_Init>
  SystemClock_Config();
 8006864:	f7ff fee6 	bl	8006634 <SystemClock_Config>
  MX_GPIO_Init();
 8006868:	f7ff fc26 	bl	80060b8 <MX_GPIO_Init>
  MX_CRC_Init();
 800686c:	f7ff fb20 	bl	8005eb0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8006870:	f7ff fb46 	bl	8005f00 <MX_DMA2D_Init>
  MX_FMC_Init();
 8006874:	f7ff fbea 	bl	800604c <MX_FMC_Init>
  MX_I2C3_Init();
 8006878:	f7ff fd06 	bl	8006288 <MX_I2C3_Init>
  MX_LTDC_Init();
 800687c:	f7ff fda6 	bl	80063cc <MX_LTDC_Init>
  MX_SPI5_Init();
 8006880:	f000 fafc 	bl	8006e7c <MX_SPI5_Init>
  MX_TIM1_Init();
 8006884:	f000 fc3a 	bl	80070fc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8006888:	f000 fc88 	bl	800719c <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 800688c:	f7ff fae0 	bl	8005e50 <MX_X_CUBE_AI_Init>
  printf("[MAIN] Application running \r\n");
 8006890:	48c2      	ldr	r0, [pc, #776]	; (8006b9c <main+0x354>)
 8006892:	f003 fe5b 	bl	800a54c <puts>
 	 BSP_PB_Init(BUTTON_KEY, 0);
 8006896:	2100      	movs	r1, #0
 8006898:	4608      	mov	r0, r1
 800689a:	f7fb f8b7 	bl	8001a0c <BSP_PB_Init>
 	 touch_sensor_init();
 800689e:	f7ff ffbb 	bl	8006818 <touch_sensor_init>
 	 user_interface_init();
 80068a2:	f7ff ff31 	bl	8006708 <user_interface_init>
 	 user_interface_reset();
 80068a6:	f7ff ff65 	bl	8006774 <user_interface_reset>
  	 _1st_pred.prob = _2nd_pred.prob = 0.0f;
 80068aa:	2300      	movs	r3, #0
 80068ac:	9308      	str	r3, [sp, #32]
 80068ae:	930a      	str	r3, [sp, #40]	; 0x28
 80068b0:	e0bb      	b.n	8006a2a <main+0x1e2>
				BSP_LCD_FillCircle(ui_state.X, ui_state.Y, 6);
 80068b2:	2206      	movs	r2, #6
 80068b4:	f7fb fe00 	bl	80024b8 <BSP_LCD_FillCircle>
				int x = ui_state.Y * ((float) 28 / 240);
 80068b8:	46a3      	mov	fp, r4
 80068ba:	88a3      	ldrh	r3, [r4, #4]
 80068bc:	ee07 3a10 	vmov	s14, r3
 80068c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068c4:	eddf 6ab6 	vldr	s13, [pc, #728]	; 8006ba0 <main+0x358>
 80068c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80068cc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80068d0:	ee17 4a90 	vmov	r4, s15
				int y = ui_state.X * ((float) 28 / 240);
 80068d4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80068d8:	ee07 3a90 	vmov	s15, r3
 80068dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e8:	ee17 5a90 	vmov	r5, s15
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x + 1, 255);
 80068ec:	b2ae      	uxth	r6, r5
 80068ee:	f106 08c9 	add.w	r8, r6, #201	; 0xc9
 80068f2:	fa1f f888 	uxth.w	r8, r8
 80068f6:	fa1f fa84 	uxth.w	sl, r4
 80068fa:	f10a 07fb 	add.w	r7, sl, #251	; 0xfb
 80068fe:	b2bf      	uxth	r7, r7
 8006900:	22ff      	movs	r2, #255	; 0xff
 8006902:	4639      	mov	r1, r7
 8006904:	4640      	mov	r0, r8
 8006906:	f7fb fc43 	bl	8002190 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x - 1, 255);
 800690a:	9600      	str	r6, [sp, #0]
 800690c:	36c7      	adds	r6, #199	; 0xc7
 800690e:	b2b6      	uxth	r6, r6
 8006910:	f10a 09f9 	add.w	r9, sl, #249	; 0xf9
 8006914:	fa1f f989 	uxth.w	r9, r9
 8006918:	22ff      	movs	r2, #255	; 0xff
 800691a:	4649      	mov	r1, r9
 800691c:	4630      	mov	r0, r6
 800691e:	f7fb fc37 	bl	8002190 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x, 255);
 8006922:	f10a 0afa 	add.w	sl, sl, #250	; 0xfa
 8006926:	fa1f f28a 	uxth.w	r2, sl
 800692a:	4611      	mov	r1, r2
 800692c:	22ff      	movs	r2, #255	; 0xff
 800692e:	468a      	mov	sl, r1
 8006930:	4640      	mov	r0, r8
 8006932:	f7fb fc2d 	bl	8002190 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x, 255);
 8006936:	22ff      	movs	r2, #255	; 0xff
 8006938:	f8cd a004 	str.w	sl, [sp, #4]
 800693c:	4651      	mov	r1, sl
 800693e:	4630      	mov	r0, r6
 8006940:	f7fb fc26 	bl	8002190 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x, 255);
 8006944:	9b00      	ldr	r3, [sp, #0]
 8006946:	f103 0ac8 	add.w	sl, r3, #200	; 0xc8
 800694a:	fa1f fa8a 	uxth.w	sl, sl
 800694e:	22ff      	movs	r2, #255	; 0xff
 8006950:	9901      	ldr	r1, [sp, #4]
 8006952:	4650      	mov	r0, sl
 8006954:	f7fb fc1c 	bl	8002190 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x + 1, 255);
 8006958:	22ff      	movs	r2, #255	; 0xff
 800695a:	4639      	mov	r1, r7
 800695c:	4650      	mov	r0, sl
 800695e:	f7fb fc17 	bl	8002190 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x - 1, 255);
 8006962:	22ff      	movs	r2, #255	; 0xff
 8006964:	4649      	mov	r1, r9
 8006966:	4650      	mov	r0, sl
 8006968:	f7fb fc12 	bl	8002190 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x - 1, 255);
 800696c:	22ff      	movs	r2, #255	; 0xff
 800696e:	4649      	mov	r1, r9
 8006970:	4640      	mov	r0, r8
 8006972:	f7fb fc0d 	bl	8002190 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x + 1, 255);
 8006976:	22ff      	movs	r2, #255	; 0xff
 8006978:	4639      	mov	r1, r7
 800697a:	4630      	mov	r0, r6
 800697c:	f7fb fc08 	bl	8002190 <BSP_LCD_DrawPixel>
				nn_input_data[x + 1][y + 1] = PXL_SET;
 8006980:	1c61      	adds	r1, r4, #1
 8006982:	1c68      	adds	r0, r5, #1
 8006984:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8006988:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800698c:	ab16      	add	r3, sp, #88	; 0x58
 800698e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006992:	4b84      	ldr	r3, [pc, #528]	; (8006ba4 <main+0x35c>)
 8006994:	6013      	str	r3, [r2, #0]
				nn_input_data[x - 1][y - 1] = PXL_SET;
 8006996:	1e62      	subs	r2, r4, #1
 8006998:	1e6e      	subs	r6, r5, #1
 800699a:	ebc2 07c2 	rsb	r7, r2, r2, lsl #3
 800699e:	eb06 0787 	add.w	r7, r6, r7, lsl #2
 80069a2:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 80069a6:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 80069aa:	603b      	str	r3, [r7, #0]
				nn_input_data[x + 1][y] = PXL_SET;
 80069ac:	ebc1 07c1 	rsb	r7, r1, r1, lsl #3
 80069b0:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80069b4:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 80069b8:	603b      	str	r3, [r7, #0]
				nn_input_data[x - 1][y] = PXL_SET;
 80069ba:	ebc2 07c2 	rsb	r7, r2, r2, lsl #3
 80069be:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80069c2:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 80069c6:	603b      	str	r3, [r7, #0]
				nn_input_data[x][y + 1] = PXL_SET;
 80069c8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
 80069cc:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80069d0:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 80069d4:	603b      	str	r3, [r7, #0]
				nn_input_data[x][y - 1] = PXL_SET;
 80069d6:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
 80069da:	eb06 0787 	add.w	r7, r6, r7, lsl #2
 80069de:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 80069e2:	603b      	str	r3, [r7, #0]
				nn_input_data[x + 1][y - 1] = PXL_SET;
 80069e4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80069e8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80069ec:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80069f0:	600b      	str	r3, [r1, #0]
				nn_input_data[x - 1][y + 1] = PXL_SET;
 80069f2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80069f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80069fa:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80069fe:	6013      	str	r3, [r2, #0]
				nn_input_data[x][y] = PXL_SET;
 8006a00:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8006a04:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8006a08:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8006a0c:	602b      	str	r3, [r5, #0]
				printf("X =%d Y=%d\r\n", ui_state.X, ui_state.Y);
 8006a0e:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8006a12:	f8bb 1002 	ldrh.w	r1, [fp, #2]
 8006a16:	4864      	ldr	r0, [pc, #400]	; (8006ba8 <main+0x360>)
 8006a18:	f003 fd12 	bl	800a440 <iprintf>
	HAL_Delay(1);
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	f7fb ffd1 	bl	80029c4 <HAL_Delay>
	if (BSP_PB_GetState(BUTTON_KEY)) {
 8006a22:	2000      	movs	r0, #0
 8006a24:	f7fb f832 	bl	8001a8c <BSP_PB_GetState>
 8006a28:	bb40      	cbnz	r0, 8006a7c <main+0x234>
	  BSP_TS_GetState(&ui_state);
 8006a2a:	4c60      	ldr	r4, [pc, #384]	; (8006bac <main+0x364>)
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f7fb ff29 	bl	8002884 <BSP_TS_GetState>
		if (ui_state.TouchDetected) {
 8006a32:	8823      	ldrh	r3, [r4, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0f1      	beq.n	8006a1c <main+0x1d4>
			ui_state.Y = 320-ui_state.Y;
 8006a38:	88a1      	ldrh	r1, [r4, #4]
 8006a3a:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
 8006a3e:	b289      	uxth	r1, r1
 8006a40:	80a1      	strh	r1, [r4, #4]
			if ((ui_state.X > DRAW_IMG_X1 && ui_state.X < DRAW_IMG_X2) && (ui_state.Y > DRAW_IMG_Y1 && ui_state.Y < DRAW_IMG_Y2)) {
 8006a42:	8860      	ldrh	r0, [r4, #2]
 8006a44:	f1a0 030b 	sub.w	r3, r0, #11
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2bda      	cmp	r3, #218	; 0xda
 8006a4c:	d805      	bhi.n	8006a5a <main+0x212>
 8006a4e:	f1a1 030b 	sub.w	r3, r1, #11
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2bda      	cmp	r3, #218	; 0xda
 8006a56:	f67f af2c 	bls.w	80068b2 <main+0x6a>
			} else if ((ui_state.X > ERASE_BUTTON_X1 && ui_state.X < ERASE_BUTTON_X2) && (ui_state.Y > ERASE_BUTTON_Y1 && ui_state.Y < ERASE_BUTTON_Y2)) {
 8006a5a:	3806      	subs	r0, #6
 8006a5c:	b280      	uxth	r0, r0
 8006a5e:	28e4      	cmp	r0, #228	; 0xe4
 8006a60:	d8dc      	bhi.n	8006a1c <main+0x1d4>
 8006a62:	f5a1 718f 	sub.w	r1, r1, #286	; 0x11e
 8006a66:	b289      	uxth	r1, r1
 8006a68:	291c      	cmp	r1, #28
 8006a6a:	d8d7      	bhi.n	8006a1c <main+0x1d4>
				user_interface_reset();
 8006a6c:	f7ff fe82 	bl	8006774 <user_interface_reset>
				mnist_game_reset((ai_float **)nn_input_data, &_1st_pred, &_2nd_pred);
 8006a70:	aa08      	add	r2, sp, #32
 8006a72:	a90a      	add	r1, sp, #40	; 0x28
 8006a74:	a816      	add	r0, sp, #88	; 0x58
 8006a76:	f7ff fe37 	bl	80066e8 <mnist_game_reset>
 8006a7a:	e7cf      	b.n	8006a1c <main+0x1d4>
		printf("NN processing...\r");
 8006a7c:	484c      	ldr	r0, [pc, #304]	; (8006bb0 <main+0x368>)
 8006a7e:	f003 fcdf 	bl	800a440 <iprintf>
	MX_X_CUBE_AI_Process_2((ai_float *)nn_input_data, nn_output_data);
 8006a82:	a90c      	add	r1, sp, #48	; 0x30
 8006a84:	a816      	add	r0, sp, #88	; 0x58
 8006a86:	f7ff fa0f 	bl	8005ea8 <MX_X_CUBE_AI_Process_2>
	for (int i = 0; i < NUM_CLASSES; i++) {
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e00b      	b.n	8006aa6 <main+0x25e>
		} else if (_2nd_pred.prob < nn_output_data[i]) {
 8006a8e:	ed9d 7a08 	vldr	s14, [sp, #32]
 8006a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a9a:	dd03      	ble.n	8006aa4 <main+0x25c>
			_2nd_pred.label = i;
 8006a9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			_2nd_pred.prob = nn_output_data[i];
 8006aa0:	edcd 7a08 	vstr	s15, [sp, #32]
	for (int i = 0; i < NUM_CLASSES; i++) {
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	2b09      	cmp	r3, #9
 8006aa8:	dc16      	bgt.n	8006ad8 <main+0x290>
		if (_1st_pred.prob < nn_output_data[i]) {
 8006aaa:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8006aae:	aa0c      	add	r2, sp, #48	; 0x30
 8006ab0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006ab4:	edd2 7a00 	vldr	s15, [r2]
 8006ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac0:	d5e5      	bpl.n	8006a8e <main+0x246>
			_2nd_pred.label = _1st_pred.label;
 8006ac2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8006ac6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			_2nd_pred.prob = _1st_pred.prob;
 8006aca:	ed8d 7a08 	vstr	s14, [sp, #32]
			_1st_pred.prob = nn_output_data[i];
 8006ace:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
			_1st_pred.label = i;
 8006ad2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8006ad6:	e7e5      	b.n	8006aa4 <main+0x25c>
		printf("NN First Guess: %d  %f \n\r", _1st_pred.label, _1st_pred.prob*0.1);
 8006ad8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 8006adc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ade:	f7f9 fd43 	bl	8000568 <__aeabi_f2d>
 8006ae2:	a32b      	add	r3, pc, #172	; (adr r3, 8006b90 <main+0x348>)
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f7f9 fd96 	bl	8000618 <__aeabi_dmul>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4621      	mov	r1, r4
 8006af2:	4830      	ldr	r0, [pc, #192]	; (8006bb4 <main+0x36c>)
 8006af4:	f003 fca4 	bl	800a440 <iprintf>
		printf("NN Second Guess: %d  %f \n\r", _2nd_pred.label, _2nd_pred.prob*0.1);
 8006af8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8006afc:	9808      	ldr	r0, [sp, #32]
 8006afe:	f7f9 fd33 	bl	8000568 <__aeabi_f2d>
 8006b02:	a323      	add	r3, pc, #140	; (adr r3, 8006b90 <main+0x348>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f7f9 fd86 	bl	8000618 <__aeabi_dmul>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4621      	mov	r1, r4
 8006b12:	4829      	ldr	r0, [pc, #164]	; (8006bb8 <main+0x370>)
 8006b14:	f003 fc94 	bl	800a440 <iprintf>
		sprintf(_1st_pred_str, "%d", _1st_pred.label);
 8006b18:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8006b1c:	4927      	ldr	r1, [pc, #156]	; (8006bbc <main+0x374>)
 8006b1e:	a805      	add	r0, sp, #20
 8006b20:	f003 fdf2 	bl	800a708 <siprintf>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006b24:	4826      	ldr	r0, [pc, #152]	; (8006bc0 <main+0x378>)
 8006b26:	f7fb f955 	bl	8001dd4 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font20);
 8006b2a:	4826      	ldr	r0, [pc, #152]	; (8006bc4 <main+0x37c>)
 8006b2c:	f7fb f966 	bl	8001dfc <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8006b30:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8006b34:	f7fb f958 	bl	8001de8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(130, 255, (uint8_t *) _1st_pred_str, LEFT_MODE);
 8006b38:	2303      	movs	r3, #3
 8006b3a:	aa05      	add	r2, sp, #20
 8006b3c:	21ff      	movs	r1, #255	; 0xff
 8006b3e:	2082      	movs	r0, #130	; 0x82
 8006b40:	f7fb fbc4 	bl	80022cc <BSP_LCD_DisplayStringAt>
		sprintf(_1st_pred_prob_str, "%.1f", (float)_1st_pred.prob*100);
 8006b44:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8006b48:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006bc8 <main+0x380>
 8006b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b50:	ee17 0a90 	vmov	r0, s15
 8006b54:	f7f9 fd08 	bl	8000568 <__aeabi_f2d>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	491b      	ldr	r1, [pc, #108]	; (8006bcc <main+0x384>)
 8006b5e:	a802      	add	r0, sp, #8
 8006b60:	f003 fdd2 	bl	800a708 <siprintf>
		BSP_LCD_DisplayStringAt(10, 220, (uint8_t *) _1st_pred_prob_str, LEFT_MODE);
 8006b64:	2303      	movs	r3, #3
 8006b66:	aa02      	add	r2, sp, #8
 8006b68:	21dc      	movs	r1, #220	; 0xdc
 8006b6a:	200a      	movs	r0, #10
 8006b6c:	f7fb fbae 	bl	80022cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(80, 220, (uint8_t *) "%", LEFT_MODE);
 8006b70:	2303      	movs	r3, #3
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <main+0x388>)
 8006b74:	21dc      	movs	r1, #220	; 0xdc
 8006b76:	2050      	movs	r0, #80	; 0x50
 8006b78:	f7fb fba8 	bl	80022cc <BSP_LCD_DisplayStringAt>
		mnist_game_reset((ai_float **) nn_input_data, &_1st_pred, &_2nd_pred);
 8006b7c:	aa08      	add	r2, sp, #32
 8006b7e:	a90a      	add	r1, sp, #40	; 0x28
 8006b80:	a816      	add	r0, sp, #88	; 0x58
 8006b82:	f7ff fdb1 	bl	80066e8 <mnist_game_reset>
		HAL_Delay(200);
 8006b86:	20c8      	movs	r0, #200	; 0xc8
 8006b88:	f7fb ff1c 	bl	80029c4 <HAL_Delay>
 8006b8c:	e74d      	b.n	8006a2a <main+0x1e2>
 8006b8e:	bf00      	nop
 8006b90:	9999999a 	.word	0x9999999a
 8006b94:	3fb99999 	.word	0x3fb99999
 8006b98:	20000bc0 	.word	0x20000bc0
 8006b9c:	081885cc 	.word	0x081885cc
 8006ba0:	3deeeeef 	.word	0x3deeeeef
 8006ba4:	3f7d70a4 	.word	0x3f7d70a4
 8006ba8:	081885ec 	.word	0x081885ec
 8006bac:	2000d1ac 	.word	0x2000d1ac
 8006bb0:	081885fc 	.word	0x081885fc
 8006bb4:	08188610 	.word	0x08188610
 8006bb8:	0818862c 	.word	0x0818862c
 8006bbc:	08188648 	.word	0x08188648
 8006bc0:	ffff0000 	.word	0xffff0000
 8006bc4:	200000c0 	.word	0x200000c0
 8006bc8:	42c80000 	.word	0x42c80000
 8006bcc:	0818864c 	.word	0x0818864c
 8006bd0:	08188654 	.word	0x08188654

08006bd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006bd6:	6802      	ldr	r2, [r0, #0]
 8006bd8:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d000      	beq.n	8006be0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006bde:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8006be0:	f7fb fede 	bl	80029a0 <HAL_IncTick>
}
 8006be4:	e7fb      	b.n	8006bde <HAL_TIM_PeriodElapsedCallback+0xa>
 8006be6:	bf00      	nop
 8006be8:	40001000 	.word	0x40001000

08006bec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006bec:	4770      	bx	lr
	...

08006bf0 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8006bf0:	b530      	push	{r4, r5, lr}
 8006bf2:	b09f      	sub	sp, #124	; 0x7c
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	460c      	mov	r4, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8006bf8:	f000 fc78 	bl	80074ec <ai_platform_context_acquire>

  if ( report && net_ctx )
 8006bfc:	2c00      	cmp	r4, #0
 8006bfe:	d036      	beq.n	8006c6e <ai_network_get_info+0x7e>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d036      	beq.n	8006c72 <ai_network_get_info+0x82>
  {
    ai_network_report r = {
 8006c04:	2264      	movs	r2, #100	; 0x64
 8006c06:	2100      	movs	r1, #0
 8006c08:	a805      	add	r0, sp, #20
 8006c0a:	f002 fefd 	bl	8009a08 <memset>
 8006c0e:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <ai_network_get_info+0x8c>)
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	4b1b      	ldr	r3, [pc, #108]	; (8006c80 <ai_network_get_info+0x90>)
 8006c14:	9302      	str	r3, [sp, #8]
 8006c16:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <ai_network_get_info+0x94>)
 8006c18:	9303      	str	r3, [sp, #12]
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <ai_network_get_info+0x98>)
 8006c1c:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8006c1e:	f000 fba7 	bl	8007370 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8006c22:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8006c24:	f000 fbc6 	bl	80073b4 <ai_platform_runtime_get_version>
 8006c28:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 8006c2a:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <ai_network_get_info+0x9c>)
 8006c2c:	9307      	str	r3, [sp, #28]
 8006c2e:	2305      	movs	r3, #5
 8006c30:	f88d 3020 	strb.w	r3, [sp, #32]
 8006c34:	2302      	movs	r3, #2
 8006c36:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8006c40:	2303      	movs	r3, #3
 8006c42:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = {AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR,
                            AI_TOOLS_API_VERSION_MICRO, 0x0},

      .api_version            = ai_platform_api_get_version(),
 8006c46:	f000 fbe9 	bl	800741c <ai_platform_api_get_version>
 8006c4a:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8006c4c:	f000 fc1a 	bl	8007484 <ai_platform_interface_api_get_version>
 8006c50:	900b      	str	r0, [sp, #44]	; 0x2c
    ai_network_report r = {
 8006c52:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <ai_network_get_info+0xa0>)
 8006c54:	930c      	str	r3, [sp, #48]	; 0x30
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 8006c56:	a901      	add	r1, sp, #4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 fca3 	bl	80075a4 <ai_platform_api_get_network_report>
 8006c5e:	4605      	mov	r5, r0
 8006c60:	b140      	cbz	r0, 8006c74 <ai_network_get_info+0x84>

    *report = r;
 8006c62:	2274      	movs	r2, #116	; 0x74
 8006c64:	a901      	add	r1, sp, #4
 8006c66:	4620      	mov	r0, r4
 8006c68:	f002 fec0 	bl	80099ec <memcpy>
    return true;
 8006c6c:	e002      	b.n	8006c74 <ai_network_get_info+0x84>
  }

  return false;
 8006c6e:	2500      	movs	r5, #0
 8006c70:	e000      	b.n	8006c74 <ai_network_get_info+0x84>
 8006c72:	2500      	movs	r5, #0
}
 8006c74:	4628      	mov	r0, r5
 8006c76:	b01f      	add	sp, #124	; 0x7c
 8006c78:	bd30      	pop	{r4, r5, pc}
 8006c7a:	bf00      	nop
 8006c7c:	08188658 	.word	0x08188658
 8006c80:	08188660 	.word	0x08188660
 8006c84:	08188684 	.word	0x08188684
 8006c88:	081886a0 	.word	0x081886a0
 8006c8c:	081886b8 	.word	0x081886b8
 8006c90:	00202aa0 	.word	0x00202aa0

08006c94 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006c94:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8006c96:	f000 fc53 	bl	8007540 <ai_platform_network_get_error>
}
 8006c9a:	bd08      	pop	{r3, pc}

08006c9c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006c9c:	b500      	push	{lr}
 8006c9e:	b083      	sub	sp, #12
  return ai_platform_network_create(
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9301      	str	r3, [sp, #4]
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4a03      	ldr	r2, [pc, #12]	; (8006cb8 <ai_network_create+0x1c>)
 8006cac:	f000 fd64 	bl	8007778 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006cb0:	b003      	add	sp, #12
 8006cb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cb6:	bf00      	nop
 8006cb8:	20000104 	.word	0x20000104

08006cbc <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006cc2:	f000 fdb1 	bl	8007828 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	f000 80c8 	beq.w	8006e5c <ai_network_init+0x1a0>
  ai_ptr weights = AI_PTR(weights_buffer->data);
 8006ccc:	6932      	ldr	r2, [r6, #16]
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8006cce:	4b64      	ldr	r3, [pc, #400]	; (8006e60 <ai_network_init+0x1a4>)
 8006cd0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006cd2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006cd6:	6619      	str	r1, [r3, #96]	; 0x60
    dense_6_bias_array.data = AI_PTR(weights + 1539200);
 8006cd8:	f502 14bb 	add.w	r4, r2, #1531904	; 0x176000
 8006cdc:	f504 51e4 	add.w	r1, r4, #7296	; 0x1c80
 8006ce0:	6699      	str	r1, [r3, #104]	; 0x68
    dense_6_bias_array.data_start = AI_PTR(weights + 1539200);
 8006ce2:	66d9      	str	r1, [r3, #108]	; 0x6c
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8006ce4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006ce6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006cea:	6719      	str	r1, [r3, #112]	; 0x70
    dense_6_weights_array.data = AI_PTR(weights + 1535600);
 8006cec:	f504 6167 	add.w	r1, r4, #3696	; 0xe70
 8006cf0:	6799      	str	r1, [r3, #120]	; 0x78
    dense_6_weights_array.data_start = AI_PTR(weights + 1535600);
 8006cf2:	67d9      	str	r1, [r3, #124]	; 0x7c
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8006cf4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8006cf8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006cfc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    dense_5_bias_array.data = AI_PTR(weights + 1535240);
 8006d00:	f604 5408 	addw	r4, r4, #3336	; 0xd08
 8006d04:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
    dense_5_bias_array.data_start = AI_PTR(weights + 1535240);
 8006d08:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8006d0c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006d10:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006d14:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    dense_5_weights_array.data = AI_PTR(weights + 1499240);
 8006d18:	f502 11b7 	add.w	r1, r2, #1499136	; 0x16e000
 8006d1c:	3168      	adds	r1, #104	; 0x68
 8006d1e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    dense_5_weights_array.data_start = AI_PTR(weights + 1499240);
 8006d22:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8006d26:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8006d2a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006d2e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    dense_4_bias_array.data = AI_PTR(weights + 1498840);
 8006d32:	494c      	ldr	r1, [pc, #304]	; (8006e64 <ai_network_init+0x1a8>)
 8006d34:	4411      	add	r1, r2
 8006d36:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    dense_4_bias_array.data_start = AI_PTR(weights + 1498840);
 8006d3a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8006d3e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006d42:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006d46:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    dense_4_weights_array.data = AI_PTR(weights + 1454840);
 8006d4a:	4947      	ldr	r1, [pc, #284]	; (8006e68 <ai_network_init+0x1ac>)
 8006d4c:	4411      	add	r1, r2
 8006d4e:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
    dense_4_weights_array.data_start = AI_PTR(weights + 1454840);
 8006d52:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8006d56:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006d5a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006d5e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    dense_3_bias_array.data = AI_PTR(weights + 1454400);
 8006d62:	f502 11b1 	add.w	r1, r2, #1449984	; 0x162000
 8006d66:	f501 518a 	add.w	r1, r1, #4416	; 0x1140
 8006d6a:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    dense_3_bias_array.data_start = AI_PTR(weights + 1454400);
 8006d6e:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8006d72:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 8006d76:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006d7a:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
    dense_3_weights_array.data = AI_PTR(weights + 187200);
 8006d7e:	f502 3136 	add.w	r1, r2, #186368	; 0x2d800
 8006d82:	f501 7050 	add.w	r0, r1, #832	; 0x340
 8006d86:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
    dense_3_weights_array.data_start = AI_PTR(weights + 187200);
 8006d8a:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006d8e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8006d92:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8006d96:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
    conv2d_1_bias_array.data = AI_PTR(weights + 186880);
 8006d9a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8006d9e:	f8c3 10e8 	str.w	r1, [r3, #232]	; 0xe8
    conv2d_1_bias_array.data_start = AI_PTR(weights + 186880);
 8006da2:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006da6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8006daa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006dae:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    conv2d_1_weights_array.data = AI_PTR(weights + 2560);
 8006db2:	f502 6120 	add.w	r1, r2, #2560	; 0xa00
 8006db6:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
    conv2d_1_weights_array.data_start = AI_PTR(weights + 2560);
 8006dba:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8006dbe:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8006dc2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006dc6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    conv2d_0_bias_array.data = AI_PTR(weights + 2304);
 8006dca:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8006dce:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    conv2d_0_bias_array.data_start = AI_PTR(weights + 2304);
 8006dd2:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8006dd6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8006dda:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006dde:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    conv2d_0_weights_array.data = AI_PTR(weights + 0);
 8006de2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    conv2d_0_weights_array.data_start = AI_PTR(weights + 0);
 8006de6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_NETWORK_ACTIVATIONS_ALIGNMENT));
 8006dea:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8006dec:	3203      	adds	r2, #3
 8006dee:	f022 0203 	bic.w	r2, r2, #3
    conv2d_input_output_array.data = AI_PTR(NULL);
 8006df2:	2100      	movs	r1, #0
 8006df4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    conv2d_input_output_array.data_start = AI_PTR(NULL);
 8006df8:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
    conv2d_0_output_array.data = AI_PTR(activations + 2240);
 8006dfc:	f502 600c 	add.w	r0, r2, #2240	; 0x8c0
 8006e00:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
    conv2d_0_output_array.data_start = AI_PTR(activations + 2240);
 8006e04:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    conv2d_1_output_array.data = AI_PTR(activations + 0);
 8006e08:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    conv2d_1_output_array.data_start = AI_PTR(activations + 0);
 8006e0c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    dense_3_output_array.data = AI_PTR(activations + 11520);
 8006e10:	f502 5034 	add.w	r0, r2, #11520	; 0x2d00
 8006e14:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
    dense_3_output_array.data_start = AI_PTR(activations + 11520);
 8006e18:	f8c3 015c 	str.w	r0, [r3, #348]	; 0x15c
    nl_3_output_array.data = AI_PTR(activations + 0);
 8006e1c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    nl_3_output_array.data_start = AI_PTR(activations + 0);
 8006e20:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    dense_4_output_array.data = AI_PTR(activations + 440);
 8006e24:	f502 70dc 	add.w	r0, r2, #440	; 0x1b8
 8006e28:	f8c3 0178 	str.w	r0, [r3, #376]	; 0x178
    dense_4_output_array.data_start = AI_PTR(activations + 440);
 8006e2c:	f8c3 017c 	str.w	r0, [r3, #380]	; 0x17c
    nl_4_output_array.data = AI_PTR(activations + 0);
 8006e30:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    nl_4_output_array.data_start = AI_PTR(activations + 0);
 8006e34:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    dense_5_output_array.data = AI_PTR(activations + 400);
 8006e38:	f502 70c8 	add.w	r0, r2, #400	; 0x190
 8006e3c:	f8c3 0198 	str.w	r0, [r3, #408]	; 0x198
    dense_5_output_array.data_start = AI_PTR(activations + 400);
 8006e40:	f8c3 019c 	str.w	r0, [r3, #412]	; 0x19c
    nl_5_output_array.data = AI_PTR(activations + 0);
 8006e44:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    nl_5_output_array.data_start = AI_PTR(activations + 0);
 8006e48:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    dense_6_output_array.data = AI_PTR(NULL);
 8006e4c:	f8c3 11b8 	str.w	r1, [r3, #440]	; 0x1b8
    dense_6_output_array.data_start = AI_PTR(NULL);
 8006e50:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);

  ok &= ai_platform_network_post_init(network);
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 fd65 	bl	8007924 <ai_platform_network_post_init>

  return ok;
}
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
  if ( !net_ctx ) return false;
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e7fc      	b.n	8006e5a <ai_network_init+0x19e>
 8006e60:	20000104 	.word	0x20000104
 8006e64:	0016ded8 	.word	0x0016ded8
 8006e68:	001632f8 	.word	0x001632f8

08006e6c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006e6c:	b508      	push	{r3, lr}
  return ai_platform_network_process(network, input, output);
 8006e6e:	f000 fda1 	bl	80079b4 <ai_platform_network_process>
}
 8006e72:	bd08      	pop	{r3, pc}

08006e74 <ai_network_data_weights_get>:
    0xd6, 0xbd, 0xb6, 0x9c, 0x5a, 0x3e, 0xfd, 0xd6, 0xd6, 0x3c
  };

  return AI_HANDLE_PTR(s_network_weights);

}
 8006e74:	4800      	ldr	r0, [pc, #0]	; (8006e78 <ai_network_data_weights_get+0x4>)
 8006e76:	4770      	bx	lr
 8006e78:	080106fc 	.word	0x080106fc

08006e7c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8006e7c:	b508      	push	{r3, lr}
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8006e7e:	480d      	ldr	r0, [pc, #52]	; (8006eb4 <MX_SPI5_Init+0x38>)
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <MX_SPI5_Init+0x3c>)
 8006e82:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8006e84:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006e88:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006e8e:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e90:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e92:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8006e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e98:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e9a:	61c3      	str	r3, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006e9c:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8006e9e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ea0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8006ea2:	230a      	movs	r3, #10
 8006ea4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006ea6:	f7fd ff93 	bl	8004dd0 <HAL_SPI_Init>
 8006eaa:	b900      	cbnz	r0, 8006eae <MX_SPI5_Init+0x32>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8006eac:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006eae:	f7ff fe9d 	bl	8006bec <Error_Handler>
}
 8006eb2:	e7fb      	b.n	8006eac <MX_SPI5_Init+0x30>
 8006eb4:	2000d1b4 	.word	0x2000d1b4
 8006eb8:	40015000 	.word	0x40015000

08006ebc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006ebc:	b500      	push	{lr}
 8006ebe:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	9303      	str	r3, [sp, #12]
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	9305      	str	r3, [sp, #20]
 8006ec8:	9306      	str	r3, [sp, #24]
 8006eca:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI5)
 8006ecc:	6802      	ldr	r2, [r0, #0]
 8006ece:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <HAL_SPI_MspInit+0x68>)
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d002      	beq.n	8006eda <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8006ed4:	b009      	add	sp, #36	; 0x24
 8006ed6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006eda:	2200      	movs	r2, #0
 8006edc:	9201      	str	r2, [sp, #4]
 8006ede:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8006ee2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006ee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ee8:	6459      	str	r1, [r3, #68]	; 0x44
 8006eea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006eec:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8006ef0:	9101      	str	r1, [sp, #4]
 8006ef2:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ef4:	9202      	str	r2, [sp, #8]
 8006ef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ef8:	f041 0120 	orr.w	r1, r1, #32
 8006efc:	6319      	str	r1, [r3, #48]	; 0x30
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	9302      	str	r3, [sp, #8]
 8006f06:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8006f08:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006f0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0e:	2302      	movs	r3, #2
 8006f10:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f12:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f14:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006f16:	2305      	movs	r3, #5
 8006f18:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006f1a:	a903      	add	r1, sp, #12
 8006f1c:	4802      	ldr	r0, [pc, #8]	; (8006f28 <HAL_SPI_MspInit+0x6c>)
 8006f1e:	f7fc f85b 	bl	8002fd8 <HAL_GPIO_Init>
}
 8006f22:	e7d7      	b.n	8006ed4 <HAL_SPI_MspInit+0x18>
 8006f24:	40015000 	.word	0x40015000
 8006f28:	40021400 	.word	0x40021400

08006f2c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8006f2c:	b508      	push	{r3, lr}

  if(spiHandle->Instance==SPI5)
 8006f2e:	6802      	ldr	r2, [r0, #0]
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <HAL_SPI_MspDeInit+0x24>)
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d000      	beq.n	8006f38 <HAL_SPI_MspDeInit+0xc>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8006f36:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI5_CLK_DISABLE();
 8006f38:	4a06      	ldr	r2, [pc, #24]	; (8006f54 <HAL_SPI_MspDeInit+0x28>)
 8006f3a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006f3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f40:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8006f42:	f44f 7160 	mov.w	r1, #896	; 0x380
 8006f46:	4804      	ldr	r0, [pc, #16]	; (8006f58 <HAL_SPI_MspDeInit+0x2c>)
 8006f48:	f7fc f93e 	bl	80031c8 <HAL_GPIO_DeInit>
}
 8006f4c:	e7f3      	b.n	8006f36 <HAL_SPI_MspDeInit+0xa>
 8006f4e:	bf00      	nop
 8006f50:	40015000 	.word	0x40015000
 8006f54:	40023800 	.word	0x40023800
 8006f58:	40021400 	.word	0x40021400

08006f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f5c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f5e:	2100      	movs	r1, #0
 8006f60:	9100      	str	r1, [sp, #0]
 8006f62:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <HAL_MspInit+0x34>)
 8006f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f6a:	645a      	str	r2, [r3, #68]	; 0x44
 8006f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f6e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006f72:	9200      	str	r2, [sp, #0]
 8006f74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f76:	9101      	str	r1, [sp, #4]
 8006f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006f7e:	641a      	str	r2, [r3, #64]	; 0x40
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f8a:	b002      	add	sp, #8
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40023800 	.word	0x40023800

08006f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f94:	b510      	push	{r4, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2036      	movs	r0, #54	; 0x36
 8006f9e:	f7fb fd37 	bl	8002a10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006fa2:	2036      	movs	r0, #54	; 0x36
 8006fa4:	f7fb fd68 	bl	8002a78 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006fa8:	2400      	movs	r4, #0
 8006faa:	9401      	str	r4, [sp, #4]
 8006fac:	4b14      	ldr	r3, [pc, #80]	; (8007000 <HAL_InitTick+0x6c>)
 8006fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb0:	f042 0210 	orr.w	r2, r2, #16
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	f003 0310 	and.w	r3, r3, #16
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006fc0:	a902      	add	r1, sp, #8
 8006fc2:	a803      	add	r0, sp, #12
 8006fc4:	f7fd fc72 	bl	80048ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006fc8:	f7fd fc50 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8006fcc:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006fce:	480d      	ldr	r0, [pc, #52]	; (8007004 <HAL_InitTick+0x70>)
 8006fd0:	fba0 2303 	umull	r2, r3, r0, r3
 8006fd4:	0c9b      	lsrs	r3, r3, #18
 8006fd6:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006fd8:	480b      	ldr	r0, [pc, #44]	; (8007008 <HAL_InitTick+0x74>)
 8006fda:	4a0c      	ldr	r2, [pc, #48]	; (800700c <HAL_InitTick+0x78>)
 8006fdc:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006fde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006fe2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006fe4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8006fe6:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fe8:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006fea:	f7fe fbad 	bl	8005748 <HAL_TIM_Base_Init>
 8006fee:	b110      	cbz	r0, 8006ff6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8006ff0:	2001      	movs	r0, #1
}
 8006ff2:	b008      	add	sp, #32
 8006ff4:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8006ff6:	4804      	ldr	r0, [pc, #16]	; (8007008 <HAL_InitTick+0x74>)
 8006ff8:	f7fe fa3c 	bl	8005474 <HAL_TIM_Base_Start_IT>
 8006ffc:	e7f9      	b.n	8006ff2 <HAL_InitTick+0x5e>
 8006ffe:	bf00      	nop
 8007000:	40023800 	.word	0x40023800
 8007004:	431bde83 	.word	0x431bde83
 8007008:	2000d20c 	.word	0x2000d20c
 800700c:	40001000 	.word	0x40001000

08007010 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007010:	4770      	bx	lr

08007012 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007012:	e7fe      	b.n	8007012 <HardFault_Handler>

08007014 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007014:	e7fe      	b.n	8007014 <MemManage_Handler>

08007016 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007016:	e7fe      	b.n	8007016 <BusFault_Handler>

08007018 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007018:	e7fe      	b.n	8007018 <UsageFault_Handler>

0800701a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800701a:	4770      	bx	lr

0800701c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800701c:	4770      	bx	lr

0800701e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800701e:	4770      	bx	lr

08007020 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007020:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007022:	4802      	ldr	r0, [pc, #8]	; (800702c <TIM6_DAC_IRQHandler+0xc>)
 8007024:	f7fe fa6e 	bl	8005504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007028:	bd08      	pop	{r3, pc}
 800702a:	bf00      	nop
 800702c:	2000d20c 	.word	0x2000d20c

08007030 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007030:	2001      	movs	r0, #1
 8007032:	4770      	bx	lr

08007034 <_kill>:

int _kill(int pid, int sig)
{
 8007034:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007036:	f002 fca7 	bl	8009988 <__errno>
 800703a:	2316      	movs	r3, #22
 800703c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800703e:	f04f 30ff 	mov.w	r0, #4294967295
 8007042:	bd08      	pop	{r3, pc}

08007044 <_exit>:

void _exit (int status)
{
 8007044:	b508      	push	{r3, lr}
	_kill(status, -1);
 8007046:	f04f 31ff 	mov.w	r1, #4294967295
 800704a:	f7ff fff3 	bl	8007034 <_kill>
	while (1) {}		/* Make sure we hang here */
 800704e:	e7fe      	b.n	800704e <_exit+0xa>

08007050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	460c      	mov	r4, r1
 8007054:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007056:	2500      	movs	r5, #0
 8007058:	42b5      	cmp	r5, r6
 800705a:	da07      	bge.n	800706c <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 800705c:	f3af 8000 	nop.w
 8007060:	4621      	mov	r1, r4
 8007062:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007066:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8007068:	460c      	mov	r4, r1
 800706a:	e7f5      	b.n	8007058 <_read+0x8>
	}

return len;
}
 800706c:	4630      	mov	r0, r6
 800706e:	bd70      	pop	{r4, r5, r6, pc}

08007070 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	460c      	mov	r4, r1
 8007074:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007076:	2500      	movs	r5, #0
 8007078:	42b5      	cmp	r5, r6
 800707a:	da05      	bge.n	8007088 <_write+0x18>
	{
		__io_putchar(*ptr++);
 800707c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007080:	f7ff fac6 	bl	8006610 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007084:	3501      	adds	r5, #1
 8007086:	e7f7      	b.n	8007078 <_write+0x8>
	}
	return len;
}
 8007088:	4630      	mov	r0, r6
 800708a:	bd70      	pop	{r4, r5, r6, pc}

0800708c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800708c:	b508      	push	{r3, lr}
 800708e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007090:	4a0b      	ldr	r2, [pc, #44]	; (80070c0 <_sbrk+0x34>)
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	b142      	cbz	r2, 80070a8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007096:	4a0a      	ldr	r2, [pc, #40]	; (80070c0 <_sbrk+0x34>)
 8007098:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800709a:	4403      	add	r3, r0
 800709c:	466a      	mov	r2, sp
 800709e:	4293      	cmp	r3, r2
 80070a0:	d806      	bhi.n	80070b0 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80070a2:	4a07      	ldr	r2, [pc, #28]	; (80070c0 <_sbrk+0x34>)
 80070a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80070a6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80070a8:	4a05      	ldr	r2, [pc, #20]	; (80070c0 <_sbrk+0x34>)
 80070aa:	4906      	ldr	r1, [pc, #24]	; (80070c4 <_sbrk+0x38>)
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	e7f2      	b.n	8007096 <_sbrk+0xa>
		errno = ENOMEM;
 80070b0:	f002 fc6a 	bl	8009988 <__errno>
 80070b4:	230c      	movs	r3, #12
 80070b6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	e7f3      	b.n	80070a6 <_sbrk+0x1a>
 80070be:	bf00      	nop
 80070c0:	2000cf20 	.word	0x2000cf20
 80070c4:	2000d2f0 	.word	0x2000d2f0

080070c8 <_close>:

int _close(int file)
{
	return -1;
}
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	4770      	bx	lr

080070ce <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80070ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070d2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80070d4:	2000      	movs	r0, #0
 80070d6:	4770      	bx	lr

080070d8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80070d8:	2001      	movs	r0, #1
 80070da:	4770      	bx	lr

080070dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr

080070e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <SystemInit+0x18>)
 80070e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070e6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80070ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80070ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80070f2:	609a      	str	r2, [r3, #8]
#endif
}
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	e000ed00 	.word	0xe000ed00

080070fc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80070fc:	b500      	push	{lr}
 80070fe:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007100:	2300      	movs	r3, #0
 8007102:	9302      	str	r3, [sp, #8]
 8007104:	9303      	str	r3, [sp, #12]
 8007106:	9304      	str	r3, [sp, #16]
 8007108:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800710e:	4815      	ldr	r0, [pc, #84]	; (8007164 <MX_TIM1_Init+0x68>)
 8007110:	4a15      	ldr	r2, [pc, #84]	; (8007168 <MX_TIM1_Init+0x6c>)
 8007112:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8007114:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007116:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8007118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800711c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800711e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8007120:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007122:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007124:	f7fe fb10 	bl	8005748 <HAL_TIM_Base_Init>
 8007128:	b990      	cbnz	r0, 8007150 <MX_TIM1_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800712a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800712e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007130:	a902      	add	r1, sp, #8
 8007132:	480c      	ldr	r0, [pc, #48]	; (8007164 <MX_TIM1_Init+0x68>)
 8007134:	f7fe fb40 	bl	80057b8 <HAL_TIM_ConfigClockSource>
 8007138:	b968      	cbnz	r0, 8007156 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800713a:	2300      	movs	r3, #0
 800713c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800713e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007140:	4669      	mov	r1, sp
 8007142:	4808      	ldr	r0, [pc, #32]	; (8007164 <MX_TIM1_Init+0x68>)
 8007144:	f7fe fbb8 	bl	80058b8 <HAL_TIMEx_MasterConfigSynchronization>
 8007148:	b940      	cbnz	r0, 800715c <MX_TIM1_Init+0x60>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800714a:	b007      	add	sp, #28
 800714c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007150:	f7ff fd4c 	bl	8006bec <Error_Handler>
 8007154:	e7e9      	b.n	800712a <MX_TIM1_Init+0x2e>
    Error_Handler();
 8007156:	f7ff fd49 	bl	8006bec <Error_Handler>
 800715a:	e7ee      	b.n	800713a <MX_TIM1_Init+0x3e>
    Error_Handler();
 800715c:	f7ff fd46 	bl	8006bec <Error_Handler>
}
 8007160:	e7f3      	b.n	800714a <MX_TIM1_Init+0x4e>
 8007162:	bf00      	nop
 8007164:	2000d254 	.word	0x2000d254
 8007168:	40010000 	.word	0x40010000

0800716c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 800716c:	6802      	ldr	r2, [r0, #0]
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <HAL_TIM_Base_MspInit+0x28>)
 8007170:	429a      	cmp	r2, r3
 8007172:	d000      	beq.n	8007176 <HAL_TIM_Base_MspInit+0xa>
 8007174:	4770      	bx	lr
{
 8007176:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007178:	2300      	movs	r3, #0
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <HAL_TIM_Base_MspInit+0x2c>)
 800717e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007180:	f042 0201 	orr.w	r2, r2, #1
 8007184:	645a      	str	r2, [r3, #68]	; 0x44
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007190:	b002      	add	sp, #8
 8007192:	4770      	bx	lr
 8007194:	40010000 	.word	0x40010000
 8007198:	40023800 	.word	0x40023800

0800719c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800719c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800719e:	480a      	ldr	r0, [pc, #40]	; (80071c8 <MX_USART1_UART_Init+0x2c>)
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <MX_USART1_UART_Init+0x30>)
 80071a2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80071a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80071a8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80071aa:	2300      	movs	r3, #0
 80071ac:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80071ae:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80071b0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80071b2:	220c      	movs	r2, #12
 80071b4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071b6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80071b8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80071ba:	f7fe fc93 	bl	8005ae4 <HAL_UART_Init>
 80071be:	b900      	cbnz	r0, 80071c2 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80071c0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80071c2:	f7ff fd13 	bl	8006bec <Error_Handler>
}
 80071c6:	e7fb      	b.n	80071c0 <MX_USART1_UART_Init+0x24>
 80071c8:	2000d29c 	.word	0x2000d29c
 80071cc:	40011000 	.word	0x40011000

080071d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80071d0:	b500      	push	{lr}
 80071d2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071d4:	2300      	movs	r3, #0
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	9304      	str	r3, [sp, #16]
 80071da:	9305      	str	r3, [sp, #20]
 80071dc:	9306      	str	r3, [sp, #24]
 80071de:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 80071e0:	6802      	ldr	r2, [r0, #0]
 80071e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071e6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d002      	beq.n	80071f4 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80071ee:	b009      	add	sp, #36	; 0x24
 80071f0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80071f4:	2200      	movs	r2, #0
 80071f6:	9201      	str	r2, [sp, #4]
 80071f8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80071fc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80071fe:	f041 0110 	orr.w	r1, r1, #16
 8007202:	6459      	str	r1, [r3, #68]	; 0x44
 8007204:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007206:	f001 0110 	and.w	r1, r1, #16
 800720a:	9101      	str	r1, [sp, #4]
 800720c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800720e:	9202      	str	r2, [sp, #8]
 8007210:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007212:	f041 0101 	orr.w	r1, r1, #1
 8007216:	6319      	str	r1, [r3, #48]	; 0x30
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	9302      	str	r3, [sp, #8]
 8007220:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8007222:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007226:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007228:	2302      	movs	r3, #2
 800722a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800722e:	2303      	movs	r3, #3
 8007230:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007232:	2307      	movs	r3, #7
 8007234:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007236:	a903      	add	r1, sp, #12
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <HAL_UART_MspInit+0x70>)
 800723a:	f7fb fecd 	bl	8002fd8 <HAL_GPIO_Init>
}
 800723e:	e7d6      	b.n	80071ee <HAL_UART_MspInit+0x1e>
 8007240:	40020000 	.word	0x40020000

08007244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800727c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007248:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800724a:	e003      	b.n	8007254 <LoopCopyDataInit>

0800724c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800724c:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800724e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007250:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007252:	3104      	adds	r1, #4

08007254 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007254:	480b      	ldr	r0, [pc, #44]	; (8007284 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007258:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800725a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800725c:	d3f6      	bcc.n	800724c <CopyDataInit>
  ldr  r2, =_sbss
 800725e:	4a0b      	ldr	r2, [pc, #44]	; (800728c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007260:	e002      	b.n	8007268 <LoopFillZerobss>

08007262 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007262:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007264:	f842 3b04 	str.w	r3, [r2], #4

08007268 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007268:	4b09      	ldr	r3, [pc, #36]	; (8007290 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800726a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800726c:	d3f9      	bcc.n	8007262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800726e:	f7ff ff37 	bl	80070e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007272:	f002 fb8f 	bl	8009994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007276:	f7ff fae7 	bl	8006848 <main>
  bx  lr    
 800727a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800727c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007280:	08188ac4 	.word	0x08188ac4
  ldr  r0, =_sdata
 8007284:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007288:	20000d90 	.word	0x20000d90
  ldr  r2, =_sbss
 800728c:	20000d90 	.word	0x20000d90
  ldr  r3, = _ebss
 8007290:	2000d2f0 	.word	0x2000d2f0

08007294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007294:	e7fe      	b.n	8007294 <ADC_IRQHandler>

08007296 <_ai_platform_get_io_buffers_info>:
 8007296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729a:	2400      	movs	r4, #0
 800729c:	b083      	sub	sp, #12
 800729e:	4606      	mov	r6, r0
 80072a0:	4688      	mov	r8, r1
 80072a2:	46a3      	mov	fp, r4
 80072a4:	f04f 0a18 	mov.w	sl, #24
 80072a8:	f04f 0901 	mov.w	r9, #1
 80072ac:	b2a0      	uxth	r0, r4
 80072ae:	b936      	cbnz	r6, 80072be <_ai_platform_get_io_buffers_info+0x28>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d03b      	beq.n	800732c <_ai_platform_get_io_buffers_info+0x96>
 80072b4:	68b3      	ldr	r3, [r6, #8]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f8c8 3000 	str.w	r3, [r8]
 80072bc:	e036      	b.n	800732c <_ai_platform_get_io_buffers_info+0x96>
 80072be:	8833      	ldrh	r3, [r6, #0]
 80072c0:	429c      	cmp	r4, r3
 80072c2:	d2f5      	bcs.n	80072b0 <_ai_platform_get_io_buffers_info+0x1a>
 80072c4:	6873      	ldr	r3, [r6, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f2      	beq.n	80072b0 <_ai_platform_get_io_buffers_info+0x1a>
 80072ca:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	d0ee      	beq.n	80072b0 <_ai_platform_get_io_buffers_info+0x1a>
 80072d2:	68b3      	ldr	r3, [r6, #8]
 80072d4:	69aa      	ldr	r2, [r5, #24]
 80072d6:	6859      	ldr	r1, [r3, #4]
 80072d8:	6810      	ldr	r0, [r2, #0]
 80072da:	689f      	ldr	r7, [r3, #8]
 80072dc:	9101      	str	r1, [sp, #4]
 80072de:	f002 fae5 	bl	80098ac <ai_array_to_buffer_fmt>
 80072e2:	9901      	ldr	r1, [sp, #4]
 80072e4:	fb0a f304 	mul.w	r3, sl, r4
 80072e8:	18ca      	adds	r2, r1, r3
 80072ea:	50c8      	str	r0, [r1, r3]
 80072ec:	f8a2 9004 	strh.w	r9, [r2, #4]
 80072f0:	68eb      	ldr	r3, [r5, #12]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	80d3      	strh	r3, [r2, #6]
 80072f6:	68eb      	ldr	r3, [r5, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	8113      	strh	r3, [r2, #8]
 80072fc:	68eb      	ldr	r3, [r5, #12]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	60d3      	str	r3, [r2, #12]
 8007302:	69ab      	ldr	r3, [r5, #24]
 8007304:	00e1      	lsls	r1, r4, #3
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	6113      	str	r3, [r2, #16]
 800730a:	1878      	adds	r0, r7, r1
 800730c:	b150      	cbz	r0, 8007324 <_ai_platform_get_io_buffers_info+0x8e>
 800730e:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8007312:	682b      	ldr	r3, [r5, #0]
 8007314:	6043      	str	r3, [r0, #4]
 8007316:	b11b      	cbz	r3, 8007320 <_ai_platform_get_io_buffers_info+0x8a>
 8007318:	885b      	ldrh	r3, [r3, #2]
 800731a:	3300      	adds	r3, #0
 800731c:	bf18      	it	ne
 800731e:	2301      	movne	r3, #1
 8007320:	507b      	str	r3, [r7, r1]
 8007322:	b903      	cbnz	r3, 8007326 <_ai_platform_get_io_buffers_info+0x90>
 8007324:	2000      	movs	r0, #0
 8007326:	6150      	str	r0, [r2, #20]
 8007328:	3401      	adds	r4, #1
 800732a:	e7bf      	b.n	80072ac <_ai_platform_get_io_buffers_info+0x16>
 800732c:	b003      	add	sp, #12
 800732e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007332 <_platform_network_state_setup.isra.1>:
 8007332:	b430      	push	{r4, r5}
 8007334:	68dd      	ldr	r5, [r3, #12]
 8007336:	695c      	ldr	r4, [r3, #20]
 8007338:	68ed      	ldr	r5, [r5, #12]
 800733a:	68e4      	ldr	r4, [r4, #12]
 800733c:	fb04 f405 	mul.w	r4, r4, r5
 8007340:	6084      	str	r4, [r0, #8]
 8007342:	8809      	ldrh	r1, [r1, #0]
 8007344:	fb04 f401 	mul.w	r4, r4, r1
 8007348:	60c4      	str	r4, [r0, #12]
 800734a:	6811      	ldr	r1, [r2, #0]
 800734c:	6041      	str	r1, [r0, #4]
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	4414      	add	r4, r2
 8007352:	6004      	str	r4, [r0, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	6814      	ldr	r4, [r2, #0]
 8007358:	00a4      	lsls	r4, r4, #2
 800735a:	d407      	bmi.n	800736c <_platform_network_state_setup.isra.1+0x3a>
 800735c:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8007360:	1b64      	subs	r4, r4, r5
 8007362:	4421      	add	r1, r4
 8007364:	6091      	str	r1, [r2, #8]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	6842      	ldr	r2, [r0, #4]
 800736a:	60da      	str	r2, [r3, #12]
 800736c:	bc30      	pop	{r4, r5}
 800736e:	4770      	bx	lr

08007370 <ai_platform_runtime_get_revision>:
 8007370:	490a      	ldr	r1, [pc, #40]	; (800739c <ai_platform_runtime_get_revision+0x2c>)
 8007372:	4a0b      	ldr	r2, [pc, #44]	; (80073a0 <ai_platform_runtime_get_revision+0x30>)
 8007374:	680b      	ldr	r3, [r1, #0]
 8007376:	2001      	movs	r0, #1
 8007378:	f023 0301 	bic.w	r3, r3, #1
 800737c:	600b      	str	r3, [r1, #0]
 800737e:	4613      	mov	r3, r2
 8007380:	6010      	str	r0, [r2, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	2a00      	cmp	r2, #0
 8007386:	d1fc      	bne.n	8007382 <ai_platform_runtime_get_revision+0x12>
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <ai_platform_runtime_get_revision+0x34>)
 800738a:	4a07      	ldr	r2, [pc, #28]	; (80073a8 <ai_platform_runtime_get_revision+0x38>)
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4b06      	ldr	r3, [pc, #24]	; (80073ac <ai_platform_runtime_get_revision+0x3c>)
 8007392:	429a      	cmp	r2, r3
 8007394:	d000      	beq.n	8007398 <ai_platform_runtime_get_revision+0x28>
 8007396:	e7fe      	b.n	8007396 <ai_platform_runtime_get_revision+0x26>
 8007398:	4805      	ldr	r0, [pc, #20]	; (80073b0 <ai_platform_runtime_get_revision+0x40>)
 800739a:	4770      	bx	lr
 800739c:	e0002000 	.word	0xe0002000
 80073a0:	40023008 	.word	0x40023008
 80073a4:	40023000 	.word	0x40023000
 80073a8:	f407a5c2 	.word	0xf407a5c2
 80073ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80073b0:	081885f8 	.word	0x081885f8

080073b4 <ai_platform_runtime_get_version>:
 80073b4:	4913      	ldr	r1, [pc, #76]	; (8007404 <ai_platform_runtime_get_version+0x50>)
 80073b6:	4a14      	ldr	r2, [pc, #80]	; (8007408 <ai_platform_runtime_get_version+0x54>)
 80073b8:	680b      	ldr	r3, [r1, #0]
 80073ba:	2001      	movs	r0, #1
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	600b      	str	r3, [r1, #0]
 80073c2:	b082      	sub	sp, #8
 80073c4:	4613      	mov	r3, r2
 80073c6:	6010      	str	r0, [r2, #0]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d1fc      	bne.n	80073c8 <ai_platform_runtime_get_version+0x14>
 80073ce:	4b0f      	ldr	r3, [pc, #60]	; (800740c <ai_platform_runtime_get_version+0x58>)
 80073d0:	4a0f      	ldr	r2, [pc, #60]	; (8007410 <ai_platform_runtime_get_version+0x5c>)
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <ai_platform_runtime_get_version+0x60>)
 80073d8:	429a      	cmp	r2, r3
 80073da:	d000      	beq.n	80073de <ai_platform_runtime_get_version+0x2a>
 80073dc:	e7fe      	b.n	80073dc <ai_platform_runtime_get_version+0x28>
 80073de:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <ai_platform_runtime_get_version+0x64>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	f362 0007 	bfi	r0, r2, #0, #8
 80073e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80073ec:	f362 200f 	bfi	r0, r2, #8, #8
 80073f0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80073f4:	f362 4017 	bfi	r0, r2, #16, #8
 80073f8:	0e1b      	lsrs	r3, r3, #24
 80073fa:	f363 601f 	bfi	r0, r3, #24, #8
 80073fe:	b002      	add	sp, #8
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	e0002000 	.word	0xe0002000
 8007408:	40023008 	.word	0x40023008
 800740c:	40023000 	.word	0x40023000
 8007410:	f407a5c2 	.word	0xf407a5c2
 8007414:	b5e8b5cd 	.word	0xb5e8b5cd
 8007418:	081886c4 	.word	0x081886c4

0800741c <ai_platform_api_get_version>:
 800741c:	4913      	ldr	r1, [pc, #76]	; (800746c <ai_platform_api_get_version+0x50>)
 800741e:	4a14      	ldr	r2, [pc, #80]	; (8007470 <ai_platform_api_get_version+0x54>)
 8007420:	680b      	ldr	r3, [r1, #0]
 8007422:	2001      	movs	r0, #1
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	600b      	str	r3, [r1, #0]
 800742a:	b082      	sub	sp, #8
 800742c:	4613      	mov	r3, r2
 800742e:	6010      	str	r0, [r2, #0]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	2800      	cmp	r0, #0
 8007434:	d1fc      	bne.n	8007430 <ai_platform_api_get_version+0x14>
 8007436:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <ai_platform_api_get_version+0x58>)
 8007438:	4a0f      	ldr	r2, [pc, #60]	; (8007478 <ai_platform_api_get_version+0x5c>)
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	4b0f      	ldr	r3, [pc, #60]	; (800747c <ai_platform_api_get_version+0x60>)
 8007440:	429a      	cmp	r2, r3
 8007442:	d000      	beq.n	8007446 <ai_platform_api_get_version+0x2a>
 8007444:	e7fe      	b.n	8007444 <ai_platform_api_get_version+0x28>
 8007446:	4b0e      	ldr	r3, [pc, #56]	; (8007480 <ai_platform_api_get_version+0x64>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	b2da      	uxtb	r2, r3
 800744c:	f362 0007 	bfi	r0, r2, #0, #8
 8007450:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007454:	f362 200f 	bfi	r0, r2, #8, #8
 8007458:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800745c:	f362 4017 	bfi	r0, r2, #16, #8
 8007460:	0e1b      	lsrs	r3, r3, #24
 8007462:	f363 601f 	bfi	r0, r3, #24, #8
 8007466:	b002      	add	sp, #8
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	e0002000 	.word	0xe0002000
 8007470:	40023008 	.word	0x40023008
 8007474:	40023000 	.word	0x40023000
 8007478:	f407a5c2 	.word	0xf407a5c2
 800747c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007480:	081886c8 	.word	0x081886c8

08007484 <ai_platform_interface_api_get_version>:
 8007484:	4913      	ldr	r1, [pc, #76]	; (80074d4 <ai_platform_interface_api_get_version+0x50>)
 8007486:	4a14      	ldr	r2, [pc, #80]	; (80074d8 <ai_platform_interface_api_get_version+0x54>)
 8007488:	680b      	ldr	r3, [r1, #0]
 800748a:	2001      	movs	r0, #1
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	600b      	str	r3, [r1, #0]
 8007492:	b082      	sub	sp, #8
 8007494:	4613      	mov	r3, r2
 8007496:	6010      	str	r0, [r2, #0]
 8007498:	6818      	ldr	r0, [r3, #0]
 800749a:	2800      	cmp	r0, #0
 800749c:	d1fc      	bne.n	8007498 <ai_platform_interface_api_get_version+0x14>
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <ai_platform_interface_api_get_version+0x58>)
 80074a0:	4a0f      	ldr	r2, [pc, #60]	; (80074e0 <ai_platform_interface_api_get_version+0x5c>)
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <ai_platform_interface_api_get_version+0x60>)
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d000      	beq.n	80074ae <ai_platform_interface_api_get_version+0x2a>
 80074ac:	e7fe      	b.n	80074ac <ai_platform_interface_api_get_version+0x28>
 80074ae:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <ai_platform_interface_api_get_version+0x64>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	f362 0007 	bfi	r0, r2, #0, #8
 80074b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80074bc:	f362 200f 	bfi	r0, r2, #8, #8
 80074c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80074c4:	f362 4017 	bfi	r0, r2, #16, #8
 80074c8:	0e1b      	lsrs	r3, r3, #24
 80074ca:	f363 601f 	bfi	r0, r3, #24, #8
 80074ce:	b002      	add	sp, #8
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	e0002000 	.word	0xe0002000
 80074d8:	40023008 	.word	0x40023008
 80074dc:	40023000 	.word	0x40023000
 80074e0:	f407a5c2 	.word	0xf407a5c2
 80074e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80074e8:	081886cc 	.word	0x081886cc

080074ec <ai_platform_context_acquire>:
 80074ec:	b410      	push	{r4}
 80074ee:	b120      	cbz	r0, 80074fa <ai_platform_context_acquire+0xe>
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <ai_platform_context_acquire+0x3c>)
 80074f2:	6802      	ldr	r2, [r0, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	bf18      	it	ne
 80074f8:	2000      	movne	r0, #0
 80074fa:	490c      	ldr	r1, [pc, #48]	; (800752c <ai_platform_context_acquire+0x40>)
 80074fc:	4a0c      	ldr	r2, [pc, #48]	; (8007530 <ai_platform_context_acquire+0x44>)
 80074fe:	680b      	ldr	r3, [r1, #0]
 8007500:	2401      	movs	r4, #1
 8007502:	f023 0301 	bic.w	r3, r3, #1
 8007506:	600b      	str	r3, [r1, #0]
 8007508:	4613      	mov	r3, r2
 800750a:	6014      	str	r4, [r2, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	2a00      	cmp	r2, #0
 8007510:	d1fc      	bne.n	800750c <ai_platform_context_acquire+0x20>
 8007512:	4b08      	ldr	r3, [pc, #32]	; (8007534 <ai_platform_context_acquire+0x48>)
 8007514:	4a08      	ldr	r2, [pc, #32]	; (8007538 <ai_platform_context_acquire+0x4c>)
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4b08      	ldr	r3, [pc, #32]	; (800753c <ai_platform_context_acquire+0x50>)
 800751c:	429a      	cmp	r2, r3
 800751e:	d000      	beq.n	8007522 <ai_platform_context_acquire+0x36>
 8007520:	e7fe      	b.n	8007520 <ai_platform_context_acquire+0x34>
 8007522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	a1c00100 	.word	0xa1c00100
 800752c:	e0002000 	.word	0xe0002000
 8007530:	40023008 	.word	0x40023008
 8007534:	40023000 	.word	0x40023000
 8007538:	f407a5c2 	.word	0xf407a5c2
 800753c:	b5e8b5cd 	.word	0xb5e8b5cd

08007540 <ai_platform_network_get_error>:
 8007540:	b410      	push	{r4}
 8007542:	b120      	cbz	r0, 800754e <ai_platform_network_get_error+0xe>
 8007544:	4b11      	ldr	r3, [pc, #68]	; (800758c <ai_platform_network_get_error+0x4c>)
 8007546:	6802      	ldr	r2, [r0, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	bf18      	it	ne
 800754c:	2000      	movne	r0, #0
 800754e:	4910      	ldr	r1, [pc, #64]	; (8007590 <ai_platform_network_get_error+0x50>)
 8007550:	4a10      	ldr	r2, [pc, #64]	; (8007594 <ai_platform_network_get_error+0x54>)
 8007552:	680b      	ldr	r3, [r1, #0]
 8007554:	2401      	movs	r4, #1
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	600b      	str	r3, [r1, #0]
 800755c:	4613      	mov	r3, r2
 800755e:	6014      	str	r4, [r2, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	2a00      	cmp	r2, #0
 8007564:	d1fc      	bne.n	8007560 <ai_platform_network_get_error+0x20>
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <ai_platform_network_get_error+0x58>)
 8007568:	4a0c      	ldr	r2, [pc, #48]	; (800759c <ai_platform_network_get_error+0x5c>)
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <ai_platform_network_get_error+0x60>)
 8007570:	429a      	cmp	r2, r3
 8007572:	d000      	beq.n	8007576 <ai_platform_network_get_error+0x36>
 8007574:	e7fe      	b.n	8007574 <ai_platform_network_get_error+0x34>
 8007576:	b120      	cbz	r0, 8007582 <ai_platform_network_get_error+0x42>
 8007578:	3010      	adds	r0, #16
 800757a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800757e:	f000 bc25 	b.w	8007dcc <core_get_error>
 8007582:	f241 0010 	movw	r0, #4112	; 0x1010
 8007586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	a1c00100 	.word	0xa1c00100
 8007590:	e0002000 	.word	0xe0002000
 8007594:	40023008 	.word	0x40023008
 8007598:	40023000 	.word	0x40023000
 800759c:	f407a5c2 	.word	0xf407a5c2
 80075a0:	b5e8b5cd 	.word	0xb5e8b5cd

080075a4 <ai_platform_api_get_network_report>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	460e      	mov	r6, r1
 80075a8:	4604      	mov	r4, r0
 80075aa:	b120      	cbz	r0, 80075b6 <ai_platform_api_get_network_report+0x12>
 80075ac:	4b6b      	ldr	r3, [pc, #428]	; (800775c <ai_platform_api_get_network_report+0x1b8>)
 80075ae:	6802      	ldr	r2, [r0, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	bf18      	it	ne
 80075b4:	2400      	movne	r4, #0
 80075b6:	496a      	ldr	r1, [pc, #424]	; (8007760 <ai_platform_api_get_network_report+0x1bc>)
 80075b8:	4a6a      	ldr	r2, [pc, #424]	; (8007764 <ai_platform_api_get_network_report+0x1c0>)
 80075ba:	680b      	ldr	r3, [r1, #0]
 80075bc:	2001      	movs	r0, #1
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	600b      	str	r3, [r1, #0]
 80075c4:	4611      	mov	r1, r2
 80075c6:	6010      	str	r0, [r2, #0]
 80075c8:	680b      	ldr	r3, [r1, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1fc      	bne.n	80075c8 <ai_platform_api_get_network_report+0x24>
 80075ce:	4a66      	ldr	r2, [pc, #408]	; (8007768 <ai_platform_api_get_network_report+0x1c4>)
 80075d0:	4966      	ldr	r1, [pc, #408]	; (800776c <ai_platform_api_get_network_report+0x1c8>)
 80075d2:	6011      	str	r1, [r2, #0]
 80075d4:	6811      	ldr	r1, [r2, #0]
 80075d6:	4a66      	ldr	r2, [pc, #408]	; (8007770 <ai_platform_api_get_network_report+0x1cc>)
 80075d8:	4291      	cmp	r1, r2
 80075da:	d000      	beq.n	80075de <ai_platform_api_get_network_report+0x3a>
 80075dc:	e7fe      	b.n	80075dc <ai_platform_api_get_network_report+0x38>
 80075de:	2c00      	cmp	r4, #0
 80075e0:	d061      	beq.n	80076a6 <ai_platform_api_get_network_report+0x102>
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	d061      	beq.n	80076aa <ai_platform_api_get_network_report+0x106>
 80075e6:	66f3      	str	r3, [r6, #108]	; 0x6c
 80075e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80075ea:	2a00      	cmp	r2, #0
 80075ec:	d055      	beq.n	800769a <ai_platform_api_get_network_report+0xf6>
 80075ee:	2301      	movs	r3, #1
 80075f0:	66f3      	str	r3, [r6, #108]	; 0x6c
 80075f2:	68d3      	ldr	r3, [r2, #12]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d00c      	beq.n	8007612 <ai_platform_api_get_network_report+0x6e>
 80075f8:	b15b      	cbz	r3, 8007612 <ai_platform_api_get_network_report+0x6e>
 80075fa:	2202      	movs	r2, #2
 80075fc:	e003      	b.n	8007606 <ai_platform_api_get_network_report+0x62>
 80075fe:	1c50      	adds	r0, r2, #1
 8007600:	460b      	mov	r3, r1
 8007602:	b121      	cbz	r1, 800760e <ai_platform_api_get_network_report+0x6a>
 8007604:	4602      	mov	r2, r0
 8007606:	66f2      	str	r2, [r6, #108]	; 0x6c
 8007608:	68d9      	ldr	r1, [r3, #12]
 800760a:	4299      	cmp	r1, r3
 800760c:	d1f7      	bne.n	80075fe <ai_platform_api_get_network_report+0x5a>
 800760e:	2a00      	cmp	r2, #0
 8007610:	d043      	beq.n	800769a <ai_platform_api_get_network_report+0xf6>
 8007612:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8007616:	b100      	cbz	r0, 800761a <ai_platform_api_get_network_report+0x76>
 8007618:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800761a:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800761e:	f7ff fe3a 	bl	8007296 <_ai_platform_get_io_buffers_info>
 8007622:	4605      	mov	r5, r0
 8007624:	8630      	strh	r0, [r6, #48]	; 0x30
 8007626:	2800      	cmp	r0, #0
 8007628:	d05e      	beq.n	80076e8 <ai_platform_api_get_network_report+0x144>
 800762a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800762e:	2b01      	cmp	r3, #1
 8007630:	bf8a      	itet	hi
 8007632:	6ce0      	ldrhi	r0, [r4, #76]	; 0x4c
 8007634:	2000      	movls	r0, #0
 8007636:	300c      	addhi	r0, #12
 8007638:	f106 0138 	add.w	r1, r6, #56	; 0x38
 800763c:	f7ff fe2b 	bl	8007296 <_ai_platform_get_io_buffers_info>
 8007640:	4605      	mov	r5, r0
 8007642:	8670      	strh	r0, [r6, #50]	; 0x32
 8007644:	2800      	cmp	r0, #0
 8007646:	d047      	beq.n	80076d8 <ai_platform_api_get_network_report+0x134>
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	6733      	str	r3, [r6, #112]	; 0x70
 800764c:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8007650:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007652:	f106 053c 	add.w	r5, r6, #60	; 0x3c
 8007656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007658:	e897 0003 	ldmia.w	r7, {r0, r1}
 800765c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007660:	3418      	adds	r4, #24
 8007662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007664:	f106 0554 	add.w	r5, r6, #84	; 0x54
 8007668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800766a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800766e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007672:	4a3b      	ldr	r2, [pc, #236]	; (8007760 <ai_platform_api_get_network_report+0x1bc>)
 8007674:	493b      	ldr	r1, [pc, #236]	; (8007764 <ai_platform_api_get_network_report+0x1c0>)
 8007676:	6813      	ldr	r3, [r2, #0]
 8007678:	2001      	movs	r0, #1
 800767a:	f023 0301 	bic.w	r3, r3, #1
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	460a      	mov	r2, r1
 8007682:	6008      	str	r0, [r1, #0]
 8007684:	6813      	ldr	r3, [r2, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1fc      	bne.n	8007684 <ai_platform_api_get_network_report+0xe0>
 800768a:	4b37      	ldr	r3, [pc, #220]	; (8007768 <ai_platform_api_get_network_report+0x1c4>)
 800768c:	4937      	ldr	r1, [pc, #220]	; (800776c <ai_platform_api_get_network_report+0x1c8>)
 800768e:	6019      	str	r1, [r3, #0]
 8007690:	6819      	ldr	r1, [r3, #0]
 8007692:	4b37      	ldr	r3, [pc, #220]	; (8007770 <ai_platform_api_get_network_report+0x1cc>)
 8007694:	4299      	cmp	r1, r3
 8007696:	d00a      	beq.n	80076ae <ai_platform_api_get_network_report+0x10a>
 8007698:	e7fe      	b.n	8007698 <ai_platform_api_get_network_report+0xf4>
 800769a:	f104 0010 	add.w	r0, r4, #16
 800769e:	2218      	movs	r2, #24
 80076a0:	2111      	movs	r1, #17
 80076a2:	f000 fb99 	bl	8007dd8 <core_set_error>
 80076a6:	2000      	movs	r0, #0
 80076a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076aa:	4630      	mov	r0, r6
 80076ac:	e7fc      	b.n	80076a8 <ai_platform_api_get_network_report+0x104>
 80076ae:	4b31      	ldr	r3, [pc, #196]	; (8007774 <ai_platform_api_get_network_report+0x1d0>)
 80076b0:	482b      	ldr	r0, [pc, #172]	; (8007760 <ai_platform_api_get_network_report+0x1bc>)
 80076b2:	6133      	str	r3, [r6, #16]
 80076b4:	6803      	ldr	r3, [r0, #0]
 80076b6:	492b      	ldr	r1, [pc, #172]	; (8007764 <ai_platform_api_get_network_report+0x1c0>)
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	2401      	movs	r4, #1
 80076be:	6003      	str	r3, [r0, #0]
 80076c0:	6014      	str	r4, [r2, #0]
 80076c2:	680b      	ldr	r3, [r1, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1fc      	bne.n	80076c2 <ai_platform_api_get_network_report+0x11e>
 80076c8:	4b27      	ldr	r3, [pc, #156]	; (8007768 <ai_platform_api_get_network_report+0x1c4>)
 80076ca:	4a28      	ldr	r2, [pc, #160]	; (800776c <ai_platform_api_get_network_report+0x1c8>)
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	4b27      	ldr	r3, [pc, #156]	; (8007770 <ai_platform_api_get_network_report+0x1cc>)
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d010      	beq.n	80076f8 <ai_platform_api_get_network_report+0x154>
 80076d6:	e7fe      	b.n	80076d6 <ai_platform_api_get_network_report+0x132>
 80076d8:	f104 0010 	add.w	r0, r4, #16
 80076dc:	2218      	movs	r2, #24
 80076de:	2113      	movs	r1, #19
 80076e0:	f000 fb7a 	bl	8007dd8 <core_set_error>
 80076e4:	4628      	mov	r0, r5
 80076e6:	e7df      	b.n	80076a8 <ai_platform_api_get_network_report+0x104>
 80076e8:	f104 0010 	add.w	r0, r4, #16
 80076ec:	2218      	movs	r2, #24
 80076ee:	2112      	movs	r1, #18
 80076f0:	f000 fb72 	bl	8007dd8 <core_set_error>
 80076f4:	4628      	mov	r0, r5
 80076f6:	e7d7      	b.n	80076a8 <ai_platform_api_get_network_report+0x104>
 80076f8:	f240 2305 	movw	r3, #517	; 0x205
 80076fc:	4818      	ldr	r0, [pc, #96]	; (8007760 <ai_platform_api_get_network_report+0x1bc>)
 80076fe:	6173      	str	r3, [r6, #20]
 8007700:	6803      	ldr	r3, [r0, #0]
 8007702:	4a18      	ldr	r2, [pc, #96]	; (8007764 <ai_platform_api_get_network_report+0x1c0>)
 8007704:	f023 0301 	bic.w	r3, r3, #1
 8007708:	2401      	movs	r4, #1
 800770a:	6003      	str	r3, [r0, #0]
 800770c:	600c      	str	r4, [r1, #0]
 800770e:	6813      	ldr	r3, [r2, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1fc      	bne.n	800770e <ai_platform_api_get_network_report+0x16a>
 8007714:	4b14      	ldr	r3, [pc, #80]	; (8007768 <ai_platform_api_get_network_report+0x1c4>)
 8007716:	4915      	ldr	r1, [pc, #84]	; (800776c <ai_platform_api_get_network_report+0x1c8>)
 8007718:	6019      	str	r1, [r3, #0]
 800771a:	6819      	ldr	r1, [r3, #0]
 800771c:	4b14      	ldr	r3, [pc, #80]	; (8007770 <ai_platform_api_get_network_report+0x1cc>)
 800771e:	4299      	cmp	r1, r3
 8007720:	d000      	beq.n	8007724 <ai_platform_api_get_network_report+0x180>
 8007722:	e7fe      	b.n	8007722 <ai_platform_api_get_network_report+0x17e>
 8007724:	f240 1301 	movw	r3, #257	; 0x101
 8007728:	490d      	ldr	r1, [pc, #52]	; (8007760 <ai_platform_api_get_network_report+0x1bc>)
 800772a:	6273      	str	r3, [r6, #36]	; 0x24
 800772c:	680b      	ldr	r3, [r1, #0]
 800772e:	4c0d      	ldr	r4, [pc, #52]	; (8007764 <ai_platform_api_get_network_report+0x1c0>)
 8007730:	f023 0301 	bic.w	r3, r3, #1
 8007734:	2001      	movs	r0, #1
 8007736:	600b      	str	r3, [r1, #0]
 8007738:	6010      	str	r0, [r2, #0]
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1fc      	bne.n	800773a <ai_platform_api_get_network_report+0x196>
 8007740:	4b09      	ldr	r3, [pc, #36]	; (8007768 <ai_platform_api_get_network_report+0x1c4>)
 8007742:	4a0a      	ldr	r2, [pc, #40]	; (800776c <ai_platform_api_get_network_report+0x1c8>)
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	4b09      	ldr	r3, [pc, #36]	; (8007770 <ai_platform_api_get_network_report+0x1cc>)
 800774a:	429a      	cmp	r2, r3
 800774c:	d000      	beq.n	8007750 <ai_platform_api_get_network_report+0x1ac>
 800774e:	e7fe      	b.n	800774e <ai_platform_api_get_network_report+0x1aa>
 8007750:	f240 4301 	movw	r3, #1025	; 0x401
 8007754:	62b3      	str	r3, [r6, #40]	; 0x28
 8007756:	2001      	movs	r0, #1
 8007758:	e7a6      	b.n	80076a8 <ai_platform_api_get_network_report+0x104>
 800775a:	bf00      	nop
 800775c:	a1c00100 	.word	0xa1c00100
 8007760:	e0002000 	.word	0xe0002000
 8007764:	40023008 	.word	0x40023008
 8007768:	40023000 	.word	0x40023000
 800776c:	f407a5c2 	.word	0xf407a5c2
 8007770:	b5e8b5cd 	.word	0xb5e8b5cd
 8007774:	081885f8 	.word	0x081885f8

08007778 <ai_platform_network_create>:
 8007778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777c:	4e23      	ldr	r6, [pc, #140]	; (800780c <ai_platform_network_create+0x94>)
 800777e:	4924      	ldr	r1, [pc, #144]	; (8007810 <ai_platform_network_create+0x98>)
 8007780:	6835      	ldr	r5, [r6, #0]
 8007782:	b082      	sub	sp, #8
 8007784:	f025 0501 	bic.w	r5, r5, #1
 8007788:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800778c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8007790:	6035      	str	r5, [r6, #0]
 8007792:	2501      	movs	r5, #1
 8007794:	600d      	str	r5, [r1, #0]
 8007796:	680d      	ldr	r5, [r1, #0]
 8007798:	2d00      	cmp	r5, #0
 800779a:	d1fc      	bne.n	8007796 <ai_platform_network_create+0x1e>
 800779c:	491d      	ldr	r1, [pc, #116]	; (8007814 <ai_platform_network_create+0x9c>)
 800779e:	4e1e      	ldr	r6, [pc, #120]	; (8007818 <ai_platform_network_create+0xa0>)
 80077a0:	600e      	str	r6, [r1, #0]
 80077a2:	680e      	ldr	r6, [r1, #0]
 80077a4:	491d      	ldr	r1, [pc, #116]	; (800781c <ai_platform_network_create+0xa4>)
 80077a6:	428e      	cmp	r6, r1
 80077a8:	d000      	beq.n	80077ac <ai_platform_network_create+0x34>
 80077aa:	e7fe      	b.n	80077aa <ai_platform_network_create+0x32>
 80077ac:	b1d0      	cbz	r0, 80077e4 <ai_platform_network_create+0x6c>
 80077ae:	4698      	mov	r8, r3
 80077b0:	4613      	mov	r3, r2
 80077b2:	4a1b      	ldr	r2, [pc, #108]	; (8007820 <ai_platform_network_create+0xa8>)
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	6003      	str	r3, [r0, #0]
 80077b8:	4606      	mov	r6, r0
 80077ba:	f000 fb05 	bl	8007dc8 <core_init>
 80077be:	b1b0      	cbz	r0, 80077ee <ai_platform_network_create+0x76>
 80077c0:	0223      	lsls	r3, r4, #8
 80077c2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077c6:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80077ca:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80077ce:	d910      	bls.n	80077f2 <ai_platform_network_create+0x7a>
 80077d0:	2201      	movs	r2, #1
 80077d2:	2300      	movs	r3, #0
 80077d4:	6033      	str	r3, [r6, #0]
 80077d6:	2310      	movs	r3, #16
 80077d8:	2000      	movs	r0, #0
 80077da:	f362 0007 	bfi	r0, r2, #0, #8
 80077de:	f363 201f 	bfi	r0, r3, #8, #24
 80077e2:	e001      	b.n	80077e8 <ai_platform_network_create+0x70>
 80077e4:	f241 0010 	movw	r0, #4112	; 0x1010
 80077e8:	b002      	add	sp, #8
 80077ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ee:	2230      	movs	r2, #48	; 0x30
 80077f0:	e7ef      	b.n	80077d2 <ai_platform_network_create+0x5a>
 80077f2:	a802      	add	r0, sp, #8
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <ai_platform_network_create+0xac>)
 80077f6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80077fa:	f001 fff3 	bl	80097e4 <ai_check_custom_types>
 80077fe:	b110      	cbz	r0, 8007806 <ai_platform_network_create+0x8e>
 8007800:	462b      	mov	r3, r5
 8007802:	462a      	mov	r2, r5
 8007804:	e7e8      	b.n	80077d8 <ai_platform_network_create+0x60>
 8007806:	2202      	movs	r2, #2
 8007808:	e7e3      	b.n	80077d2 <ai_platform_network_create+0x5a>
 800780a:	bf00      	nop
 800780c:	e0002000 	.word	0xe0002000
 8007810:	40023008 	.word	0x40023008
 8007814:	40023000 	.word	0x40023000
 8007818:	f407a5c2 	.word	0xf407a5c2
 800781c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007820:	a1c00100 	.word	0xa1c00100
 8007824:	84048403 	.word	0x84048403

08007828 <ai_platform_network_init>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	460c      	mov	r4, r1
 800782c:	4605      	mov	r5, r0
 800782e:	b120      	cbz	r0, 800783a <ai_platform_network_init+0x12>
 8007830:	4b36      	ldr	r3, [pc, #216]	; (800790c <ai_platform_network_init+0xe4>)
 8007832:	6802      	ldr	r2, [r0, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	bf18      	it	ne
 8007838:	2500      	movne	r5, #0
 800783a:	4935      	ldr	r1, [pc, #212]	; (8007910 <ai_platform_network_init+0xe8>)
 800783c:	4a35      	ldr	r2, [pc, #212]	; (8007914 <ai_platform_network_init+0xec>)
 800783e:	680b      	ldr	r3, [r1, #0]
 8007840:	2001      	movs	r0, #1
 8007842:	f023 0301 	bic.w	r3, r3, #1
 8007846:	600b      	str	r3, [r1, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	6010      	str	r0, [r2, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	2a00      	cmp	r2, #0
 8007850:	d1fc      	bne.n	800784c <ai_platform_network_init+0x24>
 8007852:	4b31      	ldr	r3, [pc, #196]	; (8007918 <ai_platform_network_init+0xf0>)
 8007854:	4a31      	ldr	r2, [pc, #196]	; (800791c <ai_platform_network_init+0xf4>)
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b31      	ldr	r3, [pc, #196]	; (8007920 <ai_platform_network_init+0xf8>)
 800785c:	429a      	cmp	r2, r3
 800785e:	d000      	beq.n	8007862 <ai_platform_network_init+0x3a>
 8007860:	e7fe      	b.n	8007860 <ai_platform_network_init+0x38>
 8007862:	b33d      	cbz	r5, 80078b4 <ai_platform_network_init+0x8c>
 8007864:	b344      	cbz	r4, 80078b8 <ai_platform_network_init+0x90>
 8007866:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8007868:	6926      	ldr	r6, [r4, #16]
 800786a:	2f00      	cmp	r7, #0
 800786c:	d03d      	beq.n	80078ea <ai_platform_network_init+0xc2>
 800786e:	b35e      	cbz	r6, 80078c8 <ai_platform_network_init+0xa0>
 8007870:	4627      	mov	r7, r4
 8007872:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007874:	f105 0618 	add.w	r6, r5, #24
 8007878:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800787a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800787e:	e886 0003 	stmia.w	r6, {r0, r1}
 8007882:	3418      	adds	r4, #24
 8007884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007886:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800788a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800788c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007890:	e886 0003 	stmia.w	r6, {r0, r1}
 8007894:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8007896:	2303      	movs	r3, #3
 8007898:	60eb      	str	r3, [r5, #12]
 800789a:	b15a      	cbz	r2, 80078b4 <ai_platform_network_init+0x8c>
 800789c:	68d3      	ldr	r3, [r2, #12]
 800789e:	6095      	str	r5, [r2, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d007      	beq.n	80078b4 <ai_platform_network_init+0x8c>
 80078a4:	b133      	cbz	r3, 80078b4 <ai_platform_network_init+0x8c>
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	609d      	str	r5, [r3, #8]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d002      	beq.n	80078b4 <ai_platform_network_init+0x8c>
 80078ae:	4613      	mov	r3, r2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f8      	bne.n	80078a6 <ai_platform_network_init+0x7e>
 80078b4:	4628      	mov	r0, r5
 80078b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b8:	f105 0010 	add.w	r0, r5, #16
 80078bc:	2211      	movs	r2, #17
 80078be:	2110      	movs	r1, #16
 80078c0:	f000 fa8a 	bl	8007dd8 <core_set_error>
 80078c4:	4625      	mov	r5, r4
 80078c6:	e7f5      	b.n	80078b4 <ai_platform_network_init+0x8c>
 80078c8:	8921      	ldrh	r1, [r4, #8]
 80078ca:	88e2      	ldrh	r2, [r4, #6]
 80078cc:	68e3      	ldr	r3, [r4, #12]
 80078ce:	fb02 f201 	mul.w	r2, r2, r1
 80078d2:	fb03 f302 	mul.w	r3, r3, r2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0ca      	beq.n	8007870 <ai_platform_network_init+0x48>
 80078da:	f105 0010 	add.w	r0, r5, #16
 80078de:	2212      	movs	r2, #18
 80078e0:	2110      	movs	r1, #16
 80078e2:	f000 fa79 	bl	8007dd8 <core_set_error>
 80078e6:	4635      	mov	r5, r6
 80078e8:	e7e4      	b.n	80078b4 <ai_platform_network_init+0x8c>
 80078ea:	8c21      	ldrh	r1, [r4, #32]
 80078ec:	8be2      	ldrh	r2, [r4, #30]
 80078ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078f0:	fb02 f201 	mul.w	r2, r2, r1
 80078f4:	fb03 f302 	mul.w	r3, r3, r2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0b8      	beq.n	800786e <ai_platform_network_init+0x46>
 80078fc:	f105 0010 	add.w	r0, r5, #16
 8007900:	2213      	movs	r2, #19
 8007902:	2110      	movs	r1, #16
 8007904:	f000 fa68 	bl	8007dd8 <core_set_error>
 8007908:	463d      	mov	r5, r7
 800790a:	e7d3      	b.n	80078b4 <ai_platform_network_init+0x8c>
 800790c:	a1c00100 	.word	0xa1c00100
 8007910:	e0002000 	.word	0xe0002000
 8007914:	40023008 	.word	0x40023008
 8007918:	40023000 	.word	0x40023000
 800791c:	f407a5c2 	.word	0xf407a5c2
 8007920:	b5e8b5cd 	.word	0xb5e8b5cd

08007924 <ai_platform_network_post_init>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4604      	mov	r4, r0
 8007928:	b120      	cbz	r0, 8007934 <ai_platform_network_post_init+0x10>
 800792a:	4b1c      	ldr	r3, [pc, #112]	; (800799c <ai_platform_network_post_init+0x78>)
 800792c:	6802      	ldr	r2, [r0, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	bf18      	it	ne
 8007932:	2400      	movne	r4, #0
 8007934:	491a      	ldr	r1, [pc, #104]	; (80079a0 <ai_platform_network_post_init+0x7c>)
 8007936:	4a1b      	ldr	r2, [pc, #108]	; (80079a4 <ai_platform_network_post_init+0x80>)
 8007938:	680b      	ldr	r3, [r1, #0]
 800793a:	2001      	movs	r0, #1
 800793c:	f023 0301 	bic.w	r3, r3, #1
 8007940:	600b      	str	r3, [r1, #0]
 8007942:	4613      	mov	r3, r2
 8007944:	6010      	str	r0, [r2, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	2a00      	cmp	r2, #0
 800794a:	d1fc      	bne.n	8007946 <ai_platform_network_post_init+0x22>
 800794c:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <ai_platform_network_post_init+0x84>)
 800794e:	4a17      	ldr	r2, [pc, #92]	; (80079ac <ai_platform_network_post_init+0x88>)
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <ai_platform_network_post_init+0x8c>)
 8007956:	429a      	cmp	r2, r3
 8007958:	d000      	beq.n	800795c <ai_platform_network_post_init+0x38>
 800795a:	e7fe      	b.n	800795a <ai_platform_network_post_init+0x36>
 800795c:	b1a4      	cbz	r4, 8007988 <ai_platform_network_post_init+0x64>
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	f013 0502 	ands.w	r5, r3, #2
 8007964:	d012      	beq.n	800798c <ai_platform_network_post_init+0x68>
 8007966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007968:	b163      	cbz	r3, 8007984 <ai_platform_network_post_init+0x60>
 800796a:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800796c:	b91d      	cbnz	r5, 8007976 <ai_platform_network_post_init+0x52>
 800796e:	e009      	b.n	8007984 <ai_platform_network_post_init+0x60>
 8007970:	461d      	mov	r5, r3
 8007972:	b13b      	cbz	r3, 8007984 <ai_platform_network_post_init+0x60>
 8007974:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007976:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007978:	4629      	mov	r1, r5
 800797a:	2000      	movs	r0, #0
 800797c:	4798      	blx	r3
 800797e:	68eb      	ldr	r3, [r5, #12]
 8007980:	42ab      	cmp	r3, r5
 8007982:	d1f5      	bne.n	8007970 <ai_platform_network_post_init+0x4c>
 8007984:	2001      	movs	r0, #1
 8007986:	bd38      	pop	{r3, r4, r5, pc}
 8007988:	4620      	mov	r0, r4
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	f104 0010 	add.w	r0, r4, #16
 8007990:	2210      	movs	r2, #16
 8007992:	2111      	movs	r1, #17
 8007994:	f000 fa20 	bl	8007dd8 <core_set_error>
 8007998:	4628      	mov	r0, r5
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	a1c00100 	.word	0xa1c00100
 80079a0:	e0002000 	.word	0xe0002000
 80079a4:	40023008 	.word	0x40023008
 80079a8:	40023000 	.word	0x40023000
 80079ac:	f407a5c2 	.word	0xf407a5c2
 80079b0:	b5e8b5cd 	.word	0xb5e8b5cd

080079b4 <ai_platform_network_process>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	b083      	sub	sp, #12
 80079ba:	4604      	mov	r4, r0
 80079bc:	9201      	str	r2, [sp, #4]
 80079be:	b120      	cbz	r0, 80079ca <ai_platform_network_process+0x16>
 80079c0:	4ba5      	ldr	r3, [pc, #660]	; (8007c58 <ai_platform_network_process+0x2a4>)
 80079c2:	6802      	ldr	r2, [r0, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	bf18      	it	ne
 80079c8:	2400      	movne	r4, #0
 80079ca:	48a4      	ldr	r0, [pc, #656]	; (8007c5c <ai_platform_network_process+0x2a8>)
 80079cc:	4ba4      	ldr	r3, [pc, #656]	; (8007c60 <ai_platform_network_process+0x2ac>)
 80079ce:	6802      	ldr	r2, [r0, #0]
 80079d0:	f022 0201 	bic.w	r2, r2, #1
 80079d4:	6002      	str	r2, [r0, #0]
 80079d6:	2201      	movs	r2, #1
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	2a00      	cmp	r2, #0
 80079de:	d1fc      	bne.n	80079da <ai_platform_network_process+0x26>
 80079e0:	4ba0      	ldr	r3, [pc, #640]	; (8007c64 <ai_platform_network_process+0x2b0>)
 80079e2:	4aa1      	ldr	r2, [pc, #644]	; (8007c68 <ai_platform_network_process+0x2b4>)
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4ba0      	ldr	r3, [pc, #640]	; (8007c6c <ai_platform_network_process+0x2b8>)
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d000      	beq.n	80079f0 <ai_platform_network_process+0x3c>
 80079ee:	e7fe      	b.n	80079ee <ai_platform_network_process+0x3a>
 80079f0:	2c00      	cmp	r4, #0
 80079f2:	d066      	beq.n	8007ac2 <ai_platform_network_process+0x10e>
 80079f4:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80079f8:	b107      	cbz	r7, 80079fc <ai_platform_network_process+0x48>
 80079fa:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80079fc:	68e3      	ldr	r3, [r4, #12]
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2600      	movs	r6, #0
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	6166      	str	r6, [r4, #20]
 8007a08:	f040 80fe 	bne.w	8007c08 <ai_platform_network_process+0x254>
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	d07f      	beq.n	8007b10 <ai_platform_network_process+0x15c>
 8007a10:	2f00      	cmp	r7, #0
 8007a12:	d07d      	beq.n	8007b10 <ai_platform_network_process+0x15c>
 8007a14:	883b      	ldrh	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d07a      	beq.n	8007b10 <ai_platform_network_process+0x15c>
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	46a0      	mov	r8, r4
 8007a1e:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8007a22:	429e      	cmp	r6, r3
 8007a24:	d27d      	bcs.n	8007b22 <ai_platform_network_process+0x16e>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d07a      	beq.n	8007b22 <ai_platform_network_process+0x16e>
 8007a2c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8007a30:	2c00      	cmp	r4, #0
 8007a32:	d076      	beq.n	8007b22 <ai_platform_network_process+0x16e>
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8007a3c:	d067      	beq.n	8007b0e <ai_platform_network_process+0x15a>
 8007a3e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8007a42:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8007a46:	69a0      	ldr	r0, [r4, #24]
 8007a48:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8007a4c:	6841      	ldr	r1, [r0, #4]
 8007a4e:	fb0b f30e 	mul.w	r3, fp, lr
 8007a52:	fb0c f303 	mul.w	r3, ip, r3
 8007a56:	4299      	cmp	r1, r3
 8007a58:	d350      	bcc.n	8007afc <ai_platform_network_process+0x148>
 8007a5a:	68e3      	ldr	r3, [r4, #12]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	455a      	cmp	r2, fp
 8007a60:	d14c      	bne.n	8007afc <ai_platform_network_process+0x148>
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	4572      	cmp	r2, lr
 8007a66:	d149      	bne.n	8007afc <ai_platform_network_process+0x148>
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	459c      	cmp	ip, r3
 8007a6c:	d146      	bne.n	8007afc <ai_platform_network_process+0x148>
 8007a6e:	6800      	ldr	r0, [r0, #0]
 8007a70:	f001 ff68 	bl	8009944 <ai_array_get_byte_size>
 8007a74:	68e2      	ldr	r2, [r4, #12]
 8007a76:	6963      	ldr	r3, [r4, #20]
 8007a78:	68d2      	ldr	r2, [r2, #12]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	fb03 f302 	mul.w	r3, r3, r2
 8007a80:	4298      	cmp	r0, r3
 8007a82:	d33b      	bcc.n	8007afc <ai_platform_network_process+0x148>
 8007a84:	69a3      	ldr	r3, [r4, #24]
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	f001 ff10 	bl	80098ac <ai_array_to_buffer_fmt>
 8007a8c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007a90:	4043      	eors	r3, r0
 8007a92:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007a96:	d128      	bne.n	8007aea <ai_platform_network_process+0x136>
 8007a98:	68eb      	ldr	r3, [r5, #12]
 8007a9a:	b1f3      	cbz	r3, 8007ada <ai_platform_network_process+0x126>
 8007a9c:	f8b5 b000 	ldrh.w	fp, [r5]
 8007aa0:	f1bb 0f00 	cmp.w	fp, #0
 8007aa4:	d012      	beq.n	8007acc <ai_platform_network_process+0x118>
 8007aa6:	4623      	mov	r3, r4
 8007aa8:	f105 020c 	add.w	r2, r5, #12
 8007aac:	4629      	mov	r1, r5
 8007aae:	4650      	mov	r0, sl
 8007ab0:	f7ff fc3f 	bl	8007332 <_platform_network_state_setup.isra.1>
 8007ab4:	45d9      	cmp	r9, fp
 8007ab6:	883b      	ldrh	r3, [r7, #0]
 8007ab8:	bf38      	it	cc
 8007aba:	46d9      	movcc	r9, fp
 8007abc:	3601      	adds	r6, #1
 8007abe:	3518      	adds	r5, #24
 8007ac0:	e7af      	b.n	8007a22 <ai_platform_network_process+0x6e>
 8007ac2:	46a3      	mov	fp, r4
 8007ac4:	4658      	mov	r0, fp
 8007ac6:	b003      	add	sp, #12
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	f108 0010 	add.w	r0, r8, #16
 8007ad0:	2221      	movs	r2, #33	; 0x21
 8007ad2:	2112      	movs	r1, #18
 8007ad4:	f000 f980 	bl	8007dd8 <core_set_error>
 8007ad8:	e7f4      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007ada:	f108 0010 	add.w	r0, r8, #16
 8007ade:	2217      	movs	r2, #23
 8007ae0:	2112      	movs	r1, #18
 8007ae2:	469b      	mov	fp, r3
 8007ae4:	f000 f978 	bl	8007dd8 <core_set_error>
 8007ae8:	e7ec      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007aea:	f108 0010 	add.w	r0, r8, #16
 8007aee:	2219      	movs	r2, #25
 8007af0:	2112      	movs	r1, #18
 8007af2:	f000 f971 	bl	8007dd8 <core_set_error>
 8007af6:	f04f 0b00 	mov.w	fp, #0
 8007afa:	e7e3      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007afc:	f108 0010 	add.w	r0, r8, #16
 8007b00:	2218      	movs	r2, #24
 8007b02:	2112      	movs	r1, #18
 8007b04:	f000 f968 	bl	8007dd8 <core_set_error>
 8007b08:	f04f 0b00 	mov.w	fp, #0
 8007b0c:	e7da      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007b0e:	4644      	mov	r4, r8
 8007b10:	f104 0010 	add.w	r0, r4, #16
 8007b14:	2217      	movs	r2, #23
 8007b16:	2112      	movs	r1, #18
 8007b18:	f000 f95e 	bl	8007dd8 <core_set_error>
 8007b1c:	f04f 0b00 	mov.w	fp, #0
 8007b20:	e7d0      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007b22:	9a01      	ldr	r2, [sp, #4]
 8007b24:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8007b28:	4644      	mov	r4, r8
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	f000 80a4 	beq.w	8007c78 <ai_platform_network_process+0x2c4>
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	f240 8140 	bls.w	8007db6 <ai_platform_network_process+0x402>
 8007b36:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8007b3a:	f118 0f0c 	cmn.w	r8, #12
 8007b3e:	f000 813a 	beq.w	8007db6 <ai_platform_network_process+0x402>
 8007b42:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 8135 	beq.w	8007db6 <ai_platform_network_process+0x402>
 8007b4c:	3204      	adds	r2, #4
 8007b4e:	4615      	mov	r5, r2
 8007b50:	2700      	movs	r7, #0
 8007b52:	429f      	cmp	r7, r3
 8007b54:	f080 808c 	bcs.w	8007c70 <ai_platform_network_process+0x2bc>
 8007b58:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8087 	beq.w	8007c70 <ai_platform_network_process+0x2bc>
 8007b62:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8007b66:	2e00      	cmp	r6, #0
 8007b68:	f000 8082 	beq.w	8007c70 <ai_platform_network_process+0x2bc>
 8007b6c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8007b76:	d067      	beq.n	8007c48 <ai_platform_network_process+0x294>
 8007b78:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8007b7c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8007b80:	69b0      	ldr	r0, [r6, #24]
 8007b82:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8007b86:	6841      	ldr	r1, [r0, #4]
 8007b88:	fb0b f30e 	mul.w	r3, fp, lr
 8007b8c:	fb0c f303 	mul.w	r3, ip, r3
 8007b90:	4299      	cmp	r1, r3
 8007b92:	f0c0 8110 	bcc.w	8007db6 <ai_platform_network_process+0x402>
 8007b96:	68f3      	ldr	r3, [r6, #12]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	455a      	cmp	r2, fp
 8007b9c:	f040 810b 	bne.w	8007db6 <ai_platform_network_process+0x402>
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	4572      	cmp	r2, lr
 8007ba4:	f040 8107 	bne.w	8007db6 <ai_platform_network_process+0x402>
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	459c      	cmp	ip, r3
 8007bac:	f040 8103 	bne.w	8007db6 <ai_platform_network_process+0x402>
 8007bb0:	6800      	ldr	r0, [r0, #0]
 8007bb2:	f001 fec7 	bl	8009944 <ai_array_get_byte_size>
 8007bb6:	68f2      	ldr	r2, [r6, #12]
 8007bb8:	6973      	ldr	r3, [r6, #20]
 8007bba:	68d2      	ldr	r2, [r2, #12]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	fb03 f302 	mul.w	r3, r3, r2
 8007bc2:	4298      	cmp	r0, r3
 8007bc4:	f0c0 80f7 	bcc.w	8007db6 <ai_platform_network_process+0x402>
 8007bc8:	69b3      	ldr	r3, [r6, #24]
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	f001 fe6e 	bl	80098ac <ai_array_to_buffer_fmt>
 8007bd0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007bd4:	4043      	eors	r3, r0
 8007bd6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007bda:	d12c      	bne.n	8007c36 <ai_platform_network_process+0x282>
 8007bdc:	68eb      	ldr	r3, [r5, #12]
 8007bde:	b313      	cbz	r3, 8007c26 <ai_platform_network_process+0x272>
 8007be0:	f8b5 b000 	ldrh.w	fp, [r5]
 8007be4:	f1bb 0f00 	cmp.w	fp, #0
 8007be8:	d016      	beq.n	8007c18 <ai_platform_network_process+0x264>
 8007bea:	4633      	mov	r3, r6
 8007bec:	f105 020c 	add.w	r2, r5, #12
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	f7ff fb9d 	bl	8007332 <_platform_network_state_setup.isra.1>
 8007bf8:	45d9      	cmp	r9, fp
 8007bfa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007bfe:	bf38      	it	cc
 8007c00:	46d9      	movcc	r9, fp
 8007c02:	3701      	adds	r7, #1
 8007c04:	3518      	adds	r5, #24
 8007c06:	e7a4      	b.n	8007b52 <ai_platform_network_process+0x19e>
 8007c08:	f104 0010 	add.w	r0, r4, #16
 8007c0c:	2230      	movs	r2, #48	; 0x30
 8007c0e:	2111      	movs	r1, #17
 8007c10:	f000 f8e2 	bl	8007dd8 <core_set_error>
 8007c14:	46b3      	mov	fp, r6
 8007c16:	e755      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007c18:	f104 0010 	add.w	r0, r4, #16
 8007c1c:	2221      	movs	r2, #33	; 0x21
 8007c1e:	2113      	movs	r1, #19
 8007c20:	f000 f8da 	bl	8007dd8 <core_set_error>
 8007c24:	e74e      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007c26:	f104 0010 	add.w	r0, r4, #16
 8007c2a:	2217      	movs	r2, #23
 8007c2c:	2113      	movs	r1, #19
 8007c2e:	469b      	mov	fp, r3
 8007c30:	f000 f8d2 	bl	8007dd8 <core_set_error>
 8007c34:	e746      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007c36:	f104 0010 	add.w	r0, r4, #16
 8007c3a:	2219      	movs	r2, #25
 8007c3c:	2113      	movs	r1, #19
 8007c3e:	f000 f8cb 	bl	8007dd8 <core_set_error>
 8007c42:	f04f 0b00 	mov.w	fp, #0
 8007c46:	e73d      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007c48:	f104 0010 	add.w	r0, r4, #16
 8007c4c:	2217      	movs	r2, #23
 8007c4e:	2113      	movs	r1, #19
 8007c50:	f000 f8c2 	bl	8007dd8 <core_set_error>
 8007c54:	46d3      	mov	fp, sl
 8007c56:	e735      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007c58:	a1c00100 	.word	0xa1c00100
 8007c5c:	e0002000 	.word	0xe0002000
 8007c60:	40023008 	.word	0x40023008
 8007c64:	40023000 	.word	0x40023000
 8007c68:	f407a5c2 	.word	0xf407a5c2
 8007c6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007c70:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007c74:	f8a4 9014 	strh.w	r9, [r4, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8099 	beq.w	8007db0 <ai_platform_network_process+0x3fc>
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007c82:	f240 8093 	bls.w	8007dac <ai_platform_network_process+0x3f8>
 8007c86:	f105 070c 	add.w	r7, r5, #12
 8007c8a:	8ae0      	ldrh	r0, [r4, #22]
 8007c8c:	8aa3      	ldrh	r3, [r4, #20]
 8007c8e:	4283      	cmp	r3, r0
 8007c90:	d977      	bls.n	8007d82 <ai_platform_network_process+0x3ce>
 8007c92:	46a3      	mov	fp, r4
 8007c94:	2d00      	cmp	r5, #0
 8007c96:	d032      	beq.n	8007cfe <ai_platform_network_process+0x34a>
 8007c98:	882b      	ldrh	r3, [r5, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d02f      	beq.n	8007cfe <ai_platform_network_process+0x34a>
 8007c9e:	686b      	ldr	r3, [r5, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d02c      	beq.n	8007cfe <ai_platform_network_process+0x34a>
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f04f 0800 	mov.w	r8, #0
 8007caa:	b343      	cbz	r3, 8007cfe <ai_platform_network_process+0x34a>
 8007cac:	68a9      	ldr	r1, [r5, #8]
 8007cae:	699a      	ldr	r2, [r3, #24]
 8007cb0:	f8d1 a000 	ldr.w	sl, [r1]
 8007cb4:	6814      	ldr	r4, [r2, #0]
 8007cb6:	6890      	ldr	r0, [r2, #8]
 8007cb8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007cbc:	eb0a 0609 	add.w	r6, sl, r9
 8007cc0:	00a4      	lsls	r4, r4, #2
 8007cc2:	6871      	ldr	r1, [r6, #4]
 8007cc4:	d45f      	bmi.n	8007d86 <ai_platform_network_process+0x3d2>
 8007cc6:	68d4      	ldr	r4, [r2, #12]
 8007cc8:	1b00      	subs	r0, r0, r4
 8007cca:	4401      	add	r1, r0
 8007ccc:	6091      	str	r1, [r2, #8]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	6872      	ldr	r2, [r6, #4]
 8007cd2:	60da      	str	r2, [r3, #12]
 8007cd4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007cd8:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007cdc:	440b      	add	r3, r1
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	bf24      	itt	cs
 8007ce2:	68f3      	ldrcs	r3, [r6, #12]
 8007ce4:	1ad3      	subcs	r3, r2, r3
 8007ce6:	6073      	str	r3, [r6, #4]
 8007ce8:	882b      	ldrh	r3, [r5, #0]
 8007cea:	f108 0801 	add.w	r8, r8, #1
 8007cee:	4598      	cmp	r8, r3
 8007cf0:	d205      	bcs.n	8007cfe <ai_platform_network_process+0x34a>
 8007cf2:	686b      	ldr	r3, [r5, #4]
 8007cf4:	b11b      	cbz	r3, 8007cfe <ai_platform_network_process+0x34a>
 8007cf6:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1d6      	bne.n	8007cac <ai_platform_network_process+0x2f8>
 8007cfe:	4658      	mov	r0, fp
 8007d00:	f001 fd9a 	bl	8009838 <ai_layers_forward_all>
 8007d04:	2f00      	cmp	r7, #0
 8007d06:	d032      	beq.n	8007d6e <ai_platform_network_process+0x3ba>
 8007d08:	883b      	ldrh	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d02f      	beq.n	8007d6e <ai_platform_network_process+0x3ba>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	b36b      	cbz	r3, 8007d6e <ai_platform_network_process+0x3ba>
 8007d12:	6818      	ldr	r0, [r3, #0]
 8007d14:	b358      	cbz	r0, 8007d6e <ai_platform_network_process+0x3ba>
 8007d16:	f04f 0800 	mov.w	r8, #0
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6981      	ldr	r1, [r0, #24]
 8007d1e:	f8d3 a000 	ldr.w	sl, [r3]
 8007d22:	680c      	ldr	r4, [r1, #0]
 8007d24:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007d28:	eb0a 0609 	add.w	r6, sl, r9
 8007d2c:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8007d30:	00a4      	lsls	r4, r4, #2
 8007d32:	eb0c 0302 	add.w	r3, ip, r2
 8007d36:	d42a      	bmi.n	8007d8e <ai_platform_network_process+0x3da>
 8007d38:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	bf24      	itt	cs
 8007d40:	68f3      	ldrcs	r3, [r6, #12]
 8007d42:	1ad3      	subcs	r3, r2, r3
 8007d44:	6073      	str	r3, [r6, #4]
 8007d46:	6981      	ldr	r1, [r0, #24]
 8007d48:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8007d4c:	1b12      	subs	r2, r2, r4
 8007d4e:	4413      	add	r3, r2
 8007d50:	608b      	str	r3, [r1, #8]
 8007d52:	6983      	ldr	r3, [r0, #24]
 8007d54:	6872      	ldr	r2, [r6, #4]
 8007d56:	60da      	str	r2, [r3, #12]
 8007d58:	883b      	ldrh	r3, [r7, #0]
 8007d5a:	f108 0801 	add.w	r8, r8, #1
 8007d5e:	4598      	cmp	r8, r3
 8007d60:	d205      	bcs.n	8007d6e <ai_platform_network_process+0x3ba>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	b11b      	cbz	r3, 8007d6e <ai_platform_network_process+0x3ba>
 8007d66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d1d5      	bne.n	8007d1a <ai_platform_network_process+0x366>
 8007d6e:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8007d72:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007d76:	3001      	adds	r0, #1
 8007d78:	b280      	uxth	r0, r0
 8007d7a:	4283      	cmp	r3, r0
 8007d7c:	f8ab 0016 	strh.w	r0, [fp, #22]
 8007d80:	d888      	bhi.n	8007c94 <ai_platform_network_process+0x2e0>
 8007d82:	4683      	mov	fp, r0
 8007d84:	e69e      	b.n	8007ac4 <ai_platform_network_process+0x110>
 8007d86:	68b2      	ldr	r2, [r6, #8]
 8007d88:	f001 fe30 	bl	80099ec <memcpy>
 8007d8c:	e7a2      	b.n	8007cd4 <ai_platform_network_process+0x320>
 8007d8e:	6889      	ldr	r1, [r1, #8]
 8007d90:	4660      	mov	r0, ip
 8007d92:	f001 fe2b 	bl	80099ec <memcpy>
 8007d96:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007d9a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007d9e:	440b      	add	r3, r1
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bf24      	itt	cs
 8007da4:	68f3      	ldrcs	r3, [r6, #12]
 8007da6:	1ad3      	subcs	r3, r2, r3
 8007da8:	6073      	str	r3, [r6, #4]
 8007daa:	e7d5      	b.n	8007d58 <ai_platform_network_process+0x3a4>
 8007dac:	2700      	movs	r7, #0
 8007dae:	e76c      	b.n	8007c8a <ai_platform_network_process+0x2d6>
 8007db0:	461d      	mov	r5, r3
 8007db2:	461f      	mov	r7, r3
 8007db4:	e769      	b.n	8007c8a <ai_platform_network_process+0x2d6>
 8007db6:	f104 0010 	add.w	r0, r4, #16
 8007dba:	2218      	movs	r2, #24
 8007dbc:	2113      	movs	r1, #19
 8007dbe:	f000 f80b 	bl	8007dd8 <core_set_error>
 8007dc2:	f04f 0b00 	mov.w	fp, #0
 8007dc6:	e67d      	b.n	8007ac4 <ai_platform_network_process+0x110>

08007dc8 <core_init>:
 8007dc8:	2001      	movs	r0, #1
 8007dca:	4770      	bx	lr

08007dcc <core_get_error>:
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	6800      	ldr	r0, [r0, #0]
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop

08007dd8 <core_set_error>:
 8007dd8:	7803      	ldrb	r3, [r0, #0]
 8007dda:	b933      	cbnz	r3, 8007dea <core_set_error+0x12>
 8007ddc:	7001      	strb	r1, [r0, #0]
 8007dde:	6803      	ldr	r3, [r0, #0]
 8007de0:	f362 231f 	bfi	r3, r2, #8, #24
 8007de4:	6003      	str	r3, [r0, #0]
 8007de6:	2001      	movs	r0, #1
 8007de8:	4770      	bx	lr
 8007dea:	2000      	movs	r0, #0
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop

08007df0 <func_dummy>:
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop

08007df4 <ai_dict8_dot_array_f32>:
 8007df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007dfc:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8007e00:	f000 80c0 	beq.w	8007f84 <ai_dict8_dot_array_f32+0x190>
 8007e04:	f101 0408 	add.w	r4, r1, #8
 8007e08:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007e0c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007f8c <ai_dict8_dot_array_f32+0x198>
 8007e10:	eb04 0e09 	add.w	lr, r4, r9
 8007e14:	f103 0520 	add.w	r5, r3, #32
 8007e18:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8007e1c:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8007e20:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8007e24:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8007e28:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8007e2c:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8007e30:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8007e34:	ed55 3a04 	vldr	s7, [r5, #-16]
 8007e38:	ed55 4a03 	vldr	s9, [r5, #-12]
 8007e3c:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007e40:	ed55 6a01 	vldr	s13, [r5, #-4]
 8007e44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e48:	edd6 7a00 	vldr	s15, [r6]
 8007e4c:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8007e50:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007e54:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007e58:	ed9a 3a00 	vldr	s6, [sl]
 8007e5c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8007e60:	eee3 7a05 	vfma.f32	s15, s6, s10
 8007e64:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007e68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e6c:	ed97 3a00 	vldr	s6, [r7]
 8007e70:	ed96 5a00 	vldr	s10, [r6]
 8007e74:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8007e78:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8007e7c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007e80:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007e84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e88:	ed9a 3a00 	vldr	s6, [sl]
 8007e8c:	ed96 4a00 	vldr	s8, [r6]
 8007e90:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8007e94:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007e98:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007e9c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ea0:	ed97 5a00 	vldr	s10, [r7]
 8007ea4:	ed96 6a00 	vldr	s12, [r6]
 8007ea8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007eac:	3408      	adds	r4, #8
 8007eae:	45a6      	cmp	lr, r4
 8007eb0:	f105 0520 	add.w	r5, r5, #32
 8007eb4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007eb8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007ebc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ec4:	d1a8      	bne.n	8007e18 <ai_dict8_dot_array_f32+0x24>
 8007ec6:	4449      	add	r1, r9
 8007ec8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007ecc:	f01c 0c07 	ands.w	ip, ip, #7
 8007ed0:	d050      	beq.n	8007f74 <ai_dict8_dot_array_f32+0x180>
 8007ed2:	780c      	ldrb	r4, [r1, #0]
 8007ed4:	edd3 6a00 	vldr	s13, [r3]
 8007ed8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007edc:	edd4 7a00 	vldr	s15, [r4]
 8007ee0:	f1bc 0f01 	cmp.w	ip, #1
 8007ee4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ee8:	d044      	beq.n	8007f74 <ai_dict8_dot_array_f32+0x180>
 8007eea:	784c      	ldrb	r4, [r1, #1]
 8007eec:	edd3 6a01 	vldr	s13, [r3, #4]
 8007ef0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007ef4:	edd4 7a00 	vldr	s15, [r4]
 8007ef8:	f1bc 0f02 	cmp.w	ip, #2
 8007efc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f00:	d038      	beq.n	8007f74 <ai_dict8_dot_array_f32+0x180>
 8007f02:	788c      	ldrb	r4, [r1, #2]
 8007f04:	edd3 6a02 	vldr	s13, [r3, #8]
 8007f08:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007f0c:	edd4 7a00 	vldr	s15, [r4]
 8007f10:	f1bc 0f03 	cmp.w	ip, #3
 8007f14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f18:	d02c      	beq.n	8007f74 <ai_dict8_dot_array_f32+0x180>
 8007f1a:	78cc      	ldrb	r4, [r1, #3]
 8007f1c:	edd3 6a03 	vldr	s13, [r3, #12]
 8007f20:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007f24:	edd4 7a00 	vldr	s15, [r4]
 8007f28:	f1bc 0f04 	cmp.w	ip, #4
 8007f2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f30:	d020      	beq.n	8007f74 <ai_dict8_dot_array_f32+0x180>
 8007f32:	790c      	ldrb	r4, [r1, #4]
 8007f34:	edd3 6a04 	vldr	s13, [r3, #16]
 8007f38:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007f3c:	edd4 7a00 	vldr	s15, [r4]
 8007f40:	f1bc 0f05 	cmp.w	ip, #5
 8007f44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f48:	d014      	beq.n	8007f74 <ai_dict8_dot_array_f32+0x180>
 8007f4a:	794c      	ldrb	r4, [r1, #5]
 8007f4c:	edd3 6a05 	vldr	s13, [r3, #20]
 8007f50:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007f54:	edd4 7a00 	vldr	s15, [r4]
 8007f58:	f1bc 0f06 	cmp.w	ip, #6
 8007f5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f60:	d008      	beq.n	8007f74 <ai_dict8_dot_array_f32+0x180>
 8007f62:	7989      	ldrb	r1, [r1, #6]
 8007f64:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007f6c:	edd2 6a00 	vldr	s13, [r2]
 8007f70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f74:	edd0 7a00 	vldr	s15, [r0]
 8007f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f7c:	ed80 7a00 	vstr	s14, [r0]
 8007f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f84:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007f8c <ai_dict8_dot_array_f32+0x198>
 8007f88:	e7a0      	b.n	8007ecc <ai_dict8_dot_array_f32+0xd8>
 8007f8a:	bf00      	nop
 8007f8c:	00000000 	.word	0x00000000

08007f90 <ai_dict4_dot_array_f32>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f96:	f027 0c01 	bic.w	ip, r7, #1
 8007f9a:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8007f9e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007fa2:	f000 80ae 	beq.w	8008102 <ai_dict4_dot_array_f32+0x172>
 8007fa6:	1d0d      	adds	r5, r1, #4
 8007fa8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8007fac:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008108 <ai_dict4_dot_array_f32+0x178>
 8007fb0:	eb05 0e09 	add.w	lr, r5, r9
 8007fb4:	f103 0420 	add.w	r4, r3, #32
 8007fb8:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8007fbc:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8007fc0:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8007fc4:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8007fc8:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8007fcc:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8007fd0:	ed14 5a04 	vldr	s10, [r4, #-16]
 8007fd4:	ed54 5a03 	vldr	s11, [r4, #-12]
 8007fd8:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007fdc:	ed54 6a01 	vldr	s13, [r4, #-4]
 8007fe0:	f006 0a0f 	and.w	sl, r6, #15
 8007fe4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007fe8:	edda 7a00 	vldr	s15, [sl]
 8007fec:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8007ff0:	0936      	lsrs	r6, r6, #4
 8007ff2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ff6:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007ffa:	ed96 3a00 	vldr	s6, [r6]
 8007ffe:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8008002:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008006:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800800a:	f00b 0b0f 	and.w	fp, fp, #15
 800800e:	edd6 3a00 	vldr	s7, [r6]
 8008012:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8008016:	eee3 7a84 	vfma.f32	s15, s7, s8
 800801a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800801e:	3504      	adds	r5, #4
 8008020:	ed9b 4a00 	vldr	s8, [fp]
 8008024:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8008028:	eee4 7a24 	vfma.f32	s15, s8, s9
 800802c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8008030:	f00a 0a0f 	and.w	sl, sl, #15
 8008034:	eddb 4a00 	vldr	s9, [fp]
 8008038:	eee4 7a85 	vfma.f32	s15, s9, s10
 800803c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008040:	45ae      	cmp	lr, r5
 8008042:	ed9a 5a00 	vldr	s10, [sl]
 8008046:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800804a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800804e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008052:	f006 060f 	and.w	r6, r6, #15
 8008056:	edda 5a00 	vldr	s11, [sl]
 800805a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800805e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008062:	f104 0420 	add.w	r4, r4, #32
 8008066:	ed96 6a00 	vldr	s12, [r6]
 800806a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800806e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008072:	d1a1      	bne.n	8007fb8 <ai_dict4_dot_array_f32+0x28>
 8008074:	4449      	add	r1, r9
 8008076:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800807a:	459c      	cmp	ip, r3
 800807c:	d92d      	bls.n	80080da <ai_dict4_dot_array_f32+0x14a>
 800807e:	f10c 0c07 	add.w	ip, ip, #7
 8008082:	f103 0508 	add.w	r5, r3, #8
 8008086:	ebac 0c05 	sub.w	ip, ip, r5
 800808a:	f02c 0407 	bic.w	r4, ip, #7
 800808e:	f103 0810 	add.w	r8, r3, #16
 8008092:	44a0      	add	r8, r4
 8008094:	f101 3eff 	add.w	lr, r1, #4294967295
 8008098:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800809c:	ed15 6a01 	vldr	s12, [r5, #-4]
 80080a0:	ed55 6a02 	vldr	s13, [r5, #-8]
 80080a4:	f004 060f 	and.w	r6, r4, #15
 80080a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80080ac:	0924      	lsrs	r4, r4, #4
 80080ae:	edd6 7a00 	vldr	s15, [r6]
 80080b2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80080b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80080ba:	ed94 6a00 	vldr	s12, [r4]
 80080be:	eee6 7a26 	vfma.f32	s15, s12, s13
 80080c2:	3508      	adds	r5, #8
 80080c4:	45a8      	cmp	r8, r5
 80080c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080ca:	d1e5      	bne.n	8008098 <ai_dict4_dot_array_f32+0x108>
 80080cc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80080d0:	f10c 0c01 	add.w	ip, ip, #1
 80080d4:	4461      	add	r1, ip
 80080d6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80080da:	07fc      	lsls	r4, r7, #31
 80080dc:	d509      	bpl.n	80080f2 <ai_dict4_dot_array_f32+0x162>
 80080de:	7809      	ldrb	r1, [r1, #0]
 80080e0:	edd3 7a00 	vldr	s15, [r3]
 80080e4:	090b      	lsrs	r3, r1, #4
 80080e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80080ea:	edd2 6a00 	vldr	s13, [r2]
 80080ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080f2:	edd0 7a00 	vldr	s15, [r0]
 80080f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080fa:	ed80 7a00 	vstr	s14, [r0]
 80080fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008102:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8008108 <ai_dict4_dot_array_f32+0x178>
 8008106:	e7b8      	b.n	800807a <ai_dict4_dot_array_f32+0xea>
 8008108:	00000000 	.word	0x00000000

0800810c <ai_dict_decompress_f32>:
 800810c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008110:	9f08      	ldr	r7, [sp, #32]
 8008112:	2b04      	cmp	r3, #4
 8008114:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008118:	d00e      	beq.n	8008138 <ai_dict_decompress_f32+0x2c>
 800811a:	2b08      	cmp	r3, #8
 800811c:	d10a      	bne.n	8008134 <ai_dict_decompress_f32+0x28>
 800811e:	42b8      	cmp	r0, r7
 8008120:	d208      	bcs.n	8008134 <ai_dict_decompress_f32+0x28>
 8008122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008126:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f840 3b04 	str.w	r3, [r0], #4
 8008130:	4287      	cmp	r7, r0
 8008132:	d8f6      	bhi.n	8008122 <ai_dict_decompress_f32+0x16>
 8008134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008138:	9b07      	ldr	r3, [sp, #28]
 800813a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800813e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8008142:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008146:	f003 0e01 	and.w	lr, r3, #1
 800814a:	42b8      	cmp	r0, r7
 800814c:	d2f2      	bcs.n	8008134 <ai_dict_decompress_f32+0x28>
 800814e:	f1bc 0f00 	cmp.w	ip, #0
 8008152:	d01a      	beq.n	800818a <ai_dict_decompress_f32+0x7e>
 8008154:	f100 0508 	add.w	r5, r0, #8
 8008158:	1e4c      	subs	r4, r1, #1
 800815a:	eb01 0608 	add.w	r6, r1, r8
 800815e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008162:	091b      	lsrs	r3, r3, #4
 8008164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008168:	42a6      	cmp	r6, r4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f845 3c08 	str.w	r3, [r5, #-8]
 8008170:	7823      	ldrb	r3, [r4, #0]
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800817a:	f105 0508 	add.w	r5, r5, #8
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f845 3c0c 	str.w	r3, [r5, #-12]
 8008184:	d1eb      	bne.n	800815e <ai_dict_decompress_f32+0x52>
 8008186:	4461      	add	r1, ip
 8008188:	4448      	add	r0, r9
 800818a:	f1be 0f00 	cmp.w	lr, #0
 800818e:	d103      	bne.n	8008198 <ai_dict_decompress_f32+0x8c>
 8008190:	4287      	cmp	r7, r0
 8008192:	d8dc      	bhi.n	800814e <ai_dict_decompress_f32+0x42>
 8008194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008198:	780b      	ldrb	r3, [r1, #0]
 800819a:	091b      	lsrs	r3, r3, #4
 800819c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081a0:	3101      	adds	r1, #1
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6003      	str	r3, [r0, #0]
 80081a6:	3004      	adds	r0, #4
 80081a8:	e7cf      	b.n	800814a <ai_dict_decompress_f32+0x3e>
 80081aa:	bf00      	nop

080081ac <forward_conv2d>:
 80081ac:	6942      	ldr	r2, [r0, #20]
 80081ae:	8813      	ldrh	r3, [r2, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 87b7 	beq.w	8009124 <forward_conv2d+0xf78>
 80081b6:	6852      	ldr	r2, [r2, #4]
 80081b8:	6851      	ldr	r1, [r2, #4]
 80081ba:	b101      	cbz	r1, 80081be <forward_conv2d+0x12>
 80081bc:	6809      	ldr	r1, [r1, #0]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	f240 87ad 	bls.w	800911e <forward_conv2d+0xf72>
 80081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	ed2d 8b10 	vpush	{d8-d15}
 80081cc:	b0cb      	sub	sp, #300	; 0x12c
 80081ce:	6914      	ldr	r4, [r2, #16]
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	2c00      	cmp	r4, #0
 80081d4:	f000 879f 	beq.w	8009116 <forward_conv2d+0xf6a>
 80081d8:	6824      	ldr	r4, [r4, #0]
 80081da:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80081de:	2b02      	cmp	r3, #2
 80081e0:	f000 8794 	beq.w	800910c <forward_conv2d+0xf60>
 80081e4:	69d5      	ldr	r5, [r2, #28]
 80081e6:	2d00      	cmp	r5, #0
 80081e8:	f000 8789 	beq.w	80090fe <forward_conv2d+0xf52>
 80081ec:	f112 0318 	adds.w	r3, r2, #24
 80081f0:	682c      	ldr	r4, [r5, #0]
 80081f2:	d004      	beq.n	80081fe <forward_conv2d+0x52>
 80081f4:	8b13      	ldrh	r3, [r2, #24]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	f240 8796 	bls.w	8009128 <forward_conv2d+0xf7c>
 80081fc:	686b      	ldr	r3, [r5, #4]
 80081fe:	68aa      	ldr	r2, [r5, #8]
 8008200:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8008204:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8008208:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800820c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008210:	68ce      	ldr	r6, [r1, #12]
 8008212:	69a1      	ldr	r1, [r4, #24]
 8008214:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008218:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800821c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8008220:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008224:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8008228:	f8de 100c 	ldr.w	r1, [lr, #12]
 800822c:	64b9      	str	r1, [r7, #72]	; 0x48
 800822e:	f8de 1008 	ldr.w	r1, [lr, #8]
 8008232:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8008236:	6871      	ldr	r1, [r6, #4]
 8008238:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800823c:	68f1      	ldr	r1, [r6, #12]
 800823e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8008242:	68b1      	ldr	r1, [r6, #8]
 8008244:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8008248:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800824c:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8008250:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008254:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8008258:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800825c:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800825e:	6889      	ldr	r1, [r1, #8]
 8008260:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008264:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008266:	e9d5 ab00 	ldrd	sl, fp, [r5]
 800826a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800826e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008270:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008274:	6981      	ldr	r1, [r0, #24]
 8008276:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800827a:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 872e 	beq.w	80090e0 <forward_conv2d+0xf34>
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800828c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008298:	4606      	mov	r6, r0
 800829a:	69c0      	ldr	r0, [r0, #28]
 800829c:	2a00      	cmp	r2, #0
 800829e:	f000 8712 	beq.w	80090c6 <forward_conv2d+0xf1a>
 80082a2:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 80082a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082aa:	6892      	ldr	r2, [r2, #8]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082b2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80082b6:	f001 fb45 	bl	8009944 <ai_array_get_byte_size>
 80082ba:	69a3      	ldr	r3, [r4, #24]
 80082bc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80082c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80082ca:	6a32      	ldr	r2, [r6, #32]
 80082cc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80082d0:	f3c3 5441 	ubfx	r4, r3, #21, #2
 80082d4:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 80082d8:	fa1f f089 	uxth.w	r0, r9
 80082dc:	4125      	asrs	r5, r4
 80082de:	3801      	subs	r0, #1
 80082e0:	1e4c      	subs	r4, r1, #1
 80082e2:	fb04 1100 	mla	r1, r4, r0, r1
 80082e6:	6479      	str	r1, [r7, #68]	; 0x44
 80082e8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80082ec:	f8df c39c 	ldr.w	ip, [pc, #924]	; 800868c <forward_conv2d+0x4e0>
 80082f0:	fa1f f288 	uxth.w	r2, r8
 80082f4:	3a01      	subs	r2, #1
 80082f6:	1e48      	subs	r0, r1, #1
 80082f8:	fb00 1102 	mla	r1, r0, r2, r1
 80082fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008300:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008304:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8008308:	4610      	mov	r0, r2
 800830a:	2a00      	cmp	r2, #0
 800830c:	bf08      	it	eq
 800830e:	4660      	moveq	r0, ip
 8008310:	2b04      	cmp	r3, #4
 8008312:	b2ad      	uxth	r5, r5
 8008314:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8008318:	f000 8533 	beq.w	8008d82 <forward_conv2d+0xbd6>
 800831c:	2b08      	cmp	r3, #8
 800831e:	f000 8530 	beq.w	8008d82 <forward_conv2d+0xbd6>
 8008322:	fa1f f38a 	uxth.w	r3, sl
 8008326:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800832a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800832e:	425b      	negs	r3, r3
 8008330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008334:	2900      	cmp	r1, #0
 8008336:	f000 8242 	beq.w	80087be <forward_conv2d+0x612>
 800833a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800833e:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 8008342:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 8008688 <forward_conv2d+0x4dc>
 8008346:	fb00 f305 	mul.w	r3, r0, r5
 800834a:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 800834e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8008352:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008356:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 800835a:	663d      	str	r5, [r7, #96]	; 0x60
 800835c:	fa0f f289 	sxth.w	r2, r9
 8008360:	fb03 f400 	mul.w	r4, r3, r0
 8008364:	fa1f f18b 	uxth.w	r1, fp
 8008368:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800836c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008370:	67bc      	str	r4, [r7, #120]	; 0x78
 8008372:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 8008376:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800837a:	4249      	negs	r1, r1
 800837c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8008380:	0092      	lsls	r2, r2, #2
 8008382:	0081      	lsls	r1, r0, #2
 8008384:	4605      	mov	r5, r0
 8008386:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800838a:	fb04 f200 	mul.w	r2, r4, r0
 800838e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008392:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8008396:	fb01 fc00 	mul.w	ip, r1, r0
 800839a:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800839e:	fb01 fc03 	mul.w	ip, r1, r3
 80083a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083a4:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b2:	fa0f f688 	sxth.w	r6, r8
 80083b6:	469c      	mov	ip, r3
 80083b8:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac
 80083bc:	4633      	mov	r3, r6
 80083be:	fb0c f606 	mul.w	r6, ip, r6
 80083c2:	677e      	str	r6, [r7, #116]	; 0x74
 80083c4:	4666      	mov	r6, ip
 80083c6:	fb04 f606 	mul.w	r6, r4, r6
 80083ca:	4686      	mov	lr, r0
 80083cc:	4620      	mov	r0, r4
 80083ce:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80083d2:	633e      	str	r6, [r7, #48]	; 0x30
 80083d4:	fb01 f404 	mul.w	r4, r1, r4
 80083d8:	fb03 f605 	mul.w	r6, r3, r5
 80083dc:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80083de:	667c      	str	r4, [r7, #100]	; 0x64
 80083e0:	460b      	mov	r3, r1
 80083e2:	4604      	mov	r4, r0
 80083e4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80083e8:	62fe      	str	r6, [r7, #44]	; 0x2c
 80083ea:	fb05 f404 	mul.w	r4, r5, r4
 80083ee:	617c      	str	r4, [r7, #20]
 80083f0:	460c      	mov	r4, r1
 80083f2:	fb04 f403 	mul.w	r4, r4, r3
 80083f6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80083fa:	65bc      	str	r4, [r7, #88]	; 0x58
 80083fc:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8008400:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008404:	fb01 f104 	mul.w	r1, r1, r4
 8008408:	61b9      	str	r1, [r7, #24]
 800840a:	0091      	lsls	r1, r2, #2
 800840c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008410:	62b9      	str	r1, [r7, #40]	; 0x28
 8008412:	fb00 f202 	mul.w	r2, r0, r2
 8008416:	0081      	lsls	r1, r0, #2
 8008418:	6239      	str	r1, [r7, #32]
 800841a:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800841e:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8008422:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8008426:	011a      	lsls	r2, r3, #4
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800842e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008436:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800843a:	2300      	movs	r3, #0
 800843c:	6439      	str	r1, [r7, #64]	; 0x40
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008442:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800844a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800844c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800844e:	2900      	cmp	r1, #0
 8008450:	441a      	add	r2, r3
 8008452:	bfb4      	ite	lt
 8008454:	2100      	movlt	r1, #0
 8008456:	2300      	movge	r3, #0
 8008458:	4282      	cmp	r2, r0
 800845a:	bf28      	it	cs
 800845c:	4602      	movcs	r2, r0
 800845e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8008462:	2801      	cmp	r0, #1
 8008464:	f000 8309 	beq.w	8008a7a <forward_conv2d+0x8ce>
 8008468:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800846c:	4281      	cmp	r1, r0
 800846e:	f000 81c3 	beq.w	80087f8 <forward_conv2d+0x64c>
 8008472:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008476:	2900      	cmp	r1, #0
 8008478:	f000 8182 	beq.w	8008780 <forward_conv2d+0x5d4>
 800847c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8008480:	fb93 f1f0 	sdiv	r1, r3, r0
 8008484:	fb00 3111 	mls	r1, r0, r1, r3
 8008488:	1a41      	subs	r1, r0, r1
 800848a:	1ad2      	subs	r2, r2, r3
 800848c:	fb91 f5f0 	sdiv	r5, r1, r0
 8008490:	fb00 1515 	mls	r5, r0, r5, r1
 8008494:	1b52      	subs	r2, r2, r5
 8008496:	4601      	mov	r1, r0
 8008498:	4402      	add	r2, r0
 800849a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800849e:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 80084a2:	f8c7 b01c 	str.w	fp, [r7, #28]
 80084a6:	4604      	mov	r4, r0
 80084a8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80084ac:	fbb4 f4f0 	udiv	r4, r4, r0
 80084b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084b2:	3a01      	subs	r2, #1
 80084b4:	fb92 f8f1 	sdiv	r8, r2, r1
 80084b8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80084bc:	eba0 0c04 	sub.w	ip, r0, r4
 80084c0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80084c4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80084c8:	4614      	mov	r4, r2
 80084ca:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80084ce:	fbb4 f2f2 	udiv	r2, r4, r2
 80084d2:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80084d6:	657a      	str	r2, [r7, #84]	; 0x54
 80084d8:	441d      	add	r5, r3
 80084da:	fb0e f000 	mul.w	r0, lr, r0
 80084de:	440b      	add	r3, r1
 80084e0:	eba6 0608 	sub.w	r6, r6, r8
 80084e4:	fb04 f505 	mul.w	r5, r4, r5
 80084e8:	3b01      	subs	r3, #1
 80084ea:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80084ee:	fb93 f3f4 	sdiv	r3, r3, r4
 80084f2:	fb00 f406 	mul.w	r4, r0, r6
 80084f6:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80084fa:	66fd      	str	r5, [r7, #108]	; 0x6c
 80084fc:	0091      	lsls	r1, r2, #2
 80084fe:	fb00 f003 	mul.w	r0, r0, r3
 8008502:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8008506:	6538      	str	r0, [r7, #80]	; 0x50
 8008508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800850c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8008510:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008514:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8008518:	1ac3      	subs	r3, r0, r3
 800851a:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800851e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008522:	008b      	lsls	r3, r1, #2
 8008524:	63bb      	str	r3, [r7, #56]	; 0x38
 8008526:	00d3      	lsls	r3, r2, #3
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
 800852a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800852e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008536:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800853a:	2300      	movs	r3, #0
 800853c:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8008540:	673b      	str	r3, [r7, #112]	; 0x70
 8008542:	46c2      	mov	sl, r8
 8008544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008548:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800854c:	eb03 0c02 	add.w	ip, r3, r2
 8008550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008554:	2b00      	cmp	r3, #0
 8008556:	f2c0 813b 	blt.w	80087d0 <forward_conv2d+0x624>
 800855a:	2000      	movs	r0, #0
 800855c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800855e:	f8d7 80ac 	ldr.w	r8, [r7, #172]	; 0xac
 8008562:	4605      	mov	r5, r0
 8008564:	4606      	mov	r6, r0
 8008566:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8008572:	4413      	add	r3, r2
 8008574:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008578:	440a      	add	r2, r1
 800857a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800857e:	428b      	cmp	r3, r1
 8008580:	bf94      	ite	ls
 8008582:	ebc6 0303 	rsbls	r3, r6, r3
 8008586:	ebc6 0301 	rsbhi	r3, r6, r1
 800858a:	4415      	add	r5, r2
 800858c:	1a1b      	subs	r3, r3, r0
 800858e:	00a4      	lsls	r4, r4, #2
 8008590:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8008594:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 8008598:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800859c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800859e:	4602      	mov	r2, r0
 80085a0:	2800      	cmp	r0, #0
 80085a2:	bf08      	it	eq
 80085a4:	4662      	moveq	r2, ip
 80085a6:	f108 31ff 	add.w	r1, r8, #4294967295
 80085aa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80085ae:	fb91 f1f0 	sdiv	r1, r1, r0
 80085b2:	4429      	add	r1, r5
 80085b4:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 80085b8:	fb0e 5501 	mla	r5, lr, r1, r5
 80085bc:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80085c0:	4403      	add	r3, r0
 80085c2:	fb01 6104 	mla	r1, r1, r4, r6
 80085c6:	3b01      	subs	r3, #1
 80085c8:	fb93 f6f0 	sdiv	r6, r3, r0
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80085d2:	fb06 3110 	mls	r1, r6, r0, r3
 80085d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80085da:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80085de:	4562      	cmp	r2, ip
 80085e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80085e4:	bf08      	it	eq
 80085e6:	eeb0 6a48 	vmoveq.f32	s12, s16
 80085ea:	1b9b      	subs	r3, r3, r6
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d075      	beq.n	80086dc <forward_conv2d+0x530>
 80085f0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80085f4:	fb0e f803 	mul.w	r8, lr, r3
 80085f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085fa:	fb00 fb01 	mul.w	fp, r0, r1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d06c      	beq.n	80086dc <forward_conv2d+0x530>
 8008602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008606:	18d3      	adds	r3, r2, r3
 8008608:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800860c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	637b      	str	r3, [r7, #52]	; 0x34
 8008614:	2300      	movs	r3, #0
 8008616:	66bb      	str	r3, [r7, #104]	; 0x68
 8008618:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	4413      	add	r3, r2
 8008620:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008622:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008628:	4413      	add	r3, r2
 800862a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800862e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008632:	ecf3 7a01 	vldmia	r3!, {s15}
 8008636:	f1ba 0f00 	cmp.w	sl, #0
 800863a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800863e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008642:	f340 80c3 	ble.w	80087cc <forward_conv2d+0x620>
 8008646:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800864a:	f04f 0c00 	mov.w	ip, #0
 800864e:	2e00      	cmp	r6, #0
 8008650:	dd1e      	ble.n	8008690 <forward_conv2d+0x4e4>
 8008652:	2100      	movs	r1, #0
 8008654:	eb00 040e 	add.w	r4, r0, lr
 8008658:	4284      	cmp	r4, r0
 800865a:	d910      	bls.n	800867e <forward_conv2d+0x4d2>
 800865c:	4603      	mov	r3, r0
 800865e:	462a      	mov	r2, r5
 8008660:	ecb3 7a01 	vldmia	r3!, {s14}
 8008664:	ecf2 6a01 	vldmia	r2!, {s13}
 8008668:	429c      	cmp	r4, r3
 800866a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800866e:	d8f7      	bhi.n	8008660 <forward_conv2d+0x4b4>
 8008670:	43c3      	mvns	r3, r0
 8008672:	441c      	add	r4, r3
 8008674:	f024 0403 	bic.w	r4, r4, #3
 8008678:	3404      	adds	r4, #4
 800867a:	4425      	add	r5, r4
 800867c:	4420      	add	r0, r4
 800867e:	3101      	adds	r1, #1
 8008680:	428e      	cmp	r6, r1
 8008682:	4448      	add	r0, r9
 8008684:	d1e6      	bne.n	8008654 <forward_conv2d+0x4a8>
 8008686:	e003      	b.n	8008690 <forward_conv2d+0x4e4>
 8008688:	00000000 	.word	0x00000000
 800868c:	08007df1 	.word	0x08007df1
 8008690:	f10c 0c01 	add.w	ip, ip, #1
 8008694:	45e2      	cmp	sl, ip
 8008696:	4458      	add	r0, fp
 8008698:	4445      	add	r5, r8
 800869a:	d1d8      	bne.n	800864e <forward_conv2d+0x4a2>
 800869c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80086a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086a4:	441d      	add	r5, r3
 80086a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086aa:	ece3 7a01 	vstmia	r3!, {s15}
 80086ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d1b9      	bne.n	800862e <forward_conv2d+0x482>
 80086ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80086be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086c2:	4472      	add	r2, lr
 80086c4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80086c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086ca:	1a52      	subs	r2, r2, r1
 80086cc:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80086d0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80086d4:	3301      	adds	r3, #1
 80086d6:	429a      	cmp	r2, r3
 80086d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80086da:	d19d      	bne.n	8008618 <forward_conv2d+0x46c>
 80086dc:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80086e0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80086e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086e6:	4608      	mov	r0, r1
 80086e8:	4410      	add	r0, r2
 80086ea:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80086ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 80086f2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80086f6:	4401      	add	r1, r0
 80086f8:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80086fc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008700:	1a8a      	subs	r2, r1, r2
 8008702:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8008706:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800870a:	3301      	adds	r3, #1
 800870c:	429a      	cmp	r2, r3
 800870e:	673b      	str	r3, [r7, #112]	; 0x70
 8008710:	f47f af18 	bne.w	8008544 <forward_conv2d+0x398>
 8008714:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8008718:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800871c:	b383      	cbz	r3, 8008780 <forward_conv2d+0x5d4>
 800871e:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8008722:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 8008726:	f8d7 80e0 	ldr.w	r8, [r7, #224]	; 0xe0
 800872a:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
 800872e:	2500      	movs	r5, #0
 8008730:	46a2      	mov	sl, r4
 8008732:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008736:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800873a:	f8c3 a008 	str.w	sl, [r3, #8]
 800873e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8008742:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8008746:	4633      	mov	r3, r6
 8008748:	4608      	mov	r0, r1
 800874a:	4416      	add	r6, r2
 800874c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008750:	47a0      	blx	r4
 8008752:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008756:	4492      	add	sl, r2
 8008758:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800875c:	eba6 0309 	sub.w	r3, r6, r9
 8008760:	4293      	cmp	r3, r2
 8008762:	bfa8      	it	ge
 8008764:	464e      	movge	r6, r9
 8008766:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800876a:	3501      	adds	r5, #1
 800876c:	42ab      	cmp	r3, r5
 800876e:	d1e0      	bne.n	8008732 <forward_conv2d+0x586>
 8008770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 800877a:	4413      	add	r3, r2
 800877c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008784:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	609a      	str	r2, [r3, #8]
 800878c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008792:	4610      	mov	r0, r2
 8008794:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008798:	4418      	add	r0, r3
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087a6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80087aa:	4413      	add	r3, r2
 80087ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087b4:	3101      	adds	r1, #1
 80087b6:	428b      	cmp	r3, r1
 80087b8:	67f9      	str	r1, [r7, #124]	; 0x7c
 80087ba:	f47f ae42 	bne.w	8008442 <forward_conv2d+0x296>
 80087be:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80087c2:	46bd      	mov	sp, r7
 80087c4:	ecbd 8b10 	vpop	{d8-d15}
 80087c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087cc:	461a      	mov	r2, r3
 80087ce:	e767      	b.n	80086a0 <forward_conv2d+0x4f4>
 80087d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80087d4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80087d8:	fb90 f3f2 	sdiv	r3, r0, r2
 80087dc:	fb02 0313 	mls	r3, r2, r3, r0
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	4605      	mov	r5, r0
 80087e4:	fb93 f0f2 	sdiv	r0, r3, r2
 80087e8:	fb02 3010 	mls	r0, r2, r0, r3
 80087ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ee:	462e      	mov	r6, r5
 80087f0:	18c4      	adds	r4, r0, r3
 80087f2:	eb02 0805 	add.w	r8, r2, r5
 80087f6:	e6b6      	b.n	8008566 <forward_conv2d+0x3ba>
 80087f8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80087fa:	2901      	cmp	r1, #1
 80087fc:	f47f ae39 	bne.w	8008472 <forward_conv2d+0x2c6>
 8008800:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008804:	2900      	cmp	r1, #0
 8008806:	d0bb      	beq.n	8008780 <forward_conv2d+0x5d4>
 8008808:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800880c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008810:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 8008814:	fbb1 f5f0 	udiv	r5, r1, r0
 8008818:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800881c:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8008820:	63bd      	str	r5, [r7, #56]	; 0x38
 8008822:	1ad2      	subs	r2, r2, r3
 8008824:	1a8c      	subs	r4, r1, r2
 8008826:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800882a:	00b2      	lsls	r2, r6, #2
 800882c:	fb02 f204 	mul.w	r2, r2, r4
 8008830:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 8008834:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8008838:	637a      	str	r2, [r7, #52]	; 0x34
 800883a:	0082      	lsls	r2, r0, #2
 800883c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800883e:	00ca      	lsls	r2, r1, #3
 8008840:	603a      	str	r2, [r7, #0]
 8008842:	00aa      	lsls	r2, r5, #2
 8008844:	60ba      	str	r2, [r7, #8]
 8008846:	fb03 f206 	mul.w	r2, r3, r6
 800884a:	673a      	str	r2, [r7, #112]	; 0x70
 800884c:	6a3a      	ldr	r2, [r7, #32]
 800884e:	fb02 f303 	mul.w	r3, r2, r3
 8008852:	61fb      	str	r3, [r7, #28]
 8008854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008858:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800885c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008860:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008868:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800886c:	2300      	movs	r3, #0
 800886e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008872:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008876:	2b00      	cmp	r3, #0
 8008878:	f2c0 826c 	blt.w	8008d54 <forward_conv2d+0xba8>
 800887c:	2100      	movs	r1, #0
 800887e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008880:	460a      	mov	r2, r1
 8008882:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8008886:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800888a:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800888e:	4420      	add	r0, r4
 8008890:	4408      	add	r0, r1
 8008892:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8008896:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800889a:	190c      	adds	r4, r1, r4
 800889c:	42ac      	cmp	r4, r5
 800889e:	bf28      	it	cs
 80088a0:	462c      	movcs	r4, r5
 80088a2:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 80088a6:	0080      	lsls	r0, r0, #2
 80088a8:	1aa4      	subs	r4, r4, r2
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	f000 8243 	beq.w	8008d36 <forward_conv2d+0xb8a>
 80088b0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80088b4:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 80088b8:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80088bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80088c0:	42b5      	cmp	r5, r6
 80088c2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80088c6:	eba3 0204 	sub.w	r2, r3, r4
 80088ca:	eba1 0104 	sub.w	r1, r1, r4
 80088ce:	bf08      	it	eq
 80088d0:	eef0 3a48 	vmoveq.f32	s7, s16
 80088d4:	462b      	mov	r3, r5
 80088d6:	69fd      	ldr	r5, [r7, #28]
 80088d8:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 80088dc:	4428      	add	r0, r5
 80088de:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 80088e2:	fb05 6e00 	mla	lr, r5, r0, r6
 80088e6:	eb0e 000b 	add.w	r0, lr, fp
 80088ea:	4586      	cmp	lr, r0
 80088ec:	6278      	str	r0, [r7, #36]	; 0x24
 80088ee:	f080 80a5 	bcs.w	8008a3c <forward_conv2d+0x890>
 80088f2:	0092      	lsls	r2, r2, #2
 80088f4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80088f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088fa:	fb01 f10b 	mul.w	r1, r1, fp
 80088fe:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8008902:	f024 0803 	bic.w	r8, r4, #3
 8008906:	2a00      	cmp	r2, #0
 8008908:	f000 8098 	beq.w	8008a3c <forward_conv2d+0x890>
 800890c:	f108 32ff 	add.w	r2, r8, #4294967295
 8008910:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008912:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008916:	0892      	lsrs	r2, r2, #2
 8008918:	3201      	adds	r2, #1
 800891a:	4401      	add	r1, r0
 800891c:	fb02 f00a 	mul.w	r0, r2, sl
 8008920:	6578      	str	r0, [r7, #84]	; 0x54
 8008922:	0110      	lsls	r0, r2, #4
 8008924:	0092      	lsls	r2, r2, #2
 8008926:	653a      	str	r2, [r7, #80]	; 0x50
 8008928:	1aca      	subs	r2, r1, r3
 800892a:	613a      	str	r2, [r7, #16]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	66b8      	str	r0, [r7, #104]	; 0x68
 8008930:	4413      	add	r3, r2
 8008932:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008936:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800893a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893c:	4413      	add	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	4413      	add	r3, r2
 8008948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800894a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800894e:	ecf3 6a01 	vldmia	r3!, {s13}
 8008952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008956:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800895a:	2b00      	cmp	r3, #0
 800895c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008960:	dd57      	ble.n	8008a12 <forward_conv2d+0x866>
 8008962:	4676      	mov	r6, lr
 8008964:	f04f 0c00 	mov.w	ip, #0
 8008968:	f1b8 0f00 	cmp.w	r8, #0
 800896c:	f340 81e1 	ble.w	8008d32 <forward_conv2d+0xb86>
 8008970:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008974:	f109 0310 	add.w	r3, r9, #16
 8008978:	18b1      	adds	r1, r6, r2
 800897a:	2000      	movs	r0, #0
 800897c:	4632      	mov	r2, r6
 800897e:	eb02 050b 	add.w	r5, r2, fp
 8008982:	ed95 7a00 	vldr	s14, [r5]
 8008986:	ed53 7a03 	vldr	s15, [r3, #-12]
 800898a:	ed92 4a00 	vldr	s8, [r2]
 800898e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008992:	ed91 5a00 	vldr	s10, [r1]
 8008996:	ed53 5a02 	vldr	s11, [r3, #-8]
 800899a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	eb01 050b 	add.w	r5, r1, fp
 80089a6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80089aa:	3004      	adds	r0, #4
 80089ac:	4540      	cmp	r0, r8
 80089ae:	ed95 7a00 	vldr	s14, [r5]
 80089b2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80089b6:	4452      	add	r2, sl
 80089b8:	4451      	add	r1, sl
 80089ba:	f103 0310 	add.w	r3, r3, #16
 80089be:	eee7 7a06 	vfma.f32	s15, s14, s12
 80089c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80089c6:	dbda      	blt.n	800897e <forward_conv2d+0x7d2>
 80089c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80089cc:	441e      	add	r6, r3
 80089ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089d0:	4499      	add	r9, r3
 80089d2:	4284      	cmp	r4, r0
 80089d4:	dd11      	ble.n	80089fa <forward_conv2d+0x84e>
 80089d6:	4602      	mov	r2, r0
 80089d8:	4633      	mov	r3, r6
 80089da:	4649      	mov	r1, r9
 80089dc:	edd3 7a00 	vldr	s15, [r3]
 80089e0:	ecb1 7a01 	vldmia	r1!, {s14}
 80089e4:	3201      	adds	r2, #1
 80089e6:	4294      	cmp	r4, r2
 80089e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089ec:	445b      	add	r3, fp
 80089ee:	d1f5      	bne.n	80089dc <forward_conv2d+0x830>
 80089f0:	1a20      	subs	r0, r4, r0
 80089f2:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80089f6:	fb00 660b 	mla	r6, r0, fp, r6
 80089fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089fe:	441e      	add	r6, r3
 8008a00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a04:	4499      	add	r9, r3
 8008a06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a0a:	f10c 0c01 	add.w	ip, ip, #1
 8008a0e:	4563      	cmp	r3, ip
 8008a10:	d1aa      	bne.n	8008968 <forward_conv2d+0x7bc>
 8008a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a14:	4499      	add	r9, r3
 8008a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a18:	ece3 6a01 	vstmia	r3!, {s13}
 8008a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a1e:	e9d7 232d 	ldrd	r2, r3, [r7, #180]	; 0xb4
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d191      	bne.n	800894a <forward_conv2d+0x79e>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	f10e 0e04 	add.w	lr, lr, #4
 8008a36:	459e      	cmp	lr, r3
 8008a38:	f4ff af7d 	bcc.w	8008936 <forward_conv2d+0x78a>
 8008a3c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008a40:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a48:	440a      	add	r2, r1
 8008a4a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008a4e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008a52:	4608      	mov	r0, r1
 8008a54:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008a58:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008a5c:	4410      	add	r0, r2
 8008a5e:	1a8a      	subs	r2, r1, r2
 8008a60:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008a64:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008a68:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008a74:	f47f aefd 	bne.w	8008872 <forward_conv2d+0x6c6>
 8008a78:	e64e      	b.n	8008718 <forward_conv2d+0x56c>
 8008a7a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008a7c:	2801      	cmp	r0, #1
 8008a7e:	f47f acf8 	bne.w	8008472 <forward_conv2d+0x2c6>
 8008a82:	1ad2      	subs	r2, r2, r3
 8008a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a86:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8008a8a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a90:	fb00 4101 	mla	r1, r0, r1, r4
 8008a94:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008a98:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8008a9c:	f080 819a 	bcs.w	8008dd4 <forward_conv2d+0xc28>
 8008aa0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	f43f ae37 	beq.w	8008718 <forward_conv2d+0x56c>
 8008aaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008aac:	f8c7 b038 	str.w	fp, [r7, #56]	; 0x38
 8008ab0:	fb02 f303 	mul.w	r3, r2, r3
 8008ab4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ab8:	1a9b      	subs	r3, r3, r2
 8008aba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008abc:	188b      	adds	r3, r1, r2
 8008abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ac4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008acc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ad4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 814a 	beq.w	8008d7c <forward_conv2d+0xbd0>
 8008ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aec:	ed93 6a00 	vldr	s12, [r3]
 8008af0:	3304      	adds	r3, #4
 8008af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008af6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 8101 	beq.w	8008d02 <forward_conv2d+0xb56>
 8008b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b08:	eb03 0802 	add.w	r8, r3, r2
 8008b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b1c:	673b      	str	r3, [r7, #112]	; 0x70
 8008b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b26:	f04f 0b00 	mov.w	fp, #0
 8008b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f2c0 811b 	blt.w	8008d6a <forward_conv2d+0xbbe>
 8008b34:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008b38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008b40:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008b44:	eb02 0c04 	add.w	ip, r2, r4
 8008b48:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008b4c:	4540      	cmp	r0, r8
 8008b4e:	bf94      	ite	ls
 8008b50:	ebc3 0300 	rsbls	r3, r3, r0
 8008b54:	ebc3 0308 	rsbhi	r3, r3, r8
 8008b58:	eba2 0903 	sub.w	r9, r2, r3
 8008b5c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008b60:	1ac4      	subs	r4, r0, r3
 8008b62:	fb03 f302 	mul.w	r3, r3, r2
 8008b66:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008b6a:	2a00      	cmp	r2, #0
 8008b6c:	f340 80fa 	ble.w	8008d64 <forward_conv2d+0xbb8>
 8008b70:	f023 050f 	bic.w	r5, r3, #15
 8008b74:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 8008b78:	1e68      	subs	r0, r5, #1
 8008b7a:	0900      	lsrs	r0, r0, #4
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	fb06 f204 	mul.w	r2, r6, r4
 8008b82:	657a      	str	r2, [r7, #84]	; 0x54
 8008b84:	0102      	lsls	r2, r0, #4
 8008b86:	653a      	str	r2, [r7, #80]	; 0x50
 8008b88:	fb06 f909 	mul.w	r9, r6, r9
 8008b8c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008b90:	eef0 6a46 	vmov.f32	s13, s12
 8008b94:	f04f 0e00 	mov.w	lr, #0
 8008b98:	4662      	mov	r2, ip
 8008b9a:	2d00      	cmp	r5, #0
 8008b9c:	f340 80e0 	ble.w	8008d60 <forward_conv2d+0xbb4>
 8008ba0:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008ba4:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008ba8:	2600      	movs	r6, #0
 8008baa:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8008bae:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8008bb2:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8008bb6:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8008bba:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 8008bbe:	ed50 da0d 	vldr	s27, [r0, #-52]	; 0xffffffcc
 8008bc2:	ed14 da0d 	vldr	s26, [r4, #-52]	; 0xffffffcc
 8008bc6:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8008bca:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8008bce:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8008bd2:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8008bd6:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8008bda:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8008bde:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8008be2:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8008be6:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8008bea:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8008bee:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8008bf2:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8008bf6:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008bfa:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 8008bfe:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008c02:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8008c06:	ed50 3a04 	vldr	s7, [r0, #-16]
 8008c0a:	ed14 4a04 	vldr	s8, [r4, #-16]
 8008c0e:	ed50 4a03 	vldr	s9, [r0, #-12]
 8008c12:	ed14 5a03 	vldr	s10, [r4, #-12]
 8008c16:	ed50 5a02 	vldr	s11, [r0, #-8]
 8008c1a:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008c1e:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8008c22:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 8008c26:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008c2a:	3610      	adds	r6, #16
 8008c2c:	42ae      	cmp	r6, r5
 8008c2e:	ed14 fa01 	vldr	s30, [r4, #-4]
 8008c32:	ed50 ea01 	vldr	s29, [r0, #-4]
 8008c36:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8008c3a:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008c3e:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008c42:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008c46:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008c4a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008c4e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008c52:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008c56:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008c5a:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008c5e:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008c62:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008c66:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008c6a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008c6e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008c72:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008c76:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008c7a:	db96      	blt.n	8008baa <forward_conv2d+0x9fe>
 8008c7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c7e:	4451      	add	r1, sl
 8008c80:	4452      	add	r2, sl
 8008c82:	4283      	cmp	r3, r0
 8008c84:	dd0f      	ble.n	8008ca6 <forward_conv2d+0xafa>
 8008c86:	4604      	mov	r4, r0
 8008c88:	468c      	mov	ip, r1
 8008c8a:	4616      	mov	r6, r2
 8008c8c:	ecb6 7a01 	vldmia	r6!, {s14}
 8008c90:	ecfc 7a01 	vldmia	ip!, {s15}
 8008c94:	3401      	adds	r4, #1
 8008c96:	42a3      	cmp	r3, r4
 8008c98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c9c:	d1f6      	bne.n	8008c8c <forward_conv2d+0xae0>
 8008c9e:	1a18      	subs	r0, r3, r0
 8008ca0:	0080      	lsls	r0, r0, #2
 8008ca2:	4402      	add	r2, r0
 8008ca4:	4401      	add	r1, r0
 8008ca6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ca8:	4402      	add	r2, r0
 8008caa:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8008cae:	f10e 0e01 	add.w	lr, lr, #1
 8008cb2:	4570      	cmp	r0, lr
 8008cb4:	4449      	add	r1, r9
 8008cb6:	f47f af70 	bne.w	8008b9a <forward_conv2d+0x9ee>
 8008cba:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cc0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008cc4:	edc3 6a00 	vstr	s13, [r3]
 8008cc8:	4608      	mov	r0, r1
 8008cca:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008cce:	440b      	add	r3, r1
 8008cd0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008cd4:	673b      	str	r3, [r7, #112]	; 0x70
 8008cd6:	4410      	add	r0, r2
 8008cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cda:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8008cde:	4608      	mov	r0, r1
 8008ce0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008ce4:	4418      	add	r0, r3
 8008ce6:	1acb      	subs	r3, r1, r3
 8008ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cf0:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8008cf4:	f10b 0b01 	add.w	fp, fp, #1
 8008cf8:	455b      	cmp	r3, fp
 8008cfa:	eba8 0802 	sub.w	r8, r8, r2
 8008cfe:	f47f af14 	bne.w	8008b2a <forward_conv2d+0x97e>
 8008d02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008d06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d12:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008d16:	3204      	adds	r2, #4
 8008d18:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008d1c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008d20:	3301      	adds	r3, #1
 8008d22:	429a      	cmp	r2, r3
 8008d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d28:	f47f aed9 	bne.w	8008ade <forward_conv2d+0x932>
 8008d2c:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
 8008d30:	e4f2      	b.n	8008718 <forward_conv2d+0x56c>
 8008d32:	2000      	movs	r0, #0
 8008d34:	e64d      	b.n	80089d2 <forward_conv2d+0x826>
 8008d36:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8008d3a:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8008d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d42:	1b19      	subs	r1, r3, r4
 8008d44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d48:	eef0 3a48 	vmov.f32	s7, s16
 8008d4c:	1b1a      	subs	r2, r3, r4
 8008d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d52:	e5c0      	b.n	80088d6 <forward_conv2d+0x72a>
 8008d54:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	440b      	add	r3, r1
 8008d5e:	e590      	b.n	8008882 <forward_conv2d+0x6d6>
 8008d60:	2000      	movs	r0, #0
 8008d62:	e78e      	b.n	8008c82 <forward_conv2d+0xad6>
 8008d64:	eef0 6a46 	vmov.f32	s13, s12
 8008d68:	e7a7      	b.n	8008cba <forward_conv2d+0xb0e>
 8008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d72:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008d76:	eba8 0303 	sub.w	r3, r8, r3
 8008d7a:	e6df      	b.n	8008b3c <forward_conv2d+0x990>
 8008d7c:	eeb0 6a48 	vmov.f32	s12, s16
 8008d80:	e6b9      	b.n	8008af6 <forward_conv2d+0x94a>
 8008d82:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008d86:	68ca      	ldr	r2, [r1, #12]
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	f43f aaca 	beq.w	8008322 <forward_conv2d+0x176>
 8008d8e:	6973      	ldr	r3, [r6, #20]
 8008d90:	8818      	ldrh	r0, [r3, #0]
 8008d92:	2803      	cmp	r0, #3
 8008d94:	f240 8194 	bls.w	80090c0 <forward_conv2d+0xf14>
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 818c 	beq.w	80090ba <forward_conv2d+0xf0e>
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 8188 	beq.w	80090ba <forward_conv2d+0xf0e>
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	6889      	ldr	r1, [r1, #8]
 8008dae:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008db8:	9000      	str	r0, [sp, #0]
 8008dba:	462b      	mov	r3, r5
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f7ff f9a5 	bl	800810c <ai_dict_decompress_f32>
 8008dc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dc6:	2c00      	cmp	r4, #0
 8008dc8:	bf18      	it	ne
 8008dca:	4623      	movne	r3, r4
 8008dcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008dd0:	f7ff baa7 	b.w	8008322 <forward_conv2d+0x176>
 8008dd4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008dd8:	f8c7 d068 	str.w	sp, [r7, #104]	; 0x68
 8008ddc:	320a      	adds	r2, #10
 8008dde:	f022 0207 	bic.w	r2, r2, #7
 8008de2:	ebad 0d02 	sub.w	sp, sp, r2
 8008de6:	aa02      	add	r2, sp, #8
 8008de8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008dec:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008df0:	2a00      	cmp	r2, #0
 8008df2:	f000 814d 	beq.w	8009090 <forward_conv2d+0xee4>
 8008df6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008df8:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8008dfc:	fb02 f303 	mul.w	r3, r2, r3
 8008e00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e02:	657b      	str	r3, [r7, #84]	; 0x54
 8008e04:	1a9b      	subs	r3, r3, r2
 8008e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e0c:	4413      	add	r3, r2
 8008e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e1c:	673b      	str	r3, [r7, #112]	; 0x70
 8008e1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e26:	2300      	movs	r3, #0
 8008e28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e2e:	b13b      	cbz	r3, 8008e40 <forward_conv2d+0xc94>
 8008e30:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008e34:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008e38:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8008e3c:	f000 fdd6 	bl	80099ec <memcpy>
 8008e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8135 	beq.w	80090b4 <forward_conv2d+0xf08>
 8008e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e4c:	ed93 6a00 	vldr	s12, [r3]
 8008e50:	3304      	adds	r3, #4
 8008e52:	673b      	str	r3, [r7, #112]	; 0x70
 8008e54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8101 	beq.w	8009060 <forward_conv2d+0xeb4>
 8008e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008e66:	eb03 0802 	add.w	r8, r3, r2
 8008e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e84:	f04f 0b00 	mov.w	fp, #0
 8008e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f2c0 8108 	blt.w	80090a2 <forward_conv2d+0xef6>
 8008e92:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008e96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8008e9e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008ea2:	eb02 0c04 	add.w	ip, r2, r4
 8008ea6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008eaa:	4540      	cmp	r0, r8
 8008eac:	bf94      	ite	ls
 8008eae:	ebc3 0300 	rsbls	r3, r3, r0
 8008eb2:	ebc3 0308 	rsbhi	r3, r3, r8
 8008eb6:	eba2 0903 	sub.w	r9, r2, r3
 8008eba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008ebe:	1ac4      	subs	r4, r0, r3
 8008ec0:	fb03 f302 	mul.w	r3, r3, r2
 8008ec4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008ec8:	2a00      	cmp	r2, #0
 8008eca:	f340 80e7 	ble.w	800909c <forward_conv2d+0xef0>
 8008ece:	f023 050f 	bic.w	r5, r3, #15
 8008ed2:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 8008ed6:	1e68      	subs	r0, r5, #1
 8008ed8:	0900      	lsrs	r0, r0, #4
 8008eda:	3001      	adds	r0, #1
 8008edc:	fb06 f204 	mul.w	r2, r6, r4
 8008ee0:	653a      	str	r2, [r7, #80]	; 0x50
 8008ee2:	0102      	lsls	r2, r0, #4
 8008ee4:	637a      	str	r2, [r7, #52]	; 0x34
 8008ee6:	fb06 f909 	mul.w	r9, r6, r9
 8008eea:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008eee:	eef0 6a46 	vmov.f32	s13, s12
 8008ef2:	f04f 0e00 	mov.w	lr, #0
 8008ef6:	4662      	mov	r2, ip
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	f340 80cd 	ble.w	8009098 <forward_conv2d+0xeec>
 8008efe:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008f02:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008f06:	2600      	movs	r6, #0
 8008f08:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8008f0c:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8008f10:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8008f14:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8008f18:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 8008f1c:	ed50 da0d 	vldr	s27, [r0, #-52]	; 0xffffffcc
 8008f20:	ed14 da0d 	vldr	s26, [r4, #-52]	; 0xffffffcc
 8008f24:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8008f28:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8008f2c:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8008f30:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8008f34:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8008f38:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8008f3c:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8008f40:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8008f44:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8008f48:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8008f4c:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 8008f50:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8008f54:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8008f58:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8008f5c:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8008f60:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8008f64:	ed54 3a04 	vldr	s7, [r4, #-16]
 8008f68:	ed10 4a04 	vldr	s8, [r0, #-16]
 8008f6c:	ed54 4a03 	vldr	s9, [r4, #-12]
 8008f70:	ed10 5a03 	vldr	s10, [r0, #-12]
 8008f74:	ed54 5a02 	vldr	s11, [r4, #-8]
 8008f78:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008f7c:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8008f80:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 8008f84:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008f88:	3610      	adds	r6, #16
 8008f8a:	42ae      	cmp	r6, r5
 8008f8c:	ed10 fa01 	vldr	s30, [r0, #-4]
 8008f90:	ed54 ea01 	vldr	s29, [r4, #-4]
 8008f94:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8008f98:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008f9c:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008fa0:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008fa4:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008fa8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008fac:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008fb0:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008fb4:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008fb8:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008fbc:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008fc0:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008fc4:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008fc8:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008fcc:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008fd0:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008fd4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008fd8:	db96      	blt.n	8008f08 <forward_conv2d+0xd5c>
 8008fda:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008fdc:	4451      	add	r1, sl
 8008fde:	4452      	add	r2, sl
 8008fe0:	4283      	cmp	r3, r0
 8008fe2:	dd0f      	ble.n	8009004 <forward_conv2d+0xe58>
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	468c      	mov	ip, r1
 8008fe8:	4616      	mov	r6, r2
 8008fea:	ecb6 7a01 	vldmia	r6!, {s14}
 8008fee:	ecfc 7a01 	vldmia	ip!, {s15}
 8008ff2:	3401      	adds	r4, #1
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008ffa:	d1f6      	bne.n	8008fea <forward_conv2d+0xe3e>
 8008ffc:	1a18      	subs	r0, r3, r0
 8008ffe:	0080      	lsls	r0, r0, #2
 8009000:	4402      	add	r2, r0
 8009002:	4401      	add	r1, r0
 8009004:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009006:	4402      	add	r2, r0
 8009008:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800900c:	f10e 0e01 	add.w	lr, lr, #1
 8009010:	4570      	cmp	r0, lr
 8009012:	4449      	add	r1, r9
 8009014:	f47f af70 	bne.w	8008ef8 <forward_conv2d+0xd4c>
 8009018:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800901c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800901e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009022:	edc3 6a00 	vstr	s13, [r3]
 8009026:	4608      	mov	r0, r1
 8009028:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800902c:	440b      	add	r3, r1
 800902e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009034:	4410      	add	r0, r2
 8009036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009038:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800903c:	4608      	mov	r0, r1
 800903e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009042:	4418      	add	r0, r3
 8009044:	1acb      	subs	r3, r1, r3
 8009046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800904a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800904e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8009052:	f10b 0b01 	add.w	fp, fp, #1
 8009056:	455b      	cmp	r3, fp
 8009058:	eba8 0802 	sub.w	r8, r8, r2
 800905c:	f47f af14 	bne.w	8008e88 <forward_conv2d+0xcdc>
 8009060:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009064:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800906c:	440a      	add	r2, r1
 800906e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009072:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009076:	3204      	adds	r2, #4
 8009078:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800907c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009080:	3301      	adds	r3, #1
 8009082:	429a      	cmp	r2, r3
 8009084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009088:	f47f aed0 	bne.w	8008e2c <forward_conv2d+0xc80>
 800908c:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8009090:	f8d7 d068 	ldr.w	sp, [r7, #104]	; 0x68
 8009094:	f7ff bb40 	b.w	8008718 <forward_conv2d+0x56c>
 8009098:	2000      	movs	r0, #0
 800909a:	e7a1      	b.n	8008fe0 <forward_conv2d+0xe34>
 800909c:	eef0 6a46 	vmov.f32	s13, s12
 80090a0:	e7ba      	b.n	8009018 <forward_conv2d+0xe6c>
 80090a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80090aa:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80090ae:	eba8 0303 	sub.w	r3, r8, r3
 80090b2:	e6f2      	b.n	8008e9a <forward_conv2d+0xcee>
 80090b4:	eeb0 6a48 	vmov.f32	s12, s16
 80090b8:	e6cc      	b.n	8008e54 <forward_conv2d+0xca8>
 80090ba:	2300      	movs	r3, #0
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	deff      	udf	#255	; 0xff
 80090c0:	2300      	movs	r3, #0
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	deff      	udf	#255	; 0xff
 80090c6:	b178      	cbz	r0, 80090e8 <forward_conv2d+0xf3c>
 80090c8:	6883      	ldr	r3, [r0, #8]
 80090ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090ce:	2301      	movs	r3, #1
 80090d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80090d4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80090d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090dc:	f7ff b8f2 	b.w	80082c4 <forward_conv2d+0x118>
 80090e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80090e4:	f7ff b8d2 	b.w	800828c <forward_conv2d+0xe0>
 80090e8:	2301      	movs	r3, #1
 80090ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80090ee:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80090f2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80090f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090fa:	f7ff b8e3 	b.w	80082c4 <forward_conv2d+0x118>
 80090fe:	3218      	adds	r2, #24
 8009100:	d007      	beq.n	8009112 <forward_conv2d+0xf66>
 8009102:	462b      	mov	r3, r5
 8009104:	462c      	mov	r4, r5
 8009106:	462a      	mov	r2, r5
 8009108:	f7ff b87a 	b.w	8008200 <forward_conv2d+0x54>
 800910c:	2300      	movs	r3, #0
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	deff      	udf	#255	; 0xff
 8009112:	68d3      	ldr	r3, [r2, #12]
 8009114:	deff      	udf	#255	; 0xff
 8009116:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800911a:	f7ff b860 	b.w	80081de <forward_conv2d+0x32>
 800911e:	2300      	movs	r3, #0
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	deff      	udf	#255	; 0xff
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	deff      	udf	#255	; 0xff
 8009128:	2300      	movs	r3, #0
 800912a:	f7ff b868 	b.w	80081fe <forward_conv2d+0x52>
 800912e:	bf00      	nop

08009130 <forward_dense>:
 8009130:	6942      	ldr	r2, [r0, #20]
 8009132:	8813      	ldrh	r3, [r2, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 81ca 	beq.w	80094ce <forward_dense+0x39e>
 800913a:	6852      	ldr	r2, [r2, #4]
 800913c:	6850      	ldr	r0, [r2, #4]
 800913e:	b100      	cbz	r0, 8009142 <forward_dense+0x12>
 8009140:	6800      	ldr	r0, [r0, #0]
 8009142:	2b01      	cmp	r3, #1
 8009144:	f240 81c0 	bls.w	80094c8 <forward_dense+0x398>
 8009148:	6911      	ldr	r1, [r2, #16]
 800914a:	b101      	cbz	r1, 800914e <forward_dense+0x1e>
 800914c:	6809      	ldr	r1, [r1, #0]
 800914e:	2b02      	cmp	r3, #2
 8009150:	f000 81bf 	beq.w	80094d2 <forward_dense+0x3a2>
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	ed2d 8b10 	vpush	{d8-d15}
 800915c:	69d3      	ldr	r3, [r2, #28]
 800915e:	b091      	sub	sp, #68	; 0x44
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 820b 	beq.w	800957c <forward_dense+0x44c>
 8009166:	681c      	ldr	r4, [r3, #0]
 8009168:	9408      	str	r4, [sp, #32]
 800916a:	f112 0418 	adds.w	r4, r2, #24
 800916e:	f000 81df 	beq.w	8009530 <forward_dense+0x400>
 8009172:	8b12      	ldrh	r2, [r2, #24]
 8009174:	2a01      	cmp	r2, #1
 8009176:	f240 81fe 	bls.w	8009576 <forward_dense+0x446>
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 81da 	beq.w	8009534 <forward_dense+0x404>
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	9306      	str	r3, [sp, #24]
 8009184:	9b08      	ldr	r3, [sp, #32]
 8009186:	68cc      	ldr	r4, [r1, #12]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	68c5      	ldr	r5, [r0, #12]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8009192:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009196:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 800919a:	f3c2 5541 	ubfx	r5, r2, #21, #2
 800919e:	fa4c f505 	asr.w	r5, ip, r5
 80091a2:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80091a6:	950b      	str	r5, [sp, #44]	; 0x2c
 80091a8:	2a04      	cmp	r2, #4
 80091aa:	fb07 f506 	mul.w	r5, r7, r6
 80091ae:	6864      	ldr	r4, [r4, #4]
 80091b0:	9507      	str	r5, [sp, #28]
 80091b2:	f000 81dd 	beq.w	8009570 <forward_dense+0x440>
 80091b6:	2a08      	cmp	r2, #8
 80091b8:	f000 81da 	beq.w	8009570 <forward_dense+0x440>
 80091bc:	f04f 0a00 	mov.w	sl, #0
 80091c0:	698a      	ldr	r2, [r1, #24]
 80091c2:	6981      	ldr	r1, [r0, #24]
 80091c4:	6890      	ldr	r0, [r2, #8]
 80091c6:	9a08      	ldr	r2, [sp, #32]
 80091c8:	9004      	str	r0, [sp, #16]
 80091ca:	6952      	ldr	r2, [r2, #20]
 80091cc:	688f      	ldr	r7, [r1, #8]
 80091ce:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80091d2:	00a2      	lsls	r2, r4, #2
 80091d4:	9209      	str	r2, [sp, #36]	; 0x24
 80091d6:	1886      	adds	r6, r0, r2
 80091d8:	9a07      	ldr	r2, [sp, #28]
 80091da:	2a00      	cmp	r2, #0
 80091dc:	f000 81c3 	beq.w	8009566 <forward_dense+0x436>
 80091e0:	f1a8 0210 	sub.w	r2, r8, #16
 80091e4:	0912      	lsrs	r2, r2, #4
 80091e6:	3201      	adds	r2, #1
 80091e8:	0192      	lsls	r2, r2, #6
 80091ea:	920c      	str	r2, [sp, #48]	; 0x30
 80091ec:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80091f0:	920a      	str	r2, [sp, #40]	; 0x28
 80091f2:	689d      	ldr	r5, [r3, #8]
 80091f4:	9b06      	ldr	r3, [sp, #24]
 80091f6:	eddf aad0 	vldr	s21, [pc, #832]	; 8009538 <forward_dense+0x408>
 80091fa:	2200      	movs	r2, #0
 80091fc:	9205      	str	r2, [sp, #20]
 80091fe:	f008 020f 	and.w	r2, r8, #15
 8009202:	920d      	str	r2, [sp, #52]	; 0x34
 8009204:	2b00      	cmp	r3, #0
 8009206:	d043      	beq.n	8009290 <forward_dense+0x160>
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	689c      	ldr	r4, [r3, #8]
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	f1ba 0f00 	cmp.w	sl, #0
 8009212:	d042      	beq.n	800929a <forward_dense+0x16a>
 8009214:	42b3      	cmp	r3, r6
 8009216:	d22a      	bcs.n	800926e <forward_dense+0x13e>
 8009218:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800921a:	469b      	mov	fp, r3
 800921c:	ab0f      	add	r3, sp, #60	; 0x3c
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	2a04      	cmp	r2, #4
 8009222:	4633      	mov	r3, r6
 8009224:	4646      	mov	r6, r8
 8009226:	4698      	mov	r8, r3
 8009228:	f000 8156 	beq.w	80094d8 <forward_dense+0x3a8>
 800922c:	2c00      	cmp	r4, #0
 800922e:	f000 8185 	beq.w	800953c <forward_dense+0x40c>
 8009232:	f8d4 c000 	ldr.w	ip, [r4]
 8009236:	9803      	ldr	r0, [sp, #12]
 8009238:	9600      	str	r6, [sp, #0]
 800923a:	463b      	mov	r3, r7
 800923c:	4629      	mov	r1, r5
 800923e:	4652      	mov	r2, sl
 8009240:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009244:	f7fe fdd6 	bl	8007df4 <ai_dict8_dot_array_f32>
 8009248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800924a:	f84b 3b04 	str.w	r3, [fp], #4
 800924e:	45c3      	cmp	fp, r8
 8009250:	f104 0404 	add.w	r4, r4, #4
 8009254:	444d      	add	r5, r9
 8009256:	d3e9      	bcc.n	800922c <forward_dense+0xfc>
 8009258:	4643      	mov	r3, r8
 800925a:	46b0      	mov	r8, r6
 800925c:	461e      	mov	r6, r3
 800925e:	9a04      	ldr	r2, [sp, #16]
 8009260:	43d3      	mvns	r3, r2
 8009262:	4433      	add	r3, r6
 8009264:	f023 0303 	bic.w	r3, r3, #3
 8009268:	3304      	adds	r3, #4
 800926a:	18d3      	adds	r3, r2, r3
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009270:	9b05      	ldr	r3, [sp, #20]
 8009272:	4417      	add	r7, r2
 8009274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009276:	4416      	add	r6, r2
 8009278:	9a07      	ldr	r2, [sp, #28]
 800927a:	3301      	adds	r3, #1
 800927c:	4293      	cmp	r3, r2
 800927e:	9305      	str	r3, [sp, #20]
 8009280:	f000 8171 	beq.w	8009566 <forward_dense+0x436>
 8009284:	9b08      	ldr	r3, [sp, #32]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	689d      	ldr	r5, [r3, #8]
 800928a:	9b06      	ldr	r3, [sp, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1bb      	bne.n	8009208 <forward_dense+0xd8>
 8009290:	461c      	mov	r4, r3
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	f1ba 0f00 	cmp.w	sl, #0
 8009298:	d1bc      	bne.n	8009214 <forward_dense+0xe4>
 800929a:	42b3      	cmp	r3, r6
 800929c:	d2e7      	bcs.n	800926e <forward_dense+0x13e>
 800929e:	4618      	mov	r0, r3
 80092a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092a2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80092a6:	eb07 0c03 	add.w	ip, r7, r3
 80092aa:	469e      	mov	lr, r3
 80092ac:	2c00      	cmp	r4, #0
 80092ae:	f000 80ff 	beq.w	80094b0 <forward_dense+0x380>
 80092b2:	f1b8 0f0f 	cmp.w	r8, #15
 80092b6:	edd4 fa00 	vldr	s31, [r4]
 80092ba:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8009538 <forward_dense+0x408>
 80092be:	f104 0404 	add.w	r4, r4, #4
 80092c2:	f240 80fd 	bls.w	80094c0 <forward_dense+0x390>
 80092c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80092ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80092ce:	4641      	mov	r1, r8
 80092d0:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80092d4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80092d8:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 80092dc:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 80092e0:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 80092e4:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 80092e8:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 80092ec:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 80092f0:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 80092f4:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 80092f8:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 80092fc:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8009300:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8009304:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8009308:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800930c:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8009310:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8009314:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8009318:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800931c:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8009320:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8009324:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8009328:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800932c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8009330:	ed52 4a04 	vldr	s9, [r2, #-16]
 8009334:	ed12 5a03 	vldr	s10, [r2, #-12]
 8009338:	ed53 5a03 	vldr	s11, [r3, #-12]
 800933c:	ed12 6a02 	vldr	s12, [r2, #-8]
 8009340:	ed13 7a02 	vldr	s14, [r3, #-8]
 8009344:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8009348:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800934c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8009350:	3910      	subs	r1, #16
 8009352:	290f      	cmp	r1, #15
 8009354:	ed53 ea01 	vldr	s29, [r3, #-4]
 8009358:	ed12 ea01 	vldr	s28, [r2, #-4]
 800935c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8009360:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009364:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009368:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800936c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8009370:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8009374:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009378:	eee8 7a88 	vfma.f32	s15, s17, s16
 800937c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009380:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009384:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009388:	eee3 7a23 	vfma.f32	s15, s6, s7
 800938c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009390:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009394:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009398:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800939c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80093a0:	d896      	bhi.n	80092d0 <forward_dense+0x1a0>
 80093a2:	eb05 010e 	add.w	r1, r5, lr
 80093a6:	465b      	mov	r3, fp
 80093a8:	4662      	mov	r2, ip
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d075      	beq.n	800949a <forward_dense+0x36a>
 80093ae:	ed91 7a00 	vldr	s14, [r1]
 80093b2:	edd2 7a00 	vldr	s15, [r2]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80093bc:	d06d      	beq.n	800949a <forward_dense+0x36a>
 80093be:	ed91 7a01 	vldr	s14, [r1, #4]
 80093c2:	edd2 7a01 	vldr	s15, [r2, #4]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80093cc:	d065      	beq.n	800949a <forward_dense+0x36a>
 80093ce:	ed91 7a02 	vldr	s14, [r1, #8]
 80093d2:	edd2 7a02 	vldr	s15, [r2, #8]
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80093dc:	d05d      	beq.n	800949a <forward_dense+0x36a>
 80093de:	ed91 7a03 	vldr	s14, [r1, #12]
 80093e2:	edd2 7a03 	vldr	s15, [r2, #12]
 80093e6:	2b04      	cmp	r3, #4
 80093e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80093ec:	d055      	beq.n	800949a <forward_dense+0x36a>
 80093ee:	ed91 7a04 	vldr	s14, [r1, #16]
 80093f2:	edd2 7a04 	vldr	s15, [r2, #16]
 80093f6:	2b05      	cmp	r3, #5
 80093f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80093fc:	d04d      	beq.n	800949a <forward_dense+0x36a>
 80093fe:	ed91 7a05 	vldr	s14, [r1, #20]
 8009402:	edd2 7a05 	vldr	s15, [r2, #20]
 8009406:	2b06      	cmp	r3, #6
 8009408:	eee7 6a27 	vfma.f32	s13, s14, s15
 800940c:	d045      	beq.n	800949a <forward_dense+0x36a>
 800940e:	ed91 7a06 	vldr	s14, [r1, #24]
 8009412:	edd2 7a06 	vldr	s15, [r2, #24]
 8009416:	2b07      	cmp	r3, #7
 8009418:	eee7 6a27 	vfma.f32	s13, s14, s15
 800941c:	d03d      	beq.n	800949a <forward_dense+0x36a>
 800941e:	ed91 7a07 	vldr	s14, [r1, #28]
 8009422:	edd2 7a07 	vldr	s15, [r2, #28]
 8009426:	2b08      	cmp	r3, #8
 8009428:	eee7 6a27 	vfma.f32	s13, s14, s15
 800942c:	d035      	beq.n	800949a <forward_dense+0x36a>
 800942e:	ed91 7a08 	vldr	s14, [r1, #32]
 8009432:	edd2 7a08 	vldr	s15, [r2, #32]
 8009436:	2b09      	cmp	r3, #9
 8009438:	eee7 6a27 	vfma.f32	s13, s14, s15
 800943c:	d02d      	beq.n	800949a <forward_dense+0x36a>
 800943e:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8009442:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009446:	2b0a      	cmp	r3, #10
 8009448:	eee7 6a27 	vfma.f32	s13, s14, s15
 800944c:	d025      	beq.n	800949a <forward_dense+0x36a>
 800944e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8009452:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8009456:	2b0b      	cmp	r3, #11
 8009458:	eee7 6a27 	vfma.f32	s13, s14, s15
 800945c:	d01d      	beq.n	800949a <forward_dense+0x36a>
 800945e:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8009462:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8009466:	2b0c      	cmp	r3, #12
 8009468:	eee7 6a27 	vfma.f32	s13, s14, s15
 800946c:	d015      	beq.n	800949a <forward_dense+0x36a>
 800946e:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8009472:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8009476:	2b0d      	cmp	r3, #13
 8009478:	eee7 6a27 	vfma.f32	s13, s14, s15
 800947c:	d00d      	beq.n	800949a <forward_dense+0x36a>
 800947e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8009482:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8009486:	2b0e      	cmp	r3, #14
 8009488:	eee7 6a27 	vfma.f32	s13, s14, s15
 800948c:	d005      	beq.n	800949a <forward_dense+0x36a>
 800948e:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8009492:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009496:	eee7 6a27 	vfma.f32	s13, s14, s15
 800949a:	444d      	add	r5, r9
 800949c:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80094a0:	ece0 6a01 	vstmia	r0!, {s13}
 80094a4:	42b0      	cmp	r0, r6
 80094a6:	f4bf aeda 	bcs.w	800925e <forward_dense+0x12e>
 80094aa:	2c00      	cmp	r4, #0
 80094ac:	f47f af01 	bne.w	80092b2 <forward_dense+0x182>
 80094b0:	f1b8 0f0f 	cmp.w	r8, #15
 80094b4:	eef0 fa6a 	vmov.f32	s31, s21
 80094b8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009538 <forward_dense+0x408>
 80094bc:	f63f af03 	bhi.w	80092c6 <forward_dense+0x196>
 80094c0:	4643      	mov	r3, r8
 80094c2:	4629      	mov	r1, r5
 80094c4:	463a      	mov	r2, r7
 80094c6:	e770      	b.n	80093aa <forward_dense+0x27a>
 80094c8:	2300      	movs	r3, #0
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	deff      	udf	#255	; 0xff
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	deff      	udf	#255	; 0xff
 80094d2:	2300      	movs	r3, #0
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	deff      	udf	#255	; 0xff
 80094d8:	b1ac      	cbz	r4, 8009506 <forward_dense+0x3d6>
 80094da:	f8d4 c000 	ldr.w	ip, [r4]
 80094de:	9803      	ldr	r0, [sp, #12]
 80094e0:	9600      	str	r6, [sp, #0]
 80094e2:	463b      	mov	r3, r7
 80094e4:	4629      	mov	r1, r5
 80094e6:	4652      	mov	r2, sl
 80094e8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80094ec:	f7fe fd50 	bl	8007f90 <ai_dict4_dot_array_f32>
 80094f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094f2:	f84b 3b04 	str.w	r3, [fp], #4
 80094f6:	45c3      	cmp	fp, r8
 80094f8:	f104 0404 	add.w	r4, r4, #4
 80094fc:	444d      	add	r5, r9
 80094fe:	f4bf aeab 	bcs.w	8009258 <forward_dense+0x128>
 8009502:	2c00      	cmp	r4, #0
 8009504:	d1e9      	bne.n	80094da <forward_dense+0x3aa>
 8009506:	4634      	mov	r4, r6
 8009508:	4646      	mov	r6, r8
 800950a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800950e:	9400      	str	r4, [sp, #0]
 8009510:	463b      	mov	r3, r7
 8009512:	4629      	mov	r1, r5
 8009514:	4652      	mov	r2, sl
 8009516:	4640      	mov	r0, r8
 8009518:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800951c:	f7fe fd38 	bl	8007f90 <ai_dict4_dot_array_f32>
 8009520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009522:	f84b 3b04 	str.w	r3, [fp], #4
 8009526:	45b3      	cmp	fp, r6
 8009528:	444d      	add	r5, r9
 800952a:	d3f0      	bcc.n	800950e <forward_dense+0x3de>
 800952c:	46a0      	mov	r8, r4
 800952e:	e696      	b.n	800925e <forward_dense+0x12e>
 8009530:	9406      	str	r4, [sp, #24]
 8009532:	e627      	b.n	8009184 <forward_dense+0x54>
 8009534:	9306      	str	r3, [sp, #24]
 8009536:	e625      	b.n	8009184 <forward_dense+0x54>
 8009538:	00000000 	.word	0x00000000
 800953c:	4634      	mov	r4, r6
 800953e:	4646      	mov	r6, r8
 8009540:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009544:	9400      	str	r4, [sp, #0]
 8009546:	463b      	mov	r3, r7
 8009548:	4629      	mov	r1, r5
 800954a:	4652      	mov	r2, sl
 800954c:	4640      	mov	r0, r8
 800954e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8009552:	f7fe fc4f 	bl	8007df4 <ai_dict8_dot_array_f32>
 8009556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009558:	f84b 3b04 	str.w	r3, [fp], #4
 800955c:	45b3      	cmp	fp, r6
 800955e:	444d      	add	r5, r9
 8009560:	d3f0      	bcc.n	8009544 <forward_dense+0x414>
 8009562:	46a0      	mov	r8, r4
 8009564:	e67b      	b.n	800925e <forward_dense+0x12e>
 8009566:	b011      	add	sp, #68	; 0x44
 8009568:	ecbd 8b10 	vpop	{d8-d15}
 800956c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009570:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8009574:	e624      	b.n	80091c0 <forward_dense+0x90>
 8009576:	2300      	movs	r3, #0
 8009578:	9306      	str	r3, [sp, #24]
 800957a:	e603      	b.n	8009184 <forward_dense+0x54>
 800957c:	9308      	str	r3, [sp, #32]
 800957e:	e5f4      	b.n	800916a <forward_dense+0x3a>

08009580 <nl_func_relu_array_f32>:
 8009580:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009584:	3a01      	subs	r2, #1
 8009586:	688b      	ldr	r3, [r1, #8]
 8009588:	6880      	ldr	r0, [r0, #8]
 800958a:	0092      	lsls	r2, r2, #2
 800958c:	189b      	adds	r3, r3, r2
 800958e:	d21a      	bcs.n	80095c6 <nl_func_relu_array_f32+0x46>
 8009590:	b410      	push	{r4}
 8009592:	3204      	adds	r2, #4
 8009594:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80095c8 <nl_func_relu_array_f32+0x48>
 8009598:	4410      	add	r0, r2
 800959a:	3304      	adds	r3, #4
 800959c:	ed53 7a01 	vldr	s15, [r3, #-4]
 80095a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a8:	bfb8      	it	lt
 80095aa:	eef0 7a47 	vmovlt.f32	s15, s14
 80095ae:	ed60 7a01 	vstmdb	r0!, {s15}
 80095b2:	688c      	ldr	r4, [r1, #8]
 80095b4:	f1a3 0208 	sub.w	r2, r3, #8
 80095b8:	4294      	cmp	r4, r2
 80095ba:	f1a3 0304 	sub.w	r3, r3, #4
 80095be:	d9ed      	bls.n	800959c <nl_func_relu_array_f32+0x1c>
 80095c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	4770      	bx	lr
 80095c8:	00000000 	.word	0x00000000

080095cc <nl_func_relu_generic_array_f32>:
 80095cc:	b430      	push	{r4, r5}
 80095ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80095d2:	6880      	ldr	r0, [r0, #8]
 80095d4:	688c      	ldr	r4, [r1, #8]
 80095d6:	ed93 7a00 	vldr	s14, [r3]
 80095da:	ed93 6a01 	vldr	s12, [r3, #4]
 80095de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80095e2:	3a01      	subs	r2, #1
 80095e4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80095e8:	0092      	lsls	r2, r2, #2
 80095ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ee:	4410      	add	r0, r2
 80095f0:	4422      	add	r2, r4
 80095f2:	d421      	bmi.n	8009638 <nl_func_relu_generic_array_f32+0x6c>
 80095f4:	42a2      	cmp	r2, r4
 80095f6:	d33d      	bcc.n	8009674 <nl_func_relu_generic_array_f32+0xa8>
 80095f8:	1d13      	adds	r3, r2, #4
 80095fa:	1d02      	adds	r2, r0, #4
 80095fc:	e010      	b.n	8009620 <nl_func_relu_generic_array_f32+0x54>
 80095fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009606:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800960a:	dd01      	ble.n	8009610 <nl_func_relu_generic_array_f32+0x44>
 800960c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8009610:	ed62 7a01 	vstmdb	r2!, {s15}
 8009614:	6888      	ldr	r0, [r1, #8]
 8009616:	f1a3 0408 	sub.w	r4, r3, #8
 800961a:	4284      	cmp	r4, r0
 800961c:	462b      	mov	r3, r5
 800961e:	d329      	bcc.n	8009674 <nl_func_relu_generic_array_f32+0xa8>
 8009620:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009624:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800962c:	f1a3 0504 	sub.w	r5, r3, #4
 8009630:	dce5      	bgt.n	80095fe <nl_func_relu_generic_array_f32+0x32>
 8009632:	eef0 7a66 	vmov.f32	s15, s13
 8009636:	e7eb      	b.n	8009610 <nl_func_relu_generic_array_f32+0x44>
 8009638:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009640:	d01a      	beq.n	8009678 <nl_func_relu_generic_array_f32+0xac>
 8009642:	42a2      	cmp	r2, r4
 8009644:	d316      	bcc.n	8009674 <nl_func_relu_generic_array_f32+0xa8>
 8009646:	1d13      	adds	r3, r2, #4
 8009648:	1d02      	adds	r2, r0, #4
 800964a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800964e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009656:	f1a3 0408 	sub.w	r4, r3, #8
 800965a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800965e:	f1a3 0004 	sub.w	r0, r3, #4
 8009662:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009666:	4623      	mov	r3, r4
 8009668:	d51e      	bpl.n	80096a8 <nl_func_relu_generic_array_f32+0xdc>
 800966a:	ed62 6a01 	vstmdb	r2!, {s13}
 800966e:	688b      	ldr	r3, [r1, #8]
 8009670:	42a3      	cmp	r3, r4
 8009672:	d91e      	bls.n	80096b2 <nl_func_relu_generic_array_f32+0xe6>
 8009674:	bc30      	pop	{r4, r5}
 8009676:	4770      	bx	lr
 8009678:	42a2      	cmp	r2, r4
 800967a:	d3fb      	bcc.n	8009674 <nl_func_relu_generic_array_f32+0xa8>
 800967c:	1d13      	adds	r3, r2, #4
 800967e:	2500      	movs	r5, #0
 8009680:	1d02      	adds	r2, r0, #4
 8009682:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800968a:	f1a3 0408 	sub.w	r4, r3, #8
 800968e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009692:	f1a3 0004 	sub.w	r0, r3, #4
 8009696:	4623      	mov	r3, r4
 8009698:	d80d      	bhi.n	80096b6 <nl_func_relu_generic_array_f32+0xea>
 800969a:	ed62 7a01 	vstmdb	r2!, {s15}
 800969e:	688b      	ldr	r3, [r1, #8]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d8e7      	bhi.n	8009674 <nl_func_relu_generic_array_f32+0xa8>
 80096a4:	4603      	mov	r3, r0
 80096a6:	e7ec      	b.n	8009682 <nl_func_relu_generic_array_f32+0xb6>
 80096a8:	ed62 7a01 	vstmdb	r2!, {s15}
 80096ac:	688c      	ldr	r4, [r1, #8]
 80096ae:	429c      	cmp	r4, r3
 80096b0:	d8e0      	bhi.n	8009674 <nl_func_relu_generic_array_f32+0xa8>
 80096b2:	4603      	mov	r3, r0
 80096b4:	e7c9      	b.n	800964a <nl_func_relu_generic_array_f32+0x7e>
 80096b6:	f842 5d04 	str.w	r5, [r2, #-4]!
 80096ba:	688c      	ldr	r4, [r1, #8]
 80096bc:	429c      	cmp	r4, r3
 80096be:	d8d9      	bhi.n	8009674 <nl_func_relu_generic_array_f32+0xa8>
 80096c0:	4603      	mov	r3, r0
 80096c2:	e7de      	b.n	8009682 <nl_func_relu_generic_array_f32+0xb6>

080096c4 <forward_relu>:
 80096c4:	6942      	ldr	r2, [r0, #20]
 80096c6:	8813      	ldrh	r3, [r2, #0]
 80096c8:	b33b      	cbz	r3, 800971a <forward_relu+0x56>
 80096ca:	b470      	push	{r4, r5, r6}
 80096cc:	6852      	ldr	r2, [r2, #4]
 80096ce:	6856      	ldr	r6, [r2, #4]
 80096d0:	b106      	cbz	r6, 80096d4 <forward_relu+0x10>
 80096d2:	6836      	ldr	r6, [r6, #0]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d91d      	bls.n	8009714 <forward_relu+0x50>
 80096d8:	6913      	ldr	r3, [r2, #16]
 80096da:	b103      	cbz	r3, 80096de <forward_relu+0x1a>
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6982      	ldr	r2, [r0, #24]
 80096e0:	68b4      	ldr	r4, [r6, #8]
 80096e2:	6998      	ldr	r0, [r3, #24]
 80096e4:	69b1      	ldr	r1, [r6, #24]
 80096e6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	d041      	beq.n	8009772 <forward_relu+0xae>
 80096ee:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 80096f2:	2d01      	cmp	r5, #1
 80096f4:	d013      	beq.n	800971e <forward_relu+0x5a>
 80096f6:	2c00      	cmp	r4, #0
 80096f8:	d06f      	beq.n	80097da <forward_relu+0x116>
 80096fa:	68f6      	ldr	r6, [r6, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8009702:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009706:	42a6      	cmp	r6, r4
 8009708:	fb05 f202 	mul.w	r2, r5, r2
 800970c:	d1f9      	bne.n	8009702 <forward_relu+0x3e>
 800970e:	bc70      	pop	{r4, r5, r6}
 8009710:	f7ff bf5c 	b.w	80095cc <nl_func_relu_generic_array_f32>
 8009714:	2300      	movs	r3, #0
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	deff      	udf	#255	; 0xff
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	deff      	udf	#255	; 0xff
 800971e:	6880      	ldr	r0, [r0, #8]
 8009720:	688a      	ldr	r2, [r1, #8]
 8009722:	ed93 7a00 	vldr	s14, [r3]
 8009726:	b184      	cbz	r4, 800974a <forward_relu+0x86>
 8009728:	68f6      	ldr	r6, [r6, #12]
 800972a:	462b      	mov	r3, r5
 800972c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8009730:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009734:	42a6      	cmp	r6, r4
 8009736:	fb05 f303 	mul.w	r3, r5, r3
 800973a:	d1f9      	bne.n	8009730 <forward_relu+0x6c>
 800973c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009740:	3b01      	subs	r3, #1
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	18d2      	adds	r2, r2, r3
 8009746:	4418      	add	r0, r3
 8009748:	d23d      	bcs.n	80097c6 <forward_relu+0x102>
 800974a:	1d13      	adds	r3, r2, #4
 800974c:	2500      	movs	r5, #0
 800974e:	1d02      	adds	r2, r0, #4
 8009750:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975c:	f1a3 0004 	sub.w	r0, r3, #4
 8009760:	d833      	bhi.n	80097ca <forward_relu+0x106>
 8009762:	ed62 7a01 	vstmdb	r2!, {s15}
 8009766:	688c      	ldr	r4, [r1, #8]
 8009768:	3b08      	subs	r3, #8
 800976a:	429c      	cmp	r4, r3
 800976c:	d82b      	bhi.n	80097c6 <forward_relu+0x102>
 800976e:	4603      	mov	r3, r0
 8009770:	e7ee      	b.n	8009750 <forward_relu+0x8c>
 8009772:	6880      	ldr	r0, [r0, #8]
 8009774:	688b      	ldr	r3, [r1, #8]
 8009776:	b184      	cbz	r4, 800979a <forward_relu+0xd6>
 8009778:	68f6      	ldr	r6, [r6, #12]
 800977a:	2201      	movs	r2, #1
 800977c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8009780:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009784:	42a6      	cmp	r6, r4
 8009786:	fb05 f202 	mul.w	r2, r5, r2
 800978a:	d1f9      	bne.n	8009780 <forward_relu+0xbc>
 800978c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009790:	3a01      	subs	r2, #1
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	189b      	adds	r3, r3, r2
 8009796:	4410      	add	r0, r2
 8009798:	d215      	bcs.n	80097c6 <forward_relu+0x102>
 800979a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80097e0 <forward_relu+0x11c>
 800979e:	3304      	adds	r3, #4
 80097a0:	3004      	adds	r0, #4
 80097a2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80097a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ae:	bfb8      	it	lt
 80097b0:	eef0 7a47 	vmovlt.f32	s15, s14
 80097b4:	ed60 7a01 	vstmdb	r0!, {s15}
 80097b8:	688c      	ldr	r4, [r1, #8]
 80097ba:	f1a3 0208 	sub.w	r2, r3, #8
 80097be:	4294      	cmp	r4, r2
 80097c0:	f1a3 0304 	sub.w	r3, r3, #4
 80097c4:	d9ed      	bls.n	80097a2 <forward_relu+0xde>
 80097c6:	bc70      	pop	{r4, r5, r6}
 80097c8:	4770      	bx	lr
 80097ca:	f842 5d04 	str.w	r5, [r2, #-4]!
 80097ce:	688c      	ldr	r4, [r1, #8]
 80097d0:	3b08      	subs	r3, #8
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d8f7      	bhi.n	80097c6 <forward_relu+0x102>
 80097d6:	4603      	mov	r3, r0
 80097d8:	e7ba      	b.n	8009750 <forward_relu+0x8c>
 80097da:	2201      	movs	r2, #1
 80097dc:	e797      	b.n	800970e <forward_relu+0x4a>
 80097de:	bf00      	nop
 80097e0:	00000000 	.word	0x00000000

080097e4 <ai_check_custom_types>:
 80097e4:	4b13      	ldr	r3, [pc, #76]	; (8009834 <ai_check_custom_types+0x50>)
 80097e6:	b082      	sub	sp, #8
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	9301      	str	r3, [sp, #4]
 80097ec:	b118      	cbz	r0, 80097f6 <ai_check_custom_types+0x12>
 80097ee:	7803      	ldrb	r3, [r0, #0]
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d002      	beq.n	80097fa <ai_check_custom_types+0x16>
 80097f4:	2000      	movs	r0, #0
 80097f6:	b002      	add	sp, #8
 80097f8:	4770      	bx	lr
 80097fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097fe:	4293      	cmp	r3, r2
 8009800:	d004      	beq.n	800980c <ai_check_custom_types+0x28>
 8009802:	2001      	movs	r0, #1
 8009804:	f080 0001 	eor.w	r0, r0, #1
 8009808:	b002      	add	sp, #8
 800980a:	4770      	bx	lr
 800980c:	7842      	ldrb	r2, [r0, #1]
 800980e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009812:	429a      	cmp	r2, r3
 8009814:	f100 0001 	add.w	r0, r0, #1
 8009818:	d1f3      	bne.n	8009802 <ai_check_custom_types+0x1e>
 800981a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800981e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009822:	429a      	cmp	r2, r3
 8009824:	d1ed      	bne.n	8009802 <ai_check_custom_types+0x1e>
 8009826:	7842      	ldrb	r2, [r0, #1]
 8009828:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800982c:	429a      	cmp	r2, r3
 800982e:	d1e8      	bne.n	8009802 <ai_check_custom_types+0x1e>
 8009830:	2000      	movs	r0, #0
 8009832:	e7e7      	b.n	8009804 <ai_check_custom_types+0x20>
 8009834:	081883bc 	.word	0x081883bc

08009838 <ai_layers_forward_all>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800983c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800983e:	4604      	mov	r4, r0
 8009840:	b31e      	cbz	r6, 800988a <ai_layers_forward_all+0x52>
 8009842:	b1cd      	cbz	r5, 8009878 <ai_layers_forward_all+0x40>
 8009844:	6545      	str	r5, [r0, #84]	; 0x54
 8009846:	4629      	mov	r1, r5
 8009848:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800984a:	2001      	movs	r0, #1
 800984c:	47b0      	blx	r6
 800984e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009850:	2700      	movs	r7, #0
 8009852:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009854:	2002      	movs	r0, #2
 8009856:	47b0      	blx	r6
 8009858:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800985a:	692b      	ldr	r3, [r5, #16]
 800985c:	4628      	mov	r0, r5
 800985e:	4798      	blx	r3
 8009860:	68eb      	ldr	r3, [r5, #12]
 8009862:	429d      	cmp	r5, r3
 8009864:	f04f 0003 	mov.w	r0, #3
 8009868:	4619      	mov	r1, r3
 800986a:	d006      	beq.n	800987a <ai_layers_forward_all+0x42>
 800986c:	6563      	str	r3, [r4, #84]	; 0x54
 800986e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009870:	47b0      	blx	r6
 8009872:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009874:	2900      	cmp	r1, #0
 8009876:	d1ec      	bne.n	8009852 <ai_layers_forward_all+0x1a>
 8009878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800987a:	2100      	movs	r1, #0
 800987c:	6567      	str	r7, [r4, #84]	; 0x54
 800987e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009880:	47b0      	blx	r6
 8009882:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009884:	2900      	cmp	r1, #0
 8009886:	d1e4      	bne.n	8009852 <ai_layers_forward_all+0x1a>
 8009888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800988a:	2d00      	cmp	r5, #0
 800988c:	d0f4      	beq.n	8009878 <ai_layers_forward_all+0x40>
 800988e:	6545      	str	r5, [r0, #84]	; 0x54
 8009890:	692b      	ldr	r3, [r5, #16]
 8009892:	4628      	mov	r0, r5
 8009894:	4798      	blx	r3
 8009896:	68eb      	ldr	r3, [r5, #12]
 8009898:	42ab      	cmp	r3, r5
 800989a:	d004      	beq.n	80098a6 <ai_layers_forward_all+0x6e>
 800989c:	6563      	str	r3, [r4, #84]	; 0x54
 800989e:	461d      	mov	r5, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1f5      	bne.n	8009890 <ai_layers_forward_all+0x58>
 80098a4:	e7e8      	b.n	8009878 <ai_layers_forward_all+0x40>
 80098a6:	2300      	movs	r3, #0
 80098a8:	6563      	str	r3, [r4, #84]	; 0x54
 80098aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098ac <ai_array_to_buffer_fmt>:
 80098ac:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d01f      	beq.n	80098f4 <ai_array_to_buffer_fmt+0x48>
 80098b4:	4a1c      	ldr	r2, [pc, #112]	; (8009928 <ai_array_to_buffer_fmt+0x7c>)
 80098b6:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d00a      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 80098be:	dc0d      	bgt.n	80098dc <ai_array_to_buffer_fmt+0x30>
 80098c0:	4a1a      	ldr	r2, [pc, #104]	; (800992c <ai_array_to_buffer_fmt+0x80>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d006      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 80098c6:	dd1d      	ble.n	8009904 <ai_array_to_buffer_fmt+0x58>
 80098c8:	4a19      	ldr	r2, [pc, #100]	; (8009930 <ai_array_to_buffer_fmt+0x84>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d002      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 80098ce:	320f      	adds	r2, #15
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d10d      	bne.n	80098f0 <ai_array_to_buffer_fmt+0x44>
 80098d4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80098d8:	4318      	orrs	r0, r3
 80098da:	4770      	bx	lr
 80098dc:	4a15      	ldr	r2, [pc, #84]	; (8009934 <ai_array_to_buffer_fmt+0x88>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d0f8      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 80098e2:	dd18      	ble.n	8009916 <ai_array_to_buffer_fmt+0x6a>
 80098e4:	4a14      	ldr	r2, [pc, #80]	; (8009938 <ai_array_to_buffer_fmt+0x8c>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d0f4      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 80098ea:	4a14      	ldr	r2, [pc, #80]	; (800993c <ai_array_to_buffer_fmt+0x90>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d0f1      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 80098f0:	2340      	movs	r3, #64	; 0x40
 80098f2:	e7ef      	b.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 80098f4:	4b12      	ldr	r3, [pc, #72]	; (8009940 <ai_array_to_buffer_fmt+0x94>)
 80098f6:	4003      	ands	r3, r0
 80098f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098fc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009900:	4318      	orrs	r0, r3
 8009902:	4770      	bx	lr
 8009904:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8009908:	4293      	cmp	r3, r2
 800990a:	d0e3      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 800990c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009910:	4293      	cmp	r3, r2
 8009912:	d0df      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 8009914:	e7ec      	b.n	80098f0 <ai_array_to_buffer_fmt+0x44>
 8009916:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800991a:	4293      	cmp	r3, r2
 800991c:	d0da      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 800991e:	3207      	adds	r2, #7
 8009920:	4293      	cmp	r3, r2
 8009922:	d0d7      	beq.n	80098d4 <ai_array_to_buffer_fmt+0x28>
 8009924:	e7e4      	b.n	80098f0 <ai_array_to_buffer_fmt+0x44>
 8009926:	bf00      	nop
 8009928:	00840040 	.word	0x00840040
 800992c:	00040447 	.word	0x00040447
 8009930:	00040840 	.word	0x00040840
 8009934:	00840840 	.word	0x00840840
 8009938:	0084084f 	.word	0x0084084f
 800993c:	01821040 	.word	0x01821040
 8009940:	00803fff 	.word	0x00803fff

08009944 <ai_array_get_byte_size>:
 8009944:	b1c1      	cbz	r1, 8009978 <ai_array_get_byte_size+0x34>
 8009946:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800994a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800994e:	4413      	add	r3, r2
 8009950:	fb01 f103 	mul.w	r1, r1, r3
 8009954:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009958:	3107      	adds	r1, #7
 800995a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800995e:	f021 0107 	bic.w	r1, r1, #7
 8009962:	2804      	cmp	r0, #4
 8009964:	fa21 f102 	lsr.w	r1, r1, r2
 8009968:	d008      	beq.n	800997c <ai_array_get_byte_size+0x38>
 800996a:	2808      	cmp	r0, #8
 800996c:	d101      	bne.n	8009972 <ai_array_get_byte_size+0x2e>
 800996e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009972:	3107      	adds	r1, #7
 8009974:	08c8      	lsrs	r0, r1, #3
 8009976:	4770      	bx	lr
 8009978:	4608      	mov	r0, r1
 800997a:	4770      	bx	lr
 800997c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009980:	3107      	adds	r1, #7
 8009982:	08c8      	lsrs	r0, r1, #3
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop

08009988 <__errno>:
 8009988:	4b01      	ldr	r3, [pc, #4]	; (8009990 <__errno+0x8>)
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	20000bc0 	.word	0x20000bc0

08009994 <__libc_init_array>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4d0d      	ldr	r5, [pc, #52]	; (80099cc <__libc_init_array+0x38>)
 8009998:	4c0d      	ldr	r4, [pc, #52]	; (80099d0 <__libc_init_array+0x3c>)
 800999a:	1b64      	subs	r4, r4, r5
 800999c:	10a4      	asrs	r4, r4, #2
 800999e:	2600      	movs	r6, #0
 80099a0:	42a6      	cmp	r6, r4
 80099a2:	d109      	bne.n	80099b8 <__libc_init_array+0x24>
 80099a4:	4d0b      	ldr	r5, [pc, #44]	; (80099d4 <__libc_init_array+0x40>)
 80099a6:	4c0c      	ldr	r4, [pc, #48]	; (80099d8 <__libc_init_array+0x44>)
 80099a8:	f003 f806 	bl	800c9b8 <_init>
 80099ac:	1b64      	subs	r4, r4, r5
 80099ae:	10a4      	asrs	r4, r4, #2
 80099b0:	2600      	movs	r6, #0
 80099b2:	42a6      	cmp	r6, r4
 80099b4:	d105      	bne.n	80099c2 <__libc_init_array+0x2e>
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099bc:	4798      	blx	r3
 80099be:	3601      	adds	r6, #1
 80099c0:	e7ee      	b.n	80099a0 <__libc_init_array+0xc>
 80099c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c6:	4798      	blx	r3
 80099c8:	3601      	adds	r6, #1
 80099ca:	e7f2      	b.n	80099b2 <__libc_init_array+0x1e>
 80099cc:	08188abc 	.word	0x08188abc
 80099d0:	08188abc 	.word	0x08188abc
 80099d4:	08188abc 	.word	0x08188abc
 80099d8:	08188ac0 	.word	0x08188ac0

080099dc <malloc>:
 80099dc:	4b02      	ldr	r3, [pc, #8]	; (80099e8 <malloc+0xc>)
 80099de:	4601      	mov	r1, r0
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	f000 b869 	b.w	8009ab8 <_malloc_r>
 80099e6:	bf00      	nop
 80099e8:	20000bc0 	.word	0x20000bc0

080099ec <memcpy>:
 80099ec:	440a      	add	r2, r1
 80099ee:	4291      	cmp	r1, r2
 80099f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099f4:	d100      	bne.n	80099f8 <memcpy+0xc>
 80099f6:	4770      	bx	lr
 80099f8:	b510      	push	{r4, lr}
 80099fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a02:	4291      	cmp	r1, r2
 8009a04:	d1f9      	bne.n	80099fa <memcpy+0xe>
 8009a06:	bd10      	pop	{r4, pc}

08009a08 <memset>:
 8009a08:	4402      	add	r2, r0
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d100      	bne.n	8009a12 <memset+0xa>
 8009a10:	4770      	bx	lr
 8009a12:	f803 1b01 	strb.w	r1, [r3], #1
 8009a16:	e7f9      	b.n	8009a0c <memset+0x4>

08009a18 <_free_r>:
 8009a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a1a:	2900      	cmp	r1, #0
 8009a1c:	d048      	beq.n	8009ab0 <_free_r+0x98>
 8009a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a22:	9001      	str	r0, [sp, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f1a1 0404 	sub.w	r4, r1, #4
 8009a2a:	bfb8      	it	lt
 8009a2c:	18e4      	addlt	r4, r4, r3
 8009a2e:	f001 ffe7 	bl	800ba00 <__malloc_lock>
 8009a32:	4a20      	ldr	r2, [pc, #128]	; (8009ab4 <_free_r+0x9c>)
 8009a34:	9801      	ldr	r0, [sp, #4]
 8009a36:	6813      	ldr	r3, [r2, #0]
 8009a38:	4615      	mov	r5, r2
 8009a3a:	b933      	cbnz	r3, 8009a4a <_free_r+0x32>
 8009a3c:	6063      	str	r3, [r4, #4]
 8009a3e:	6014      	str	r4, [r2, #0]
 8009a40:	b003      	add	sp, #12
 8009a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a46:	f001 bfe1 	b.w	800ba0c <__malloc_unlock>
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	d90b      	bls.n	8009a66 <_free_r+0x4e>
 8009a4e:	6821      	ldr	r1, [r4, #0]
 8009a50:	1862      	adds	r2, r4, r1
 8009a52:	4293      	cmp	r3, r2
 8009a54:	bf04      	itt	eq
 8009a56:	681a      	ldreq	r2, [r3, #0]
 8009a58:	685b      	ldreq	r3, [r3, #4]
 8009a5a:	6063      	str	r3, [r4, #4]
 8009a5c:	bf04      	itt	eq
 8009a5e:	1852      	addeq	r2, r2, r1
 8009a60:	6022      	streq	r2, [r4, #0]
 8009a62:	602c      	str	r4, [r5, #0]
 8009a64:	e7ec      	b.n	8009a40 <_free_r+0x28>
 8009a66:	461a      	mov	r2, r3
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	b10b      	cbz	r3, 8009a70 <_free_r+0x58>
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	d9fa      	bls.n	8009a66 <_free_r+0x4e>
 8009a70:	6811      	ldr	r1, [r2, #0]
 8009a72:	1855      	adds	r5, r2, r1
 8009a74:	42a5      	cmp	r5, r4
 8009a76:	d10b      	bne.n	8009a90 <_free_r+0x78>
 8009a78:	6824      	ldr	r4, [r4, #0]
 8009a7a:	4421      	add	r1, r4
 8009a7c:	1854      	adds	r4, r2, r1
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	6011      	str	r1, [r2, #0]
 8009a82:	d1dd      	bne.n	8009a40 <_free_r+0x28>
 8009a84:	681c      	ldr	r4, [r3, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	6053      	str	r3, [r2, #4]
 8009a8a:	4421      	add	r1, r4
 8009a8c:	6011      	str	r1, [r2, #0]
 8009a8e:	e7d7      	b.n	8009a40 <_free_r+0x28>
 8009a90:	d902      	bls.n	8009a98 <_free_r+0x80>
 8009a92:	230c      	movs	r3, #12
 8009a94:	6003      	str	r3, [r0, #0]
 8009a96:	e7d3      	b.n	8009a40 <_free_r+0x28>
 8009a98:	6825      	ldr	r5, [r4, #0]
 8009a9a:	1961      	adds	r1, r4, r5
 8009a9c:	428b      	cmp	r3, r1
 8009a9e:	bf04      	itt	eq
 8009aa0:	6819      	ldreq	r1, [r3, #0]
 8009aa2:	685b      	ldreq	r3, [r3, #4]
 8009aa4:	6063      	str	r3, [r4, #4]
 8009aa6:	bf04      	itt	eq
 8009aa8:	1949      	addeq	r1, r1, r5
 8009aaa:	6021      	streq	r1, [r4, #0]
 8009aac:	6054      	str	r4, [r2, #4]
 8009aae:	e7c7      	b.n	8009a40 <_free_r+0x28>
 8009ab0:	b003      	add	sp, #12
 8009ab2:	bd30      	pop	{r4, r5, pc}
 8009ab4:	2000cf28 	.word	0x2000cf28

08009ab8 <_malloc_r>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	1ccd      	adds	r5, r1, #3
 8009abc:	f025 0503 	bic.w	r5, r5, #3
 8009ac0:	3508      	adds	r5, #8
 8009ac2:	2d0c      	cmp	r5, #12
 8009ac4:	bf38      	it	cc
 8009ac6:	250c      	movcc	r5, #12
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	4606      	mov	r6, r0
 8009acc:	db01      	blt.n	8009ad2 <_malloc_r+0x1a>
 8009ace:	42a9      	cmp	r1, r5
 8009ad0:	d903      	bls.n	8009ada <_malloc_r+0x22>
 8009ad2:	230c      	movs	r3, #12
 8009ad4:	6033      	str	r3, [r6, #0]
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ada:	f001 ff91 	bl	800ba00 <__malloc_lock>
 8009ade:	4921      	ldr	r1, [pc, #132]	; (8009b64 <_malloc_r+0xac>)
 8009ae0:	680a      	ldr	r2, [r1, #0]
 8009ae2:	4614      	mov	r4, r2
 8009ae4:	b99c      	cbnz	r4, 8009b0e <_malloc_r+0x56>
 8009ae6:	4f20      	ldr	r7, [pc, #128]	; (8009b68 <_malloc_r+0xb0>)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	b923      	cbnz	r3, 8009af6 <_malloc_r+0x3e>
 8009aec:	4621      	mov	r1, r4
 8009aee:	4630      	mov	r0, r6
 8009af0:	f000 fd34 	bl	800a55c <_sbrk_r>
 8009af4:	6038      	str	r0, [r7, #0]
 8009af6:	4629      	mov	r1, r5
 8009af8:	4630      	mov	r0, r6
 8009afa:	f000 fd2f 	bl	800a55c <_sbrk_r>
 8009afe:	1c43      	adds	r3, r0, #1
 8009b00:	d123      	bne.n	8009b4a <_malloc_r+0x92>
 8009b02:	230c      	movs	r3, #12
 8009b04:	6033      	str	r3, [r6, #0]
 8009b06:	4630      	mov	r0, r6
 8009b08:	f001 ff80 	bl	800ba0c <__malloc_unlock>
 8009b0c:	e7e3      	b.n	8009ad6 <_malloc_r+0x1e>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	1b5b      	subs	r3, r3, r5
 8009b12:	d417      	bmi.n	8009b44 <_malloc_r+0x8c>
 8009b14:	2b0b      	cmp	r3, #11
 8009b16:	d903      	bls.n	8009b20 <_malloc_r+0x68>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	441c      	add	r4, r3
 8009b1c:	6025      	str	r5, [r4, #0]
 8009b1e:	e004      	b.n	8009b2a <_malloc_r+0x72>
 8009b20:	6863      	ldr	r3, [r4, #4]
 8009b22:	42a2      	cmp	r2, r4
 8009b24:	bf0c      	ite	eq
 8009b26:	600b      	streq	r3, [r1, #0]
 8009b28:	6053      	strne	r3, [r2, #4]
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f001 ff6e 	bl	800ba0c <__malloc_unlock>
 8009b30:	f104 000b 	add.w	r0, r4, #11
 8009b34:	1d23      	adds	r3, r4, #4
 8009b36:	f020 0007 	bic.w	r0, r0, #7
 8009b3a:	1ac2      	subs	r2, r0, r3
 8009b3c:	d0cc      	beq.n	8009ad8 <_malloc_r+0x20>
 8009b3e:	1a1b      	subs	r3, r3, r0
 8009b40:	50a3      	str	r3, [r4, r2]
 8009b42:	e7c9      	b.n	8009ad8 <_malloc_r+0x20>
 8009b44:	4622      	mov	r2, r4
 8009b46:	6864      	ldr	r4, [r4, #4]
 8009b48:	e7cc      	b.n	8009ae4 <_malloc_r+0x2c>
 8009b4a:	1cc4      	adds	r4, r0, #3
 8009b4c:	f024 0403 	bic.w	r4, r4, #3
 8009b50:	42a0      	cmp	r0, r4
 8009b52:	d0e3      	beq.n	8009b1c <_malloc_r+0x64>
 8009b54:	1a21      	subs	r1, r4, r0
 8009b56:	4630      	mov	r0, r6
 8009b58:	f000 fd00 	bl	800a55c <_sbrk_r>
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d1dd      	bne.n	8009b1c <_malloc_r+0x64>
 8009b60:	e7cf      	b.n	8009b02 <_malloc_r+0x4a>
 8009b62:	bf00      	nop
 8009b64:	2000cf28 	.word	0x2000cf28
 8009b68:	2000cf2c 	.word	0x2000cf2c

08009b6c <__cvt>:
 8009b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b70:	ec55 4b10 	vmov	r4, r5, d0
 8009b74:	2d00      	cmp	r5, #0
 8009b76:	460e      	mov	r6, r1
 8009b78:	4619      	mov	r1, r3
 8009b7a:	462b      	mov	r3, r5
 8009b7c:	bfbb      	ittet	lt
 8009b7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b82:	461d      	movlt	r5, r3
 8009b84:	2300      	movge	r3, #0
 8009b86:	232d      	movlt	r3, #45	; 0x2d
 8009b88:	700b      	strb	r3, [r1, #0]
 8009b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b90:	4691      	mov	r9, r2
 8009b92:	f023 0820 	bic.w	r8, r3, #32
 8009b96:	bfbc      	itt	lt
 8009b98:	4622      	movlt	r2, r4
 8009b9a:	4614      	movlt	r4, r2
 8009b9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ba0:	d005      	beq.n	8009bae <__cvt+0x42>
 8009ba2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009ba6:	d100      	bne.n	8009baa <__cvt+0x3e>
 8009ba8:	3601      	adds	r6, #1
 8009baa:	2102      	movs	r1, #2
 8009bac:	e000      	b.n	8009bb0 <__cvt+0x44>
 8009bae:	2103      	movs	r1, #3
 8009bb0:	ab03      	add	r3, sp, #12
 8009bb2:	9301      	str	r3, [sp, #4]
 8009bb4:	ab02      	add	r3, sp, #8
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	ec45 4b10 	vmov	d0, r4, r5
 8009bbc:	4653      	mov	r3, sl
 8009bbe:	4632      	mov	r2, r6
 8009bc0:	f000 ff0e 	bl	800a9e0 <_dtoa_r>
 8009bc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bc8:	4607      	mov	r7, r0
 8009bca:	d102      	bne.n	8009bd2 <__cvt+0x66>
 8009bcc:	f019 0f01 	tst.w	r9, #1
 8009bd0:	d022      	beq.n	8009c18 <__cvt+0xac>
 8009bd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bd6:	eb07 0906 	add.w	r9, r7, r6
 8009bda:	d110      	bne.n	8009bfe <__cvt+0x92>
 8009bdc:	783b      	ldrb	r3, [r7, #0]
 8009bde:	2b30      	cmp	r3, #48	; 0x30
 8009be0:	d10a      	bne.n	8009bf8 <__cvt+0x8c>
 8009be2:	2200      	movs	r2, #0
 8009be4:	2300      	movs	r3, #0
 8009be6:	4620      	mov	r0, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	f7f6 ff7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bee:	b918      	cbnz	r0, 8009bf8 <__cvt+0x8c>
 8009bf0:	f1c6 0601 	rsb	r6, r6, #1
 8009bf4:	f8ca 6000 	str.w	r6, [sl]
 8009bf8:	f8da 3000 	ldr.w	r3, [sl]
 8009bfc:	4499      	add	r9, r3
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2300      	movs	r3, #0
 8009c02:	4620      	mov	r0, r4
 8009c04:	4629      	mov	r1, r5
 8009c06:	f7f6 ff6f 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c0a:	b108      	cbz	r0, 8009c10 <__cvt+0xa4>
 8009c0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c10:	2230      	movs	r2, #48	; 0x30
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	454b      	cmp	r3, r9
 8009c16:	d307      	bcc.n	8009c28 <__cvt+0xbc>
 8009c18:	9b03      	ldr	r3, [sp, #12]
 8009c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c1c:	1bdb      	subs	r3, r3, r7
 8009c1e:	4638      	mov	r0, r7
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	b004      	add	sp, #16
 8009c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c28:	1c59      	adds	r1, r3, #1
 8009c2a:	9103      	str	r1, [sp, #12]
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	e7f0      	b.n	8009c12 <__cvt+0xa6>

08009c30 <__exponent>:
 8009c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c32:	4603      	mov	r3, r0
 8009c34:	2900      	cmp	r1, #0
 8009c36:	bfb8      	it	lt
 8009c38:	4249      	neglt	r1, r1
 8009c3a:	f803 2b02 	strb.w	r2, [r3], #2
 8009c3e:	bfb4      	ite	lt
 8009c40:	222d      	movlt	r2, #45	; 0x2d
 8009c42:	222b      	movge	r2, #43	; 0x2b
 8009c44:	2909      	cmp	r1, #9
 8009c46:	7042      	strb	r2, [r0, #1]
 8009c48:	dd2a      	ble.n	8009ca0 <__exponent+0x70>
 8009c4a:	f10d 0407 	add.w	r4, sp, #7
 8009c4e:	46a4      	mov	ip, r4
 8009c50:	270a      	movs	r7, #10
 8009c52:	46a6      	mov	lr, r4
 8009c54:	460a      	mov	r2, r1
 8009c56:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c5a:	fb07 1516 	mls	r5, r7, r6, r1
 8009c5e:	3530      	adds	r5, #48	; 0x30
 8009c60:	2a63      	cmp	r2, #99	; 0x63
 8009c62:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	dcf1      	bgt.n	8009c52 <__exponent+0x22>
 8009c6e:	3130      	adds	r1, #48	; 0x30
 8009c70:	f1ae 0502 	sub.w	r5, lr, #2
 8009c74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c78:	1c44      	adds	r4, r0, #1
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	4561      	cmp	r1, ip
 8009c7e:	d30a      	bcc.n	8009c96 <__exponent+0x66>
 8009c80:	f10d 0209 	add.w	r2, sp, #9
 8009c84:	eba2 020e 	sub.w	r2, r2, lr
 8009c88:	4565      	cmp	r5, ip
 8009c8a:	bf88      	it	hi
 8009c8c:	2200      	movhi	r2, #0
 8009c8e:	4413      	add	r3, r2
 8009c90:	1a18      	subs	r0, r3, r0
 8009c92:	b003      	add	sp, #12
 8009c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c9e:	e7ed      	b.n	8009c7c <__exponent+0x4c>
 8009ca0:	2330      	movs	r3, #48	; 0x30
 8009ca2:	3130      	adds	r1, #48	; 0x30
 8009ca4:	7083      	strb	r3, [r0, #2]
 8009ca6:	70c1      	strb	r1, [r0, #3]
 8009ca8:	1d03      	adds	r3, r0, #4
 8009caa:	e7f1      	b.n	8009c90 <__exponent+0x60>

08009cac <_printf_float>:
 8009cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	ed2d 8b02 	vpush	{d8}
 8009cb4:	b08d      	sub	sp, #52	; 0x34
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009cbc:	4616      	mov	r6, r2
 8009cbe:	461f      	mov	r7, r3
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	f001 fe31 	bl	800b928 <_localeconv_r>
 8009cc6:	f8d0 a000 	ldr.w	sl, [r0]
 8009cca:	4650      	mov	r0, sl
 8009ccc:	f7f6 fa90 	bl	80001f0 <strlen>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	9305      	str	r3, [sp, #20]
 8009cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8009cdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ce0:	3307      	adds	r3, #7
 8009ce2:	f023 0307 	bic.w	r3, r3, #7
 8009ce6:	f103 0208 	add.w	r2, r3, #8
 8009cea:	f8c8 2000 	str.w	r2, [r8]
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cf6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009cfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cfe:	9307      	str	r3, [sp, #28]
 8009d00:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d04:	ee08 0a10 	vmov	s16, r0
 8009d08:	4b9f      	ldr	r3, [pc, #636]	; (8009f88 <_printf_float+0x2dc>)
 8009d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d12:	f7f6 ff1b 	bl	8000b4c <__aeabi_dcmpun>
 8009d16:	bb88      	cbnz	r0, 8009d7c <_printf_float+0xd0>
 8009d18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d1c:	4b9a      	ldr	r3, [pc, #616]	; (8009f88 <_printf_float+0x2dc>)
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d22:	f7f6 fef5 	bl	8000b10 <__aeabi_dcmple>
 8009d26:	bb48      	cbnz	r0, 8009d7c <_printf_float+0xd0>
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	4649      	mov	r1, r9
 8009d30:	f7f6 fee4 	bl	8000afc <__aeabi_dcmplt>
 8009d34:	b110      	cbz	r0, 8009d3c <_printf_float+0x90>
 8009d36:	232d      	movs	r3, #45	; 0x2d
 8009d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d3c:	4b93      	ldr	r3, [pc, #588]	; (8009f8c <_printf_float+0x2e0>)
 8009d3e:	4894      	ldr	r0, [pc, #592]	; (8009f90 <_printf_float+0x2e4>)
 8009d40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d44:	bf94      	ite	ls
 8009d46:	4698      	movls	r8, r3
 8009d48:	4680      	movhi	r8, r0
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	9b05      	ldr	r3, [sp, #20]
 8009d50:	f023 0204 	bic.w	r2, r3, #4
 8009d54:	6022      	str	r2, [r4, #0]
 8009d56:	f04f 0900 	mov.w	r9, #0
 8009d5a:	9700      	str	r7, [sp, #0]
 8009d5c:	4633      	mov	r3, r6
 8009d5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d60:	4621      	mov	r1, r4
 8009d62:	4628      	mov	r0, r5
 8009d64:	f000 f9d8 	bl	800a118 <_printf_common>
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f040 8090 	bne.w	8009e8e <_printf_float+0x1e2>
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	b00d      	add	sp, #52	; 0x34
 8009d74:	ecbd 8b02 	vpop	{d8}
 8009d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7c:	4642      	mov	r2, r8
 8009d7e:	464b      	mov	r3, r9
 8009d80:	4640      	mov	r0, r8
 8009d82:	4649      	mov	r1, r9
 8009d84:	f7f6 fee2 	bl	8000b4c <__aeabi_dcmpun>
 8009d88:	b140      	cbz	r0, 8009d9c <_printf_float+0xf0>
 8009d8a:	464b      	mov	r3, r9
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bfbc      	itt	lt
 8009d90:	232d      	movlt	r3, #45	; 0x2d
 8009d92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d96:	487f      	ldr	r0, [pc, #508]	; (8009f94 <_printf_float+0x2e8>)
 8009d98:	4b7f      	ldr	r3, [pc, #508]	; (8009f98 <_printf_float+0x2ec>)
 8009d9a:	e7d1      	b.n	8009d40 <_printf_float+0x94>
 8009d9c:	6863      	ldr	r3, [r4, #4]
 8009d9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009da2:	9206      	str	r2, [sp, #24]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	d13f      	bne.n	8009e28 <_printf_float+0x17c>
 8009da8:	2306      	movs	r3, #6
 8009daa:	6063      	str	r3, [r4, #4]
 8009dac:	9b05      	ldr	r3, [sp, #20]
 8009dae:	6861      	ldr	r1, [r4, #4]
 8009db0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009db4:	2300      	movs	r3, #0
 8009db6:	9303      	str	r3, [sp, #12]
 8009db8:	ab0a      	add	r3, sp, #40	; 0x28
 8009dba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009dbe:	ab09      	add	r3, sp, #36	; 0x24
 8009dc0:	ec49 8b10 	vmov	d0, r8, r9
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	6022      	str	r2, [r4, #0]
 8009dc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f7ff fecd 	bl	8009b6c <__cvt>
 8009dd2:	9b06      	ldr	r3, [sp, #24]
 8009dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dd6:	2b47      	cmp	r3, #71	; 0x47
 8009dd8:	4680      	mov	r8, r0
 8009dda:	d108      	bne.n	8009dee <_printf_float+0x142>
 8009ddc:	1cc8      	adds	r0, r1, #3
 8009dde:	db02      	blt.n	8009de6 <_printf_float+0x13a>
 8009de0:	6863      	ldr	r3, [r4, #4]
 8009de2:	4299      	cmp	r1, r3
 8009de4:	dd41      	ble.n	8009e6a <_printf_float+0x1be>
 8009de6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009dea:	fa5f fb8b 	uxtb.w	fp, fp
 8009dee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009df2:	d820      	bhi.n	8009e36 <_printf_float+0x18a>
 8009df4:	3901      	subs	r1, #1
 8009df6:	465a      	mov	r2, fp
 8009df8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dfc:	9109      	str	r1, [sp, #36]	; 0x24
 8009dfe:	f7ff ff17 	bl	8009c30 <__exponent>
 8009e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e04:	1813      	adds	r3, r2, r0
 8009e06:	2a01      	cmp	r2, #1
 8009e08:	4681      	mov	r9, r0
 8009e0a:	6123      	str	r3, [r4, #16]
 8009e0c:	dc02      	bgt.n	8009e14 <_printf_float+0x168>
 8009e0e:	6822      	ldr	r2, [r4, #0]
 8009e10:	07d2      	lsls	r2, r2, #31
 8009e12:	d501      	bpl.n	8009e18 <_printf_float+0x16c>
 8009e14:	3301      	adds	r3, #1
 8009e16:	6123      	str	r3, [r4, #16]
 8009e18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d09c      	beq.n	8009d5a <_printf_float+0xae>
 8009e20:	232d      	movs	r3, #45	; 0x2d
 8009e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e26:	e798      	b.n	8009d5a <_printf_float+0xae>
 8009e28:	9a06      	ldr	r2, [sp, #24]
 8009e2a:	2a47      	cmp	r2, #71	; 0x47
 8009e2c:	d1be      	bne.n	8009dac <_printf_float+0x100>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1bc      	bne.n	8009dac <_printf_float+0x100>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e7b9      	b.n	8009daa <_printf_float+0xfe>
 8009e36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e3a:	d118      	bne.n	8009e6e <_printf_float+0x1c2>
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	6863      	ldr	r3, [r4, #4]
 8009e40:	dd0b      	ble.n	8009e5a <_printf_float+0x1ae>
 8009e42:	6121      	str	r1, [r4, #16]
 8009e44:	b913      	cbnz	r3, 8009e4c <_printf_float+0x1a0>
 8009e46:	6822      	ldr	r2, [r4, #0]
 8009e48:	07d0      	lsls	r0, r2, #31
 8009e4a:	d502      	bpl.n	8009e52 <_printf_float+0x1a6>
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	440b      	add	r3, r1
 8009e50:	6123      	str	r3, [r4, #16]
 8009e52:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e54:	f04f 0900 	mov.w	r9, #0
 8009e58:	e7de      	b.n	8009e18 <_printf_float+0x16c>
 8009e5a:	b913      	cbnz	r3, 8009e62 <_printf_float+0x1b6>
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	07d2      	lsls	r2, r2, #31
 8009e60:	d501      	bpl.n	8009e66 <_printf_float+0x1ba>
 8009e62:	3302      	adds	r3, #2
 8009e64:	e7f4      	b.n	8009e50 <_printf_float+0x1a4>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e7f2      	b.n	8009e50 <_printf_float+0x1a4>
 8009e6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e70:	4299      	cmp	r1, r3
 8009e72:	db05      	blt.n	8009e80 <_printf_float+0x1d4>
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	6121      	str	r1, [r4, #16]
 8009e78:	07d8      	lsls	r0, r3, #31
 8009e7a:	d5ea      	bpl.n	8009e52 <_printf_float+0x1a6>
 8009e7c:	1c4b      	adds	r3, r1, #1
 8009e7e:	e7e7      	b.n	8009e50 <_printf_float+0x1a4>
 8009e80:	2900      	cmp	r1, #0
 8009e82:	bfd4      	ite	le
 8009e84:	f1c1 0202 	rsble	r2, r1, #2
 8009e88:	2201      	movgt	r2, #1
 8009e8a:	4413      	add	r3, r2
 8009e8c:	e7e0      	b.n	8009e50 <_printf_float+0x1a4>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	055a      	lsls	r2, r3, #21
 8009e92:	d407      	bmi.n	8009ea4 <_printf_float+0x1f8>
 8009e94:	6923      	ldr	r3, [r4, #16]
 8009e96:	4642      	mov	r2, r8
 8009e98:	4631      	mov	r1, r6
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	47b8      	blx	r7
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	d12c      	bne.n	8009efc <_printf_float+0x250>
 8009ea2:	e764      	b.n	8009d6e <_printf_float+0xc2>
 8009ea4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ea8:	f240 80e0 	bls.w	800a06c <_printf_float+0x3c0>
 8009eac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f7f6 fe18 	bl	8000ae8 <__aeabi_dcmpeq>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d034      	beq.n	8009f26 <_printf_float+0x27a>
 8009ebc:	4a37      	ldr	r2, [pc, #220]	; (8009f9c <_printf_float+0x2f0>)
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	f43f af51 	beq.w	8009d6e <_printf_float+0xc2>
 8009ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	db02      	blt.n	8009eda <_printf_float+0x22e>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	07d8      	lsls	r0, r3, #31
 8009ed8:	d510      	bpl.n	8009efc <_printf_float+0x250>
 8009eda:	ee18 3a10 	vmov	r3, s16
 8009ede:	4652      	mov	r2, sl
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	47b8      	blx	r7
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	f43f af41 	beq.w	8009d6e <_printf_float+0xc2>
 8009eec:	f04f 0800 	mov.w	r8, #0
 8009ef0:	f104 091a 	add.w	r9, r4, #26
 8009ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	4543      	cmp	r3, r8
 8009efa:	dc09      	bgt.n	8009f10 <_printf_float+0x264>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	079b      	lsls	r3, r3, #30
 8009f00:	f100 8105 	bmi.w	800a10e <_printf_float+0x462>
 8009f04:	68e0      	ldr	r0, [r4, #12]
 8009f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f08:	4298      	cmp	r0, r3
 8009f0a:	bfb8      	it	lt
 8009f0c:	4618      	movlt	r0, r3
 8009f0e:	e730      	b.n	8009d72 <_printf_float+0xc6>
 8009f10:	2301      	movs	r3, #1
 8009f12:	464a      	mov	r2, r9
 8009f14:	4631      	mov	r1, r6
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b8      	blx	r7
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f43f af27 	beq.w	8009d6e <_printf_float+0xc2>
 8009f20:	f108 0801 	add.w	r8, r8, #1
 8009f24:	e7e6      	b.n	8009ef4 <_printf_float+0x248>
 8009f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	dc39      	bgt.n	8009fa0 <_printf_float+0x2f4>
 8009f2c:	4a1b      	ldr	r2, [pc, #108]	; (8009f9c <_printf_float+0x2f0>)
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4631      	mov	r1, r6
 8009f32:	4628      	mov	r0, r5
 8009f34:	47b8      	blx	r7
 8009f36:	3001      	adds	r0, #1
 8009f38:	f43f af19 	beq.w	8009d6e <_printf_float+0xc2>
 8009f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f40:	4313      	orrs	r3, r2
 8009f42:	d102      	bne.n	8009f4a <_printf_float+0x29e>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	07d9      	lsls	r1, r3, #31
 8009f48:	d5d8      	bpl.n	8009efc <_printf_float+0x250>
 8009f4a:	ee18 3a10 	vmov	r3, s16
 8009f4e:	4652      	mov	r2, sl
 8009f50:	4631      	mov	r1, r6
 8009f52:	4628      	mov	r0, r5
 8009f54:	47b8      	blx	r7
 8009f56:	3001      	adds	r0, #1
 8009f58:	f43f af09 	beq.w	8009d6e <_printf_float+0xc2>
 8009f5c:	f04f 0900 	mov.w	r9, #0
 8009f60:	f104 0a1a 	add.w	sl, r4, #26
 8009f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f66:	425b      	negs	r3, r3
 8009f68:	454b      	cmp	r3, r9
 8009f6a:	dc01      	bgt.n	8009f70 <_printf_float+0x2c4>
 8009f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6e:	e792      	b.n	8009e96 <_printf_float+0x1ea>
 8009f70:	2301      	movs	r3, #1
 8009f72:	4652      	mov	r2, sl
 8009f74:	4631      	mov	r1, r6
 8009f76:	4628      	mov	r0, r5
 8009f78:	47b8      	blx	r7
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	f43f aef7 	beq.w	8009d6e <_printf_float+0xc2>
 8009f80:	f109 0901 	add.w	r9, r9, #1
 8009f84:	e7ee      	b.n	8009f64 <_printf_float+0x2b8>
 8009f86:	bf00      	nop
 8009f88:	7fefffff 	.word	0x7fefffff
 8009f8c:	081886d4 	.word	0x081886d4
 8009f90:	081886d8 	.word	0x081886d8
 8009f94:	081886e0 	.word	0x081886e0
 8009f98:	081886dc 	.word	0x081886dc
 8009f9c:	081886e4 	.word	0x081886e4
 8009fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	bfa8      	it	ge
 8009fa8:	461a      	movge	r2, r3
 8009faa:	2a00      	cmp	r2, #0
 8009fac:	4691      	mov	r9, r2
 8009fae:	dc37      	bgt.n	800a020 <_printf_float+0x374>
 8009fb0:	f04f 0b00 	mov.w	fp, #0
 8009fb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fb8:	f104 021a 	add.w	r2, r4, #26
 8009fbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fbe:	9305      	str	r3, [sp, #20]
 8009fc0:	eba3 0309 	sub.w	r3, r3, r9
 8009fc4:	455b      	cmp	r3, fp
 8009fc6:	dc33      	bgt.n	800a030 <_printf_float+0x384>
 8009fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	db3b      	blt.n	800a048 <_printf_float+0x39c>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	07da      	lsls	r2, r3, #31
 8009fd4:	d438      	bmi.n	800a048 <_printf_float+0x39c>
 8009fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fd8:	9b05      	ldr	r3, [sp, #20]
 8009fda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	eba2 0901 	sub.w	r9, r2, r1
 8009fe2:	4599      	cmp	r9, r3
 8009fe4:	bfa8      	it	ge
 8009fe6:	4699      	movge	r9, r3
 8009fe8:	f1b9 0f00 	cmp.w	r9, #0
 8009fec:	dc35      	bgt.n	800a05a <_printf_float+0x3ae>
 8009fee:	f04f 0800 	mov.w	r8, #0
 8009ff2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ff6:	f104 0a1a 	add.w	sl, r4, #26
 8009ffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	eba3 0309 	sub.w	r3, r3, r9
 800a004:	4543      	cmp	r3, r8
 800a006:	f77f af79 	ble.w	8009efc <_printf_float+0x250>
 800a00a:	2301      	movs	r3, #1
 800a00c:	4652      	mov	r2, sl
 800a00e:	4631      	mov	r1, r6
 800a010:	4628      	mov	r0, r5
 800a012:	47b8      	blx	r7
 800a014:	3001      	adds	r0, #1
 800a016:	f43f aeaa 	beq.w	8009d6e <_printf_float+0xc2>
 800a01a:	f108 0801 	add.w	r8, r8, #1
 800a01e:	e7ec      	b.n	8009ffa <_printf_float+0x34e>
 800a020:	4613      	mov	r3, r2
 800a022:	4631      	mov	r1, r6
 800a024:	4642      	mov	r2, r8
 800a026:	4628      	mov	r0, r5
 800a028:	47b8      	blx	r7
 800a02a:	3001      	adds	r0, #1
 800a02c:	d1c0      	bne.n	8009fb0 <_printf_float+0x304>
 800a02e:	e69e      	b.n	8009d6e <_printf_float+0xc2>
 800a030:	2301      	movs	r3, #1
 800a032:	4631      	mov	r1, r6
 800a034:	4628      	mov	r0, r5
 800a036:	9205      	str	r2, [sp, #20]
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	f43f ae97 	beq.w	8009d6e <_printf_float+0xc2>
 800a040:	9a05      	ldr	r2, [sp, #20]
 800a042:	f10b 0b01 	add.w	fp, fp, #1
 800a046:	e7b9      	b.n	8009fbc <_printf_float+0x310>
 800a048:	ee18 3a10 	vmov	r3, s16
 800a04c:	4652      	mov	r2, sl
 800a04e:	4631      	mov	r1, r6
 800a050:	4628      	mov	r0, r5
 800a052:	47b8      	blx	r7
 800a054:	3001      	adds	r0, #1
 800a056:	d1be      	bne.n	8009fd6 <_printf_float+0x32a>
 800a058:	e689      	b.n	8009d6e <_printf_float+0xc2>
 800a05a:	9a05      	ldr	r2, [sp, #20]
 800a05c:	464b      	mov	r3, r9
 800a05e:	4442      	add	r2, r8
 800a060:	4631      	mov	r1, r6
 800a062:	4628      	mov	r0, r5
 800a064:	47b8      	blx	r7
 800a066:	3001      	adds	r0, #1
 800a068:	d1c1      	bne.n	8009fee <_printf_float+0x342>
 800a06a:	e680      	b.n	8009d6e <_printf_float+0xc2>
 800a06c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a06e:	2a01      	cmp	r2, #1
 800a070:	dc01      	bgt.n	800a076 <_printf_float+0x3ca>
 800a072:	07db      	lsls	r3, r3, #31
 800a074:	d538      	bpl.n	800a0e8 <_printf_float+0x43c>
 800a076:	2301      	movs	r3, #1
 800a078:	4642      	mov	r2, r8
 800a07a:	4631      	mov	r1, r6
 800a07c:	4628      	mov	r0, r5
 800a07e:	47b8      	blx	r7
 800a080:	3001      	adds	r0, #1
 800a082:	f43f ae74 	beq.w	8009d6e <_printf_float+0xc2>
 800a086:	ee18 3a10 	vmov	r3, s16
 800a08a:	4652      	mov	r2, sl
 800a08c:	4631      	mov	r1, r6
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	f43f ae6b 	beq.w	8009d6e <_printf_float+0xc2>
 800a098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a09c:	2200      	movs	r2, #0
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f7f6 fd22 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0a4:	b9d8      	cbnz	r0, 800a0de <_printf_float+0x432>
 800a0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a8:	f108 0201 	add.w	r2, r8, #1
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	47b8      	blx	r7
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d10e      	bne.n	800a0d6 <_printf_float+0x42a>
 800a0b8:	e659      	b.n	8009d6e <_printf_float+0xc2>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4652      	mov	r2, sl
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	f43f ae52 	beq.w	8009d6e <_printf_float+0xc2>
 800a0ca:	f108 0801 	add.w	r8, r8, #1
 800a0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	4543      	cmp	r3, r8
 800a0d4:	dcf1      	bgt.n	800a0ba <_printf_float+0x40e>
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0dc:	e6dc      	b.n	8009e98 <_printf_float+0x1ec>
 800a0de:	f04f 0800 	mov.w	r8, #0
 800a0e2:	f104 0a1a 	add.w	sl, r4, #26
 800a0e6:	e7f2      	b.n	800a0ce <_printf_float+0x422>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	4642      	mov	r2, r8
 800a0ec:	e7df      	b.n	800a0ae <_printf_float+0x402>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	464a      	mov	r2, r9
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	f43f ae38 	beq.w	8009d6e <_printf_float+0xc2>
 800a0fe:	f108 0801 	add.w	r8, r8, #1
 800a102:	68e3      	ldr	r3, [r4, #12]
 800a104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a106:	1a5b      	subs	r3, r3, r1
 800a108:	4543      	cmp	r3, r8
 800a10a:	dcf0      	bgt.n	800a0ee <_printf_float+0x442>
 800a10c:	e6fa      	b.n	8009f04 <_printf_float+0x258>
 800a10e:	f04f 0800 	mov.w	r8, #0
 800a112:	f104 0919 	add.w	r9, r4, #25
 800a116:	e7f4      	b.n	800a102 <_printf_float+0x456>

0800a118 <_printf_common>:
 800a118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a11c:	4616      	mov	r6, r2
 800a11e:	4699      	mov	r9, r3
 800a120:	688a      	ldr	r2, [r1, #8]
 800a122:	690b      	ldr	r3, [r1, #16]
 800a124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a128:	4293      	cmp	r3, r2
 800a12a:	bfb8      	it	lt
 800a12c:	4613      	movlt	r3, r2
 800a12e:	6033      	str	r3, [r6, #0]
 800a130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a134:	4607      	mov	r7, r0
 800a136:	460c      	mov	r4, r1
 800a138:	b10a      	cbz	r2, 800a13e <_printf_common+0x26>
 800a13a:	3301      	adds	r3, #1
 800a13c:	6033      	str	r3, [r6, #0]
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	0699      	lsls	r1, r3, #26
 800a142:	bf42      	ittt	mi
 800a144:	6833      	ldrmi	r3, [r6, #0]
 800a146:	3302      	addmi	r3, #2
 800a148:	6033      	strmi	r3, [r6, #0]
 800a14a:	6825      	ldr	r5, [r4, #0]
 800a14c:	f015 0506 	ands.w	r5, r5, #6
 800a150:	d106      	bne.n	800a160 <_printf_common+0x48>
 800a152:	f104 0a19 	add.w	sl, r4, #25
 800a156:	68e3      	ldr	r3, [r4, #12]
 800a158:	6832      	ldr	r2, [r6, #0]
 800a15a:	1a9b      	subs	r3, r3, r2
 800a15c:	42ab      	cmp	r3, r5
 800a15e:	dc26      	bgt.n	800a1ae <_printf_common+0x96>
 800a160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a164:	1e13      	subs	r3, r2, #0
 800a166:	6822      	ldr	r2, [r4, #0]
 800a168:	bf18      	it	ne
 800a16a:	2301      	movne	r3, #1
 800a16c:	0692      	lsls	r2, r2, #26
 800a16e:	d42b      	bmi.n	800a1c8 <_printf_common+0xb0>
 800a170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a174:	4649      	mov	r1, r9
 800a176:	4638      	mov	r0, r7
 800a178:	47c0      	blx	r8
 800a17a:	3001      	adds	r0, #1
 800a17c:	d01e      	beq.n	800a1bc <_printf_common+0xa4>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	68e5      	ldr	r5, [r4, #12]
 800a182:	6832      	ldr	r2, [r6, #0]
 800a184:	f003 0306 	and.w	r3, r3, #6
 800a188:	2b04      	cmp	r3, #4
 800a18a:	bf08      	it	eq
 800a18c:	1aad      	subeq	r5, r5, r2
 800a18e:	68a3      	ldr	r3, [r4, #8]
 800a190:	6922      	ldr	r2, [r4, #16]
 800a192:	bf0c      	ite	eq
 800a194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a198:	2500      	movne	r5, #0
 800a19a:	4293      	cmp	r3, r2
 800a19c:	bfc4      	itt	gt
 800a19e:	1a9b      	subgt	r3, r3, r2
 800a1a0:	18ed      	addgt	r5, r5, r3
 800a1a2:	2600      	movs	r6, #0
 800a1a4:	341a      	adds	r4, #26
 800a1a6:	42b5      	cmp	r5, r6
 800a1a8:	d11a      	bne.n	800a1e0 <_printf_common+0xc8>
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	e008      	b.n	800a1c0 <_printf_common+0xa8>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	4652      	mov	r2, sl
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	47c0      	blx	r8
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d103      	bne.n	800a1c4 <_printf_common+0xac>
 800a1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c4:	3501      	adds	r5, #1
 800a1c6:	e7c6      	b.n	800a156 <_printf_common+0x3e>
 800a1c8:	18e1      	adds	r1, r4, r3
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	2030      	movs	r0, #48	; 0x30
 800a1ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1d2:	4422      	add	r2, r4
 800a1d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1dc:	3302      	adds	r3, #2
 800a1de:	e7c7      	b.n	800a170 <_printf_common+0x58>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	47c0      	blx	r8
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d0e6      	beq.n	800a1bc <_printf_common+0xa4>
 800a1ee:	3601      	adds	r6, #1
 800a1f0:	e7d9      	b.n	800a1a6 <_printf_common+0x8e>
	...

0800a1f4 <_printf_i>:
 800a1f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	4691      	mov	r9, r2
 800a1fc:	7e27      	ldrb	r7, [r4, #24]
 800a1fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a200:	2f78      	cmp	r7, #120	; 0x78
 800a202:	4680      	mov	r8, r0
 800a204:	469a      	mov	sl, r3
 800a206:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a20a:	d807      	bhi.n	800a21c <_printf_i+0x28>
 800a20c:	2f62      	cmp	r7, #98	; 0x62
 800a20e:	d80a      	bhi.n	800a226 <_printf_i+0x32>
 800a210:	2f00      	cmp	r7, #0
 800a212:	f000 80d8 	beq.w	800a3c6 <_printf_i+0x1d2>
 800a216:	2f58      	cmp	r7, #88	; 0x58
 800a218:	f000 80a3 	beq.w	800a362 <_printf_i+0x16e>
 800a21c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a224:	e03a      	b.n	800a29c <_printf_i+0xa8>
 800a226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a22a:	2b15      	cmp	r3, #21
 800a22c:	d8f6      	bhi.n	800a21c <_printf_i+0x28>
 800a22e:	a001      	add	r0, pc, #4	; (adr r0, 800a234 <_printf_i+0x40>)
 800a230:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a234:	0800a28d 	.word	0x0800a28d
 800a238:	0800a2a1 	.word	0x0800a2a1
 800a23c:	0800a21d 	.word	0x0800a21d
 800a240:	0800a21d 	.word	0x0800a21d
 800a244:	0800a21d 	.word	0x0800a21d
 800a248:	0800a21d 	.word	0x0800a21d
 800a24c:	0800a2a1 	.word	0x0800a2a1
 800a250:	0800a21d 	.word	0x0800a21d
 800a254:	0800a21d 	.word	0x0800a21d
 800a258:	0800a21d 	.word	0x0800a21d
 800a25c:	0800a21d 	.word	0x0800a21d
 800a260:	0800a3ad 	.word	0x0800a3ad
 800a264:	0800a2d1 	.word	0x0800a2d1
 800a268:	0800a38f 	.word	0x0800a38f
 800a26c:	0800a21d 	.word	0x0800a21d
 800a270:	0800a21d 	.word	0x0800a21d
 800a274:	0800a3cf 	.word	0x0800a3cf
 800a278:	0800a21d 	.word	0x0800a21d
 800a27c:	0800a2d1 	.word	0x0800a2d1
 800a280:	0800a21d 	.word	0x0800a21d
 800a284:	0800a21d 	.word	0x0800a21d
 800a288:	0800a397 	.word	0x0800a397
 800a28c:	680b      	ldr	r3, [r1, #0]
 800a28e:	1d1a      	adds	r2, r3, #4
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	600a      	str	r2, [r1, #0]
 800a294:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a29c:	2301      	movs	r3, #1
 800a29e:	e0a3      	b.n	800a3e8 <_printf_i+0x1f4>
 800a2a0:	6825      	ldr	r5, [r4, #0]
 800a2a2:	6808      	ldr	r0, [r1, #0]
 800a2a4:	062e      	lsls	r6, r5, #24
 800a2a6:	f100 0304 	add.w	r3, r0, #4
 800a2aa:	d50a      	bpl.n	800a2c2 <_printf_i+0xce>
 800a2ac:	6805      	ldr	r5, [r0, #0]
 800a2ae:	600b      	str	r3, [r1, #0]
 800a2b0:	2d00      	cmp	r5, #0
 800a2b2:	da03      	bge.n	800a2bc <_printf_i+0xc8>
 800a2b4:	232d      	movs	r3, #45	; 0x2d
 800a2b6:	426d      	negs	r5, r5
 800a2b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2bc:	485e      	ldr	r0, [pc, #376]	; (800a438 <_printf_i+0x244>)
 800a2be:	230a      	movs	r3, #10
 800a2c0:	e019      	b.n	800a2f6 <_printf_i+0x102>
 800a2c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a2c6:	6805      	ldr	r5, [r0, #0]
 800a2c8:	600b      	str	r3, [r1, #0]
 800a2ca:	bf18      	it	ne
 800a2cc:	b22d      	sxthne	r5, r5
 800a2ce:	e7ef      	b.n	800a2b0 <_printf_i+0xbc>
 800a2d0:	680b      	ldr	r3, [r1, #0]
 800a2d2:	6825      	ldr	r5, [r4, #0]
 800a2d4:	1d18      	adds	r0, r3, #4
 800a2d6:	6008      	str	r0, [r1, #0]
 800a2d8:	0628      	lsls	r0, r5, #24
 800a2da:	d501      	bpl.n	800a2e0 <_printf_i+0xec>
 800a2dc:	681d      	ldr	r5, [r3, #0]
 800a2de:	e002      	b.n	800a2e6 <_printf_i+0xf2>
 800a2e0:	0669      	lsls	r1, r5, #25
 800a2e2:	d5fb      	bpl.n	800a2dc <_printf_i+0xe8>
 800a2e4:	881d      	ldrh	r5, [r3, #0]
 800a2e6:	4854      	ldr	r0, [pc, #336]	; (800a438 <_printf_i+0x244>)
 800a2e8:	2f6f      	cmp	r7, #111	; 0x6f
 800a2ea:	bf0c      	ite	eq
 800a2ec:	2308      	moveq	r3, #8
 800a2ee:	230a      	movne	r3, #10
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2f6:	6866      	ldr	r6, [r4, #4]
 800a2f8:	60a6      	str	r6, [r4, #8]
 800a2fa:	2e00      	cmp	r6, #0
 800a2fc:	bfa2      	ittt	ge
 800a2fe:	6821      	ldrge	r1, [r4, #0]
 800a300:	f021 0104 	bicge.w	r1, r1, #4
 800a304:	6021      	strge	r1, [r4, #0]
 800a306:	b90d      	cbnz	r5, 800a30c <_printf_i+0x118>
 800a308:	2e00      	cmp	r6, #0
 800a30a:	d04d      	beq.n	800a3a8 <_printf_i+0x1b4>
 800a30c:	4616      	mov	r6, r2
 800a30e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a312:	fb03 5711 	mls	r7, r3, r1, r5
 800a316:	5dc7      	ldrb	r7, [r0, r7]
 800a318:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a31c:	462f      	mov	r7, r5
 800a31e:	42bb      	cmp	r3, r7
 800a320:	460d      	mov	r5, r1
 800a322:	d9f4      	bls.n	800a30e <_printf_i+0x11a>
 800a324:	2b08      	cmp	r3, #8
 800a326:	d10b      	bne.n	800a340 <_printf_i+0x14c>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	07df      	lsls	r7, r3, #31
 800a32c:	d508      	bpl.n	800a340 <_printf_i+0x14c>
 800a32e:	6923      	ldr	r3, [r4, #16]
 800a330:	6861      	ldr	r1, [r4, #4]
 800a332:	4299      	cmp	r1, r3
 800a334:	bfde      	ittt	le
 800a336:	2330      	movle	r3, #48	; 0x30
 800a338:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a33c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a340:	1b92      	subs	r2, r2, r6
 800a342:	6122      	str	r2, [r4, #16]
 800a344:	f8cd a000 	str.w	sl, [sp]
 800a348:	464b      	mov	r3, r9
 800a34a:	aa03      	add	r2, sp, #12
 800a34c:	4621      	mov	r1, r4
 800a34e:	4640      	mov	r0, r8
 800a350:	f7ff fee2 	bl	800a118 <_printf_common>
 800a354:	3001      	adds	r0, #1
 800a356:	d14c      	bne.n	800a3f2 <_printf_i+0x1fe>
 800a358:	f04f 30ff 	mov.w	r0, #4294967295
 800a35c:	b004      	add	sp, #16
 800a35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a362:	4835      	ldr	r0, [pc, #212]	; (800a438 <_printf_i+0x244>)
 800a364:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	680e      	ldr	r6, [r1, #0]
 800a36c:	061f      	lsls	r7, r3, #24
 800a36e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a372:	600e      	str	r6, [r1, #0]
 800a374:	d514      	bpl.n	800a3a0 <_printf_i+0x1ac>
 800a376:	07d9      	lsls	r1, r3, #31
 800a378:	bf44      	itt	mi
 800a37a:	f043 0320 	orrmi.w	r3, r3, #32
 800a37e:	6023      	strmi	r3, [r4, #0]
 800a380:	b91d      	cbnz	r5, 800a38a <_printf_i+0x196>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	f023 0320 	bic.w	r3, r3, #32
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	2310      	movs	r3, #16
 800a38c:	e7b0      	b.n	800a2f0 <_printf_i+0xfc>
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	f043 0320 	orr.w	r3, r3, #32
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	2378      	movs	r3, #120	; 0x78
 800a398:	4828      	ldr	r0, [pc, #160]	; (800a43c <_printf_i+0x248>)
 800a39a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a39e:	e7e3      	b.n	800a368 <_printf_i+0x174>
 800a3a0:	065e      	lsls	r6, r3, #25
 800a3a2:	bf48      	it	mi
 800a3a4:	b2ad      	uxthmi	r5, r5
 800a3a6:	e7e6      	b.n	800a376 <_printf_i+0x182>
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	e7bb      	b.n	800a324 <_printf_i+0x130>
 800a3ac:	680b      	ldr	r3, [r1, #0]
 800a3ae:	6826      	ldr	r6, [r4, #0]
 800a3b0:	6960      	ldr	r0, [r4, #20]
 800a3b2:	1d1d      	adds	r5, r3, #4
 800a3b4:	600d      	str	r5, [r1, #0]
 800a3b6:	0635      	lsls	r5, r6, #24
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	d501      	bpl.n	800a3c0 <_printf_i+0x1cc>
 800a3bc:	6018      	str	r0, [r3, #0]
 800a3be:	e002      	b.n	800a3c6 <_printf_i+0x1d2>
 800a3c0:	0671      	lsls	r1, r6, #25
 800a3c2:	d5fb      	bpl.n	800a3bc <_printf_i+0x1c8>
 800a3c4:	8018      	strh	r0, [r3, #0]
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	4616      	mov	r6, r2
 800a3cc:	e7ba      	b.n	800a344 <_printf_i+0x150>
 800a3ce:	680b      	ldr	r3, [r1, #0]
 800a3d0:	1d1a      	adds	r2, r3, #4
 800a3d2:	600a      	str	r2, [r1, #0]
 800a3d4:	681e      	ldr	r6, [r3, #0]
 800a3d6:	6862      	ldr	r2, [r4, #4]
 800a3d8:	2100      	movs	r1, #0
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7f5 ff10 	bl	8000200 <memchr>
 800a3e0:	b108      	cbz	r0, 800a3e6 <_printf_i+0x1f2>
 800a3e2:	1b80      	subs	r0, r0, r6
 800a3e4:	6060      	str	r0, [r4, #4]
 800a3e6:	6863      	ldr	r3, [r4, #4]
 800a3e8:	6123      	str	r3, [r4, #16]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f0:	e7a8      	b.n	800a344 <_printf_i+0x150>
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	47d0      	blx	sl
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	d0ab      	beq.n	800a358 <_printf_i+0x164>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	079b      	lsls	r3, r3, #30
 800a404:	d413      	bmi.n	800a42e <_printf_i+0x23a>
 800a406:	68e0      	ldr	r0, [r4, #12]
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	4298      	cmp	r0, r3
 800a40c:	bfb8      	it	lt
 800a40e:	4618      	movlt	r0, r3
 800a410:	e7a4      	b.n	800a35c <_printf_i+0x168>
 800a412:	2301      	movs	r3, #1
 800a414:	4632      	mov	r2, r6
 800a416:	4649      	mov	r1, r9
 800a418:	4640      	mov	r0, r8
 800a41a:	47d0      	blx	sl
 800a41c:	3001      	adds	r0, #1
 800a41e:	d09b      	beq.n	800a358 <_printf_i+0x164>
 800a420:	3501      	adds	r5, #1
 800a422:	68e3      	ldr	r3, [r4, #12]
 800a424:	9903      	ldr	r1, [sp, #12]
 800a426:	1a5b      	subs	r3, r3, r1
 800a428:	42ab      	cmp	r3, r5
 800a42a:	dcf2      	bgt.n	800a412 <_printf_i+0x21e>
 800a42c:	e7eb      	b.n	800a406 <_printf_i+0x212>
 800a42e:	2500      	movs	r5, #0
 800a430:	f104 0619 	add.w	r6, r4, #25
 800a434:	e7f5      	b.n	800a422 <_printf_i+0x22e>
 800a436:	bf00      	nop
 800a438:	081886e6 	.word	0x081886e6
 800a43c:	081886f7 	.word	0x081886f7

0800a440 <iprintf>:
 800a440:	b40f      	push	{r0, r1, r2, r3}
 800a442:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <iprintf+0x2c>)
 800a444:	b513      	push	{r0, r1, r4, lr}
 800a446:	681c      	ldr	r4, [r3, #0]
 800a448:	b124      	cbz	r4, 800a454 <iprintf+0x14>
 800a44a:	69a3      	ldr	r3, [r4, #24]
 800a44c:	b913      	cbnz	r3, 800a454 <iprintf+0x14>
 800a44e:	4620      	mov	r0, r4
 800a450:	f001 f9cc 	bl	800b7ec <__sinit>
 800a454:	ab05      	add	r3, sp, #20
 800a456:	9a04      	ldr	r2, [sp, #16]
 800a458:	68a1      	ldr	r1, [r4, #8]
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	4620      	mov	r0, r4
 800a45e:	f002 f813 	bl	800c488 <_vfiprintf_r>
 800a462:	b002      	add	sp, #8
 800a464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a468:	b004      	add	sp, #16
 800a46a:	4770      	bx	lr
 800a46c:	20000bc0 	.word	0x20000bc0

0800a470 <_puts_r>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	460e      	mov	r6, r1
 800a474:	4605      	mov	r5, r0
 800a476:	b118      	cbz	r0, 800a480 <_puts_r+0x10>
 800a478:	6983      	ldr	r3, [r0, #24]
 800a47a:	b90b      	cbnz	r3, 800a480 <_puts_r+0x10>
 800a47c:	f001 f9b6 	bl	800b7ec <__sinit>
 800a480:	69ab      	ldr	r3, [r5, #24]
 800a482:	68ac      	ldr	r4, [r5, #8]
 800a484:	b913      	cbnz	r3, 800a48c <_puts_r+0x1c>
 800a486:	4628      	mov	r0, r5
 800a488:	f001 f9b0 	bl	800b7ec <__sinit>
 800a48c:	4b2c      	ldr	r3, [pc, #176]	; (800a540 <_puts_r+0xd0>)
 800a48e:	429c      	cmp	r4, r3
 800a490:	d120      	bne.n	800a4d4 <_puts_r+0x64>
 800a492:	686c      	ldr	r4, [r5, #4]
 800a494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a496:	07db      	lsls	r3, r3, #31
 800a498:	d405      	bmi.n	800a4a6 <_puts_r+0x36>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	0598      	lsls	r0, r3, #22
 800a49e:	d402      	bmi.n	800a4a6 <_puts_r+0x36>
 800a4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4a2:	f001 fa46 	bl	800b932 <__retarget_lock_acquire_recursive>
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	0719      	lsls	r1, r3, #28
 800a4aa:	d51d      	bpl.n	800a4e8 <_puts_r+0x78>
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	b1db      	cbz	r3, 800a4e8 <_puts_r+0x78>
 800a4b0:	3e01      	subs	r6, #1
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	60a3      	str	r3, [r4, #8]
 800a4bc:	bb39      	cbnz	r1, 800a50e <_puts_r+0x9e>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	da38      	bge.n	800a534 <_puts_r+0xc4>
 800a4c2:	4622      	mov	r2, r4
 800a4c4:	210a      	movs	r1, #10
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f000 f93e 	bl	800a748 <__swbuf_r>
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	d011      	beq.n	800a4f4 <_puts_r+0x84>
 800a4d0:	250a      	movs	r5, #10
 800a4d2:	e011      	b.n	800a4f8 <_puts_r+0x88>
 800a4d4:	4b1b      	ldr	r3, [pc, #108]	; (800a544 <_puts_r+0xd4>)
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	d101      	bne.n	800a4de <_puts_r+0x6e>
 800a4da:	68ac      	ldr	r4, [r5, #8]
 800a4dc:	e7da      	b.n	800a494 <_puts_r+0x24>
 800a4de:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <_puts_r+0xd8>)
 800a4e0:	429c      	cmp	r4, r3
 800a4e2:	bf08      	it	eq
 800a4e4:	68ec      	ldreq	r4, [r5, #12]
 800a4e6:	e7d5      	b.n	800a494 <_puts_r+0x24>
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f000 f97e 	bl	800a7ec <__swsetup_r>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d0dd      	beq.n	800a4b0 <_puts_r+0x40>
 800a4f4:	f04f 35ff 	mov.w	r5, #4294967295
 800a4f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4fa:	07da      	lsls	r2, r3, #31
 800a4fc:	d405      	bmi.n	800a50a <_puts_r+0x9a>
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	059b      	lsls	r3, r3, #22
 800a502:	d402      	bmi.n	800a50a <_puts_r+0x9a>
 800a504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a506:	f001 fa15 	bl	800b934 <__retarget_lock_release_recursive>
 800a50a:	4628      	mov	r0, r5
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	2b00      	cmp	r3, #0
 800a510:	da04      	bge.n	800a51c <_puts_r+0xac>
 800a512:	69a2      	ldr	r2, [r4, #24]
 800a514:	429a      	cmp	r2, r3
 800a516:	dc06      	bgt.n	800a526 <_puts_r+0xb6>
 800a518:	290a      	cmp	r1, #10
 800a51a:	d004      	beq.n	800a526 <_puts_r+0xb6>
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	6022      	str	r2, [r4, #0]
 800a522:	7019      	strb	r1, [r3, #0]
 800a524:	e7c5      	b.n	800a4b2 <_puts_r+0x42>
 800a526:	4622      	mov	r2, r4
 800a528:	4628      	mov	r0, r5
 800a52a:	f000 f90d 	bl	800a748 <__swbuf_r>
 800a52e:	3001      	adds	r0, #1
 800a530:	d1bf      	bne.n	800a4b2 <_puts_r+0x42>
 800a532:	e7df      	b.n	800a4f4 <_puts_r+0x84>
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	250a      	movs	r5, #10
 800a538:	1c5a      	adds	r2, r3, #1
 800a53a:	6022      	str	r2, [r4, #0]
 800a53c:	701d      	strb	r5, [r3, #0]
 800a53e:	e7db      	b.n	800a4f8 <_puts_r+0x88>
 800a540:	081887bc 	.word	0x081887bc
 800a544:	081887dc 	.word	0x081887dc
 800a548:	0818879c 	.word	0x0818879c

0800a54c <puts>:
 800a54c:	4b02      	ldr	r3, [pc, #8]	; (800a558 <puts+0xc>)
 800a54e:	4601      	mov	r1, r0
 800a550:	6818      	ldr	r0, [r3, #0]
 800a552:	f7ff bf8d 	b.w	800a470 <_puts_r>
 800a556:	bf00      	nop
 800a558:	20000bc0 	.word	0x20000bc0

0800a55c <_sbrk_r>:
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	4d06      	ldr	r5, [pc, #24]	; (800a578 <_sbrk_r+0x1c>)
 800a560:	2300      	movs	r3, #0
 800a562:	4604      	mov	r4, r0
 800a564:	4608      	mov	r0, r1
 800a566:	602b      	str	r3, [r5, #0]
 800a568:	f7fc fd90 	bl	800708c <_sbrk>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d102      	bne.n	800a576 <_sbrk_r+0x1a>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	b103      	cbz	r3, 800a576 <_sbrk_r+0x1a>
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	2000d2ec 	.word	0x2000d2ec

0800a57c <setvbuf>:
 800a57c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a580:	461d      	mov	r5, r3
 800a582:	4b5d      	ldr	r3, [pc, #372]	; (800a6f8 <setvbuf+0x17c>)
 800a584:	681f      	ldr	r7, [r3, #0]
 800a586:	4604      	mov	r4, r0
 800a588:	460e      	mov	r6, r1
 800a58a:	4690      	mov	r8, r2
 800a58c:	b127      	cbz	r7, 800a598 <setvbuf+0x1c>
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	b913      	cbnz	r3, 800a598 <setvbuf+0x1c>
 800a592:	4638      	mov	r0, r7
 800a594:	f001 f92a 	bl	800b7ec <__sinit>
 800a598:	4b58      	ldr	r3, [pc, #352]	; (800a6fc <setvbuf+0x180>)
 800a59a:	429c      	cmp	r4, r3
 800a59c:	d167      	bne.n	800a66e <setvbuf+0xf2>
 800a59e:	687c      	ldr	r4, [r7, #4]
 800a5a0:	f1b8 0f02 	cmp.w	r8, #2
 800a5a4:	d006      	beq.n	800a5b4 <setvbuf+0x38>
 800a5a6:	f1b8 0f01 	cmp.w	r8, #1
 800a5aa:	f200 809f 	bhi.w	800a6ec <setvbuf+0x170>
 800a5ae:	2d00      	cmp	r5, #0
 800a5b0:	f2c0 809c 	blt.w	800a6ec <setvbuf+0x170>
 800a5b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b6:	07db      	lsls	r3, r3, #31
 800a5b8:	d405      	bmi.n	800a5c6 <setvbuf+0x4a>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	0598      	lsls	r0, r3, #22
 800a5be:	d402      	bmi.n	800a5c6 <setvbuf+0x4a>
 800a5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5c2:	f001 f9b6 	bl	800b932 <__retarget_lock_acquire_recursive>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	f001 f87b 	bl	800b6c4 <_fflush_r>
 800a5ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5d0:	b141      	cbz	r1, 800a5e4 <setvbuf+0x68>
 800a5d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5d6:	4299      	cmp	r1, r3
 800a5d8:	d002      	beq.n	800a5e0 <setvbuf+0x64>
 800a5da:	4638      	mov	r0, r7
 800a5dc:	f7ff fa1c 	bl	8009a18 <_free_r>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	6363      	str	r3, [r4, #52]	; 0x34
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	61a3      	str	r3, [r4, #24]
 800a5e8:	6063      	str	r3, [r4, #4]
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	0619      	lsls	r1, r3, #24
 800a5ee:	d503      	bpl.n	800a5f8 <setvbuf+0x7c>
 800a5f0:	6921      	ldr	r1, [r4, #16]
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	f7ff fa10 	bl	8009a18 <_free_r>
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a5fe:	f023 0303 	bic.w	r3, r3, #3
 800a602:	f1b8 0f02 	cmp.w	r8, #2
 800a606:	81a3      	strh	r3, [r4, #12]
 800a608:	d06c      	beq.n	800a6e4 <setvbuf+0x168>
 800a60a:	ab01      	add	r3, sp, #4
 800a60c:	466a      	mov	r2, sp
 800a60e:	4621      	mov	r1, r4
 800a610:	4638      	mov	r0, r7
 800a612:	f001 f990 	bl	800b936 <__swhatbuf_r>
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	4318      	orrs	r0, r3
 800a61a:	81a0      	strh	r0, [r4, #12]
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	d130      	bne.n	800a682 <setvbuf+0x106>
 800a620:	9d00      	ldr	r5, [sp, #0]
 800a622:	4628      	mov	r0, r5
 800a624:	f7ff f9da 	bl	80099dc <malloc>
 800a628:	4606      	mov	r6, r0
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d155      	bne.n	800a6da <setvbuf+0x15e>
 800a62e:	f8dd 9000 	ldr.w	r9, [sp]
 800a632:	45a9      	cmp	r9, r5
 800a634:	d14a      	bne.n	800a6cc <setvbuf+0x150>
 800a636:	f04f 35ff 	mov.w	r5, #4294967295
 800a63a:	2200      	movs	r2, #0
 800a63c:	60a2      	str	r2, [r4, #8]
 800a63e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a642:	6022      	str	r2, [r4, #0]
 800a644:	6122      	str	r2, [r4, #16]
 800a646:	2201      	movs	r2, #1
 800a648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a64c:	6162      	str	r2, [r4, #20]
 800a64e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a650:	f043 0302 	orr.w	r3, r3, #2
 800a654:	07d2      	lsls	r2, r2, #31
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	d405      	bmi.n	800a666 <setvbuf+0xea>
 800a65a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a65e:	d102      	bne.n	800a666 <setvbuf+0xea>
 800a660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a662:	f001 f967 	bl	800b934 <__retarget_lock_release_recursive>
 800a666:	4628      	mov	r0, r5
 800a668:	b003      	add	sp, #12
 800a66a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a66e:	4b24      	ldr	r3, [pc, #144]	; (800a700 <setvbuf+0x184>)
 800a670:	429c      	cmp	r4, r3
 800a672:	d101      	bne.n	800a678 <setvbuf+0xfc>
 800a674:	68bc      	ldr	r4, [r7, #8]
 800a676:	e793      	b.n	800a5a0 <setvbuf+0x24>
 800a678:	4b22      	ldr	r3, [pc, #136]	; (800a704 <setvbuf+0x188>)
 800a67a:	429c      	cmp	r4, r3
 800a67c:	bf08      	it	eq
 800a67e:	68fc      	ldreq	r4, [r7, #12]
 800a680:	e78e      	b.n	800a5a0 <setvbuf+0x24>
 800a682:	2e00      	cmp	r6, #0
 800a684:	d0cd      	beq.n	800a622 <setvbuf+0xa6>
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	b913      	cbnz	r3, 800a690 <setvbuf+0x114>
 800a68a:	4638      	mov	r0, r7
 800a68c:	f001 f8ae 	bl	800b7ec <__sinit>
 800a690:	f1b8 0f01 	cmp.w	r8, #1
 800a694:	bf08      	it	eq
 800a696:	89a3      	ldrheq	r3, [r4, #12]
 800a698:	6026      	str	r6, [r4, #0]
 800a69a:	bf04      	itt	eq
 800a69c:	f043 0301 	orreq.w	r3, r3, #1
 800a6a0:	81a3      	strheq	r3, [r4, #12]
 800a6a2:	89a2      	ldrh	r2, [r4, #12]
 800a6a4:	f012 0308 	ands.w	r3, r2, #8
 800a6a8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a6ac:	d01c      	beq.n	800a6e8 <setvbuf+0x16c>
 800a6ae:	07d3      	lsls	r3, r2, #31
 800a6b0:	bf41      	itttt	mi
 800a6b2:	2300      	movmi	r3, #0
 800a6b4:	426d      	negmi	r5, r5
 800a6b6:	60a3      	strmi	r3, [r4, #8]
 800a6b8:	61a5      	strmi	r5, [r4, #24]
 800a6ba:	bf58      	it	pl
 800a6bc:	60a5      	strpl	r5, [r4, #8]
 800a6be:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a6c0:	f015 0501 	ands.w	r5, r5, #1
 800a6c4:	d115      	bne.n	800a6f2 <setvbuf+0x176>
 800a6c6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a6ca:	e7c8      	b.n	800a65e <setvbuf+0xe2>
 800a6cc:	4648      	mov	r0, r9
 800a6ce:	f7ff f985 	bl	80099dc <malloc>
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d0ae      	beq.n	800a636 <setvbuf+0xba>
 800a6d8:	464d      	mov	r5, r9
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	e7d0      	b.n	800a686 <setvbuf+0x10a>
 800a6e4:	2500      	movs	r5, #0
 800a6e6:	e7a8      	b.n	800a63a <setvbuf+0xbe>
 800a6e8:	60a3      	str	r3, [r4, #8]
 800a6ea:	e7e8      	b.n	800a6be <setvbuf+0x142>
 800a6ec:	f04f 35ff 	mov.w	r5, #4294967295
 800a6f0:	e7b9      	b.n	800a666 <setvbuf+0xea>
 800a6f2:	2500      	movs	r5, #0
 800a6f4:	e7b7      	b.n	800a666 <setvbuf+0xea>
 800a6f6:	bf00      	nop
 800a6f8:	20000bc0 	.word	0x20000bc0
 800a6fc:	081887bc 	.word	0x081887bc
 800a700:	081887dc 	.word	0x081887dc
 800a704:	0818879c 	.word	0x0818879c

0800a708 <siprintf>:
 800a708:	b40e      	push	{r1, r2, r3}
 800a70a:	b500      	push	{lr}
 800a70c:	b09c      	sub	sp, #112	; 0x70
 800a70e:	ab1d      	add	r3, sp, #116	; 0x74
 800a710:	9002      	str	r0, [sp, #8]
 800a712:	9006      	str	r0, [sp, #24]
 800a714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a718:	4809      	ldr	r0, [pc, #36]	; (800a740 <siprintf+0x38>)
 800a71a:	9107      	str	r1, [sp, #28]
 800a71c:	9104      	str	r1, [sp, #16]
 800a71e:	4909      	ldr	r1, [pc, #36]	; (800a744 <siprintf+0x3c>)
 800a720:	f853 2b04 	ldr.w	r2, [r3], #4
 800a724:	9105      	str	r1, [sp, #20]
 800a726:	6800      	ldr	r0, [r0, #0]
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	a902      	add	r1, sp, #8
 800a72c:	f001 fd82 	bl	800c234 <_svfiprintf_r>
 800a730:	9b02      	ldr	r3, [sp, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
 800a736:	b01c      	add	sp, #112	; 0x70
 800a738:	f85d eb04 	ldr.w	lr, [sp], #4
 800a73c:	b003      	add	sp, #12
 800a73e:	4770      	bx	lr
 800a740:	20000bc0 	.word	0x20000bc0
 800a744:	ffff0208 	.word	0xffff0208

0800a748 <__swbuf_r>:
 800a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74a:	460e      	mov	r6, r1
 800a74c:	4614      	mov	r4, r2
 800a74e:	4605      	mov	r5, r0
 800a750:	b118      	cbz	r0, 800a75a <__swbuf_r+0x12>
 800a752:	6983      	ldr	r3, [r0, #24]
 800a754:	b90b      	cbnz	r3, 800a75a <__swbuf_r+0x12>
 800a756:	f001 f849 	bl	800b7ec <__sinit>
 800a75a:	4b21      	ldr	r3, [pc, #132]	; (800a7e0 <__swbuf_r+0x98>)
 800a75c:	429c      	cmp	r4, r3
 800a75e:	d12b      	bne.n	800a7b8 <__swbuf_r+0x70>
 800a760:	686c      	ldr	r4, [r5, #4]
 800a762:	69a3      	ldr	r3, [r4, #24]
 800a764:	60a3      	str	r3, [r4, #8]
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	071a      	lsls	r2, r3, #28
 800a76a:	d52f      	bpl.n	800a7cc <__swbuf_r+0x84>
 800a76c:	6923      	ldr	r3, [r4, #16]
 800a76e:	b36b      	cbz	r3, 800a7cc <__swbuf_r+0x84>
 800a770:	6923      	ldr	r3, [r4, #16]
 800a772:	6820      	ldr	r0, [r4, #0]
 800a774:	1ac0      	subs	r0, r0, r3
 800a776:	6963      	ldr	r3, [r4, #20]
 800a778:	b2f6      	uxtb	r6, r6
 800a77a:	4283      	cmp	r3, r0
 800a77c:	4637      	mov	r7, r6
 800a77e:	dc04      	bgt.n	800a78a <__swbuf_r+0x42>
 800a780:	4621      	mov	r1, r4
 800a782:	4628      	mov	r0, r5
 800a784:	f000 ff9e 	bl	800b6c4 <_fflush_r>
 800a788:	bb30      	cbnz	r0, 800a7d8 <__swbuf_r+0x90>
 800a78a:	68a3      	ldr	r3, [r4, #8]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	60a3      	str	r3, [r4, #8]
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	1c5a      	adds	r2, r3, #1
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	701e      	strb	r6, [r3, #0]
 800a798:	6963      	ldr	r3, [r4, #20]
 800a79a:	3001      	adds	r0, #1
 800a79c:	4283      	cmp	r3, r0
 800a79e:	d004      	beq.n	800a7aa <__swbuf_r+0x62>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	07db      	lsls	r3, r3, #31
 800a7a4:	d506      	bpl.n	800a7b4 <__swbuf_r+0x6c>
 800a7a6:	2e0a      	cmp	r6, #10
 800a7a8:	d104      	bne.n	800a7b4 <__swbuf_r+0x6c>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f000 ff89 	bl	800b6c4 <_fflush_r>
 800a7b2:	b988      	cbnz	r0, 800a7d8 <__swbuf_r+0x90>
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b8:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <__swbuf_r+0x9c>)
 800a7ba:	429c      	cmp	r4, r3
 800a7bc:	d101      	bne.n	800a7c2 <__swbuf_r+0x7a>
 800a7be:	68ac      	ldr	r4, [r5, #8]
 800a7c0:	e7cf      	b.n	800a762 <__swbuf_r+0x1a>
 800a7c2:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <__swbuf_r+0xa0>)
 800a7c4:	429c      	cmp	r4, r3
 800a7c6:	bf08      	it	eq
 800a7c8:	68ec      	ldreq	r4, [r5, #12]
 800a7ca:	e7ca      	b.n	800a762 <__swbuf_r+0x1a>
 800a7cc:	4621      	mov	r1, r4
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f000 f80c 	bl	800a7ec <__swsetup_r>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d0cb      	beq.n	800a770 <__swbuf_r+0x28>
 800a7d8:	f04f 37ff 	mov.w	r7, #4294967295
 800a7dc:	e7ea      	b.n	800a7b4 <__swbuf_r+0x6c>
 800a7de:	bf00      	nop
 800a7e0:	081887bc 	.word	0x081887bc
 800a7e4:	081887dc 	.word	0x081887dc
 800a7e8:	0818879c 	.word	0x0818879c

0800a7ec <__swsetup_r>:
 800a7ec:	4b32      	ldr	r3, [pc, #200]	; (800a8b8 <__swsetup_r+0xcc>)
 800a7ee:	b570      	push	{r4, r5, r6, lr}
 800a7f0:	681d      	ldr	r5, [r3, #0]
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	b125      	cbz	r5, 800a802 <__swsetup_r+0x16>
 800a7f8:	69ab      	ldr	r3, [r5, #24]
 800a7fa:	b913      	cbnz	r3, 800a802 <__swsetup_r+0x16>
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	f000 fff5 	bl	800b7ec <__sinit>
 800a802:	4b2e      	ldr	r3, [pc, #184]	; (800a8bc <__swsetup_r+0xd0>)
 800a804:	429c      	cmp	r4, r3
 800a806:	d10f      	bne.n	800a828 <__swsetup_r+0x3c>
 800a808:	686c      	ldr	r4, [r5, #4]
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a810:	0719      	lsls	r1, r3, #28
 800a812:	d42c      	bmi.n	800a86e <__swsetup_r+0x82>
 800a814:	06dd      	lsls	r5, r3, #27
 800a816:	d411      	bmi.n	800a83c <__swsetup_r+0x50>
 800a818:	2309      	movs	r3, #9
 800a81a:	6033      	str	r3, [r6, #0]
 800a81c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	f04f 30ff 	mov.w	r0, #4294967295
 800a826:	e03e      	b.n	800a8a6 <__swsetup_r+0xba>
 800a828:	4b25      	ldr	r3, [pc, #148]	; (800a8c0 <__swsetup_r+0xd4>)
 800a82a:	429c      	cmp	r4, r3
 800a82c:	d101      	bne.n	800a832 <__swsetup_r+0x46>
 800a82e:	68ac      	ldr	r4, [r5, #8]
 800a830:	e7eb      	b.n	800a80a <__swsetup_r+0x1e>
 800a832:	4b24      	ldr	r3, [pc, #144]	; (800a8c4 <__swsetup_r+0xd8>)
 800a834:	429c      	cmp	r4, r3
 800a836:	bf08      	it	eq
 800a838:	68ec      	ldreq	r4, [r5, #12]
 800a83a:	e7e6      	b.n	800a80a <__swsetup_r+0x1e>
 800a83c:	0758      	lsls	r0, r3, #29
 800a83e:	d512      	bpl.n	800a866 <__swsetup_r+0x7a>
 800a840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a842:	b141      	cbz	r1, 800a856 <__swsetup_r+0x6a>
 800a844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a848:	4299      	cmp	r1, r3
 800a84a:	d002      	beq.n	800a852 <__swsetup_r+0x66>
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7ff f8e3 	bl	8009a18 <_free_r>
 800a852:	2300      	movs	r3, #0
 800a854:	6363      	str	r3, [r4, #52]	; 0x34
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a85c:	81a3      	strh	r3, [r4, #12]
 800a85e:	2300      	movs	r3, #0
 800a860:	6063      	str	r3, [r4, #4]
 800a862:	6923      	ldr	r3, [r4, #16]
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	f043 0308 	orr.w	r3, r3, #8
 800a86c:	81a3      	strh	r3, [r4, #12]
 800a86e:	6923      	ldr	r3, [r4, #16]
 800a870:	b94b      	cbnz	r3, 800a886 <__swsetup_r+0x9a>
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a87c:	d003      	beq.n	800a886 <__swsetup_r+0x9a>
 800a87e:	4621      	mov	r1, r4
 800a880:	4630      	mov	r0, r6
 800a882:	f001 f87d 	bl	800b980 <__smakebuf_r>
 800a886:	89a0      	ldrh	r0, [r4, #12]
 800a888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a88c:	f010 0301 	ands.w	r3, r0, #1
 800a890:	d00a      	beq.n	800a8a8 <__swsetup_r+0xbc>
 800a892:	2300      	movs	r3, #0
 800a894:	60a3      	str	r3, [r4, #8]
 800a896:	6963      	ldr	r3, [r4, #20]
 800a898:	425b      	negs	r3, r3
 800a89a:	61a3      	str	r3, [r4, #24]
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	b943      	cbnz	r3, 800a8b2 <__swsetup_r+0xc6>
 800a8a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8a4:	d1ba      	bne.n	800a81c <__swsetup_r+0x30>
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	0781      	lsls	r1, r0, #30
 800a8aa:	bf58      	it	pl
 800a8ac:	6963      	ldrpl	r3, [r4, #20]
 800a8ae:	60a3      	str	r3, [r4, #8]
 800a8b0:	e7f4      	b.n	800a89c <__swsetup_r+0xb0>
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	e7f7      	b.n	800a8a6 <__swsetup_r+0xba>
 800a8b6:	bf00      	nop
 800a8b8:	20000bc0 	.word	0x20000bc0
 800a8bc:	081887bc 	.word	0x081887bc
 800a8c0:	081887dc 	.word	0x081887dc
 800a8c4:	0818879c 	.word	0x0818879c

0800a8c8 <quorem>:
 800a8c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	6903      	ldr	r3, [r0, #16]
 800a8ce:	690c      	ldr	r4, [r1, #16]
 800a8d0:	42a3      	cmp	r3, r4
 800a8d2:	4607      	mov	r7, r0
 800a8d4:	f2c0 8081 	blt.w	800a9da <quorem+0x112>
 800a8d8:	3c01      	subs	r4, #1
 800a8da:	f101 0814 	add.w	r8, r1, #20
 800a8de:	f100 0514 	add.w	r5, r0, #20
 800a8e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8e6:	9301      	str	r3, [sp, #4]
 800a8e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a900:	d331      	bcc.n	800a966 <quorem+0x9e>
 800a902:	f04f 0e00 	mov.w	lr, #0
 800a906:	4640      	mov	r0, r8
 800a908:	46ac      	mov	ip, r5
 800a90a:	46f2      	mov	sl, lr
 800a90c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a910:	b293      	uxth	r3, r2
 800a912:	fb06 e303 	mla	r3, r6, r3, lr
 800a916:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	ebaa 0303 	sub.w	r3, sl, r3
 800a920:	0c12      	lsrs	r2, r2, #16
 800a922:	f8dc a000 	ldr.w	sl, [ip]
 800a926:	fb06 e202 	mla	r2, r6, r2, lr
 800a92a:	fa13 f38a 	uxtah	r3, r3, sl
 800a92e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a932:	fa1f fa82 	uxth.w	sl, r2
 800a936:	f8dc 2000 	ldr.w	r2, [ip]
 800a93a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a93e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a942:	b29b      	uxth	r3, r3
 800a944:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a948:	4581      	cmp	r9, r0
 800a94a:	f84c 3b04 	str.w	r3, [ip], #4
 800a94e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a952:	d2db      	bcs.n	800a90c <quorem+0x44>
 800a954:	f855 300b 	ldr.w	r3, [r5, fp]
 800a958:	b92b      	cbnz	r3, 800a966 <quorem+0x9e>
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	3b04      	subs	r3, #4
 800a95e:	429d      	cmp	r5, r3
 800a960:	461a      	mov	r2, r3
 800a962:	d32e      	bcc.n	800a9c2 <quorem+0xfa>
 800a964:	613c      	str	r4, [r7, #16]
 800a966:	4638      	mov	r0, r7
 800a968:	f001 fad4 	bl	800bf14 <__mcmp>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	db24      	blt.n	800a9ba <quorem+0xf2>
 800a970:	3601      	adds	r6, #1
 800a972:	4628      	mov	r0, r5
 800a974:	f04f 0c00 	mov.w	ip, #0
 800a978:	f858 2b04 	ldr.w	r2, [r8], #4
 800a97c:	f8d0 e000 	ldr.w	lr, [r0]
 800a980:	b293      	uxth	r3, r2
 800a982:	ebac 0303 	sub.w	r3, ip, r3
 800a986:	0c12      	lsrs	r2, r2, #16
 800a988:	fa13 f38e 	uxtah	r3, r3, lr
 800a98c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a994:	b29b      	uxth	r3, r3
 800a996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a99a:	45c1      	cmp	r9, r8
 800a99c:	f840 3b04 	str.w	r3, [r0], #4
 800a9a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9a4:	d2e8      	bcs.n	800a978 <quorem+0xb0>
 800a9a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9ae:	b922      	cbnz	r2, 800a9ba <quorem+0xf2>
 800a9b0:	3b04      	subs	r3, #4
 800a9b2:	429d      	cmp	r5, r3
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	d30a      	bcc.n	800a9ce <quorem+0x106>
 800a9b8:	613c      	str	r4, [r7, #16]
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	b003      	add	sp, #12
 800a9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c2:	6812      	ldr	r2, [r2, #0]
 800a9c4:	3b04      	subs	r3, #4
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	d1cc      	bne.n	800a964 <quorem+0x9c>
 800a9ca:	3c01      	subs	r4, #1
 800a9cc:	e7c7      	b.n	800a95e <quorem+0x96>
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	3b04      	subs	r3, #4
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	d1f0      	bne.n	800a9b8 <quorem+0xf0>
 800a9d6:	3c01      	subs	r4, #1
 800a9d8:	e7eb      	b.n	800a9b2 <quorem+0xea>
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e7ee      	b.n	800a9bc <quorem+0xf4>
	...

0800a9e0 <_dtoa_r>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	ed2d 8b02 	vpush	{d8}
 800a9e8:	ec57 6b10 	vmov	r6, r7, d0
 800a9ec:	b095      	sub	sp, #84	; 0x54
 800a9ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a9f4:	9105      	str	r1, [sp, #20]
 800a9f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa00:	b975      	cbnz	r5, 800aa20 <_dtoa_r+0x40>
 800aa02:	2010      	movs	r0, #16
 800aa04:	f7fe ffea 	bl	80099dc <malloc>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	6260      	str	r0, [r4, #36]	; 0x24
 800aa0c:	b920      	cbnz	r0, 800aa18 <_dtoa_r+0x38>
 800aa0e:	4bb2      	ldr	r3, [pc, #712]	; (800acd8 <_dtoa_r+0x2f8>)
 800aa10:	21ea      	movs	r1, #234	; 0xea
 800aa12:	48b2      	ldr	r0, [pc, #712]	; (800acdc <_dtoa_r+0x2fc>)
 800aa14:	f001 febe 	bl	800c794 <__assert_func>
 800aa18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa1c:	6005      	str	r5, [r0, #0]
 800aa1e:	60c5      	str	r5, [r0, #12]
 800aa20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	b151      	cbz	r1, 800aa3c <_dtoa_r+0x5c>
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	604a      	str	r2, [r1, #4]
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	4093      	lsls	r3, r2
 800aa2e:	608b      	str	r3, [r1, #8]
 800aa30:	4620      	mov	r0, r4
 800aa32:	f001 f831 	bl	800ba98 <_Bfree>
 800aa36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	1e3b      	subs	r3, r7, #0
 800aa3e:	bfb9      	ittee	lt
 800aa40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa44:	9303      	strlt	r3, [sp, #12]
 800aa46:	2300      	movge	r3, #0
 800aa48:	f8c8 3000 	strge.w	r3, [r8]
 800aa4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aa50:	4ba3      	ldr	r3, [pc, #652]	; (800ace0 <_dtoa_r+0x300>)
 800aa52:	bfbc      	itt	lt
 800aa54:	2201      	movlt	r2, #1
 800aa56:	f8c8 2000 	strlt.w	r2, [r8]
 800aa5a:	ea33 0309 	bics.w	r3, r3, r9
 800aa5e:	d11b      	bne.n	800aa98 <_dtoa_r+0xb8>
 800aa60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa62:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa6c:	4333      	orrs	r3, r6
 800aa6e:	f000 857a 	beq.w	800b566 <_dtoa_r+0xb86>
 800aa72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa74:	b963      	cbnz	r3, 800aa90 <_dtoa_r+0xb0>
 800aa76:	4b9b      	ldr	r3, [pc, #620]	; (800ace4 <_dtoa_r+0x304>)
 800aa78:	e024      	b.n	800aac4 <_dtoa_r+0xe4>
 800aa7a:	4b9b      	ldr	r3, [pc, #620]	; (800ace8 <_dtoa_r+0x308>)
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	3308      	adds	r3, #8
 800aa80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	9800      	ldr	r0, [sp, #0]
 800aa86:	b015      	add	sp, #84	; 0x54
 800aa88:	ecbd 8b02 	vpop	{d8}
 800aa8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa90:	4b94      	ldr	r3, [pc, #592]	; (800ace4 <_dtoa_r+0x304>)
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	3303      	adds	r3, #3
 800aa96:	e7f3      	b.n	800aa80 <_dtoa_r+0xa0>
 800aa98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	ec51 0b17 	vmov	r0, r1, d7
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aaa8:	f7f6 f81e 	bl	8000ae8 <__aeabi_dcmpeq>
 800aaac:	4680      	mov	r8, r0
 800aaae:	b158      	cbz	r0, 800aac8 <_dtoa_r+0xe8>
 800aab0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aab2:	2301      	movs	r3, #1
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 8551 	beq.w	800b560 <_dtoa_r+0xb80>
 800aabe:	488b      	ldr	r0, [pc, #556]	; (800acec <_dtoa_r+0x30c>)
 800aac0:	6018      	str	r0, [r3, #0]
 800aac2:	1e43      	subs	r3, r0, #1
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	e7dd      	b.n	800aa84 <_dtoa_r+0xa4>
 800aac8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800aacc:	aa12      	add	r2, sp, #72	; 0x48
 800aace:	a913      	add	r1, sp, #76	; 0x4c
 800aad0:	4620      	mov	r0, r4
 800aad2:	f001 fac3 	bl	800c05c <__d2b>
 800aad6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aada:	4683      	mov	fp, r0
 800aadc:	2d00      	cmp	r5, #0
 800aade:	d07c      	beq.n	800abda <_dtoa_r+0x1fa>
 800aae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aae2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800aae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800aaee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aaf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aaf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aafa:	4b7d      	ldr	r3, [pc, #500]	; (800acf0 <_dtoa_r+0x310>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	4630      	mov	r0, r6
 800ab00:	4639      	mov	r1, r7
 800ab02:	f7f5 fbd1 	bl	80002a8 <__aeabi_dsub>
 800ab06:	a36e      	add	r3, pc, #440	; (adr r3, 800acc0 <_dtoa_r+0x2e0>)
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f7f5 fd84 	bl	8000618 <__aeabi_dmul>
 800ab10:	a36d      	add	r3, pc, #436	; (adr r3, 800acc8 <_dtoa_r+0x2e8>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fbc9 	bl	80002ac <__adddf3>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	460f      	mov	r7, r1
 800ab20:	f7f5 fd10 	bl	8000544 <__aeabi_i2d>
 800ab24:	a36a      	add	r3, pc, #424	; (adr r3, 800acd0 <_dtoa_r+0x2f0>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fd75 	bl	8000618 <__aeabi_dmul>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	4630      	mov	r0, r6
 800ab34:	4639      	mov	r1, r7
 800ab36:	f7f5 fbb9 	bl	80002ac <__adddf3>
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	f7f6 f81b 	bl	8000b78 <__aeabi_d2iz>
 800ab42:	2200      	movs	r2, #0
 800ab44:	4682      	mov	sl, r0
 800ab46:	2300      	movs	r3, #0
 800ab48:	4630      	mov	r0, r6
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	f7f5 ffd6 	bl	8000afc <__aeabi_dcmplt>
 800ab50:	b148      	cbz	r0, 800ab66 <_dtoa_r+0x186>
 800ab52:	4650      	mov	r0, sl
 800ab54:	f7f5 fcf6 	bl	8000544 <__aeabi_i2d>
 800ab58:	4632      	mov	r2, r6
 800ab5a:	463b      	mov	r3, r7
 800ab5c:	f7f5 ffc4 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab60:	b908      	cbnz	r0, 800ab66 <_dtoa_r+0x186>
 800ab62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab66:	f1ba 0f16 	cmp.w	sl, #22
 800ab6a:	d854      	bhi.n	800ac16 <_dtoa_r+0x236>
 800ab6c:	4b61      	ldr	r3, [pc, #388]	; (800acf4 <_dtoa_r+0x314>)
 800ab6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab7a:	f7f5 ffbf 	bl	8000afc <__aeabi_dcmplt>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d04b      	beq.n	800ac1a <_dtoa_r+0x23a>
 800ab82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab86:	2300      	movs	r3, #0
 800ab88:	930e      	str	r3, [sp, #56]	; 0x38
 800ab8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab8c:	1b5d      	subs	r5, r3, r5
 800ab8e:	1e6b      	subs	r3, r5, #1
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	bf43      	ittte	mi
 800ab94:	2300      	movmi	r3, #0
 800ab96:	f1c5 0801 	rsbmi	r8, r5, #1
 800ab9a:	9304      	strmi	r3, [sp, #16]
 800ab9c:	f04f 0800 	movpl.w	r8, #0
 800aba0:	f1ba 0f00 	cmp.w	sl, #0
 800aba4:	db3b      	blt.n	800ac1e <_dtoa_r+0x23e>
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800abac:	4453      	add	r3, sl
 800abae:	9304      	str	r3, [sp, #16]
 800abb0:	2300      	movs	r3, #0
 800abb2:	9306      	str	r3, [sp, #24]
 800abb4:	9b05      	ldr	r3, [sp, #20]
 800abb6:	2b09      	cmp	r3, #9
 800abb8:	d869      	bhi.n	800ac8e <_dtoa_r+0x2ae>
 800abba:	2b05      	cmp	r3, #5
 800abbc:	bfc4      	itt	gt
 800abbe:	3b04      	subgt	r3, #4
 800abc0:	9305      	strgt	r3, [sp, #20]
 800abc2:	9b05      	ldr	r3, [sp, #20]
 800abc4:	f1a3 0302 	sub.w	r3, r3, #2
 800abc8:	bfcc      	ite	gt
 800abca:	2500      	movgt	r5, #0
 800abcc:	2501      	movle	r5, #1
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d869      	bhi.n	800aca6 <_dtoa_r+0x2c6>
 800abd2:	e8df f003 	tbb	[pc, r3]
 800abd6:	4e2c      	.short	0x4e2c
 800abd8:	5a4c      	.short	0x5a4c
 800abda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800abde:	441d      	add	r5, r3
 800abe0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	bfc1      	itttt	gt
 800abe8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800abf0:	fa09 f303 	lslgt.w	r3, r9, r3
 800abf4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800abf8:	bfda      	itte	le
 800abfa:	f1c3 0320 	rsble	r3, r3, #32
 800abfe:	fa06 f003 	lslle.w	r0, r6, r3
 800ac02:	4318      	orrgt	r0, r3
 800ac04:	f7f5 fc8e 	bl	8000524 <__aeabi_ui2d>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac10:	3d01      	subs	r5, #1
 800ac12:	9310      	str	r3, [sp, #64]	; 0x40
 800ac14:	e771      	b.n	800aafa <_dtoa_r+0x11a>
 800ac16:	2301      	movs	r3, #1
 800ac18:	e7b6      	b.n	800ab88 <_dtoa_r+0x1a8>
 800ac1a:	900e      	str	r0, [sp, #56]	; 0x38
 800ac1c:	e7b5      	b.n	800ab8a <_dtoa_r+0x1aa>
 800ac1e:	f1ca 0300 	rsb	r3, sl, #0
 800ac22:	9306      	str	r3, [sp, #24]
 800ac24:	2300      	movs	r3, #0
 800ac26:	eba8 080a 	sub.w	r8, r8, sl
 800ac2a:	930d      	str	r3, [sp, #52]	; 0x34
 800ac2c:	e7c2      	b.n	800abb4 <_dtoa_r+0x1d4>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9308      	str	r3, [sp, #32]
 800ac32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dc39      	bgt.n	800acac <_dtoa_r+0x2cc>
 800ac38:	f04f 0901 	mov.w	r9, #1
 800ac3c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac40:	464b      	mov	r3, r9
 800ac42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ac46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac48:	2200      	movs	r2, #0
 800ac4a:	6042      	str	r2, [r0, #4]
 800ac4c:	2204      	movs	r2, #4
 800ac4e:	f102 0614 	add.w	r6, r2, #20
 800ac52:	429e      	cmp	r6, r3
 800ac54:	6841      	ldr	r1, [r0, #4]
 800ac56:	d92f      	bls.n	800acb8 <_dtoa_r+0x2d8>
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f000 fedd 	bl	800ba18 <_Balloc>
 800ac5e:	9000      	str	r0, [sp, #0]
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d14b      	bne.n	800acfc <_dtoa_r+0x31c>
 800ac64:	4b24      	ldr	r3, [pc, #144]	; (800acf8 <_dtoa_r+0x318>)
 800ac66:	4602      	mov	r2, r0
 800ac68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac6c:	e6d1      	b.n	800aa12 <_dtoa_r+0x32>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e7de      	b.n	800ac30 <_dtoa_r+0x250>
 800ac72:	2300      	movs	r3, #0
 800ac74:	9308      	str	r3, [sp, #32]
 800ac76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac78:	eb0a 0903 	add.w	r9, sl, r3
 800ac7c:	f109 0301 	add.w	r3, r9, #1
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	9301      	str	r3, [sp, #4]
 800ac84:	bfb8      	it	lt
 800ac86:	2301      	movlt	r3, #1
 800ac88:	e7dd      	b.n	800ac46 <_dtoa_r+0x266>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e7f2      	b.n	800ac74 <_dtoa_r+0x294>
 800ac8e:	2501      	movs	r5, #1
 800ac90:	2300      	movs	r3, #0
 800ac92:	9305      	str	r3, [sp, #20]
 800ac94:	9508      	str	r5, [sp, #32]
 800ac96:	f04f 39ff 	mov.w	r9, #4294967295
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800aca0:	2312      	movs	r3, #18
 800aca2:	9209      	str	r2, [sp, #36]	; 0x24
 800aca4:	e7cf      	b.n	800ac46 <_dtoa_r+0x266>
 800aca6:	2301      	movs	r3, #1
 800aca8:	9308      	str	r3, [sp, #32]
 800acaa:	e7f4      	b.n	800ac96 <_dtoa_r+0x2b6>
 800acac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800acb0:	f8cd 9004 	str.w	r9, [sp, #4]
 800acb4:	464b      	mov	r3, r9
 800acb6:	e7c6      	b.n	800ac46 <_dtoa_r+0x266>
 800acb8:	3101      	adds	r1, #1
 800acba:	6041      	str	r1, [r0, #4]
 800acbc:	0052      	lsls	r2, r2, #1
 800acbe:	e7c6      	b.n	800ac4e <_dtoa_r+0x26e>
 800acc0:	636f4361 	.word	0x636f4361
 800acc4:	3fd287a7 	.word	0x3fd287a7
 800acc8:	8b60c8b3 	.word	0x8b60c8b3
 800accc:	3fc68a28 	.word	0x3fc68a28
 800acd0:	509f79fb 	.word	0x509f79fb
 800acd4:	3fd34413 	.word	0x3fd34413
 800acd8:	08188715 	.word	0x08188715
 800acdc:	0818872c 	.word	0x0818872c
 800ace0:	7ff00000 	.word	0x7ff00000
 800ace4:	08188711 	.word	0x08188711
 800ace8:	08188708 	.word	0x08188708
 800acec:	081886e5 	.word	0x081886e5
 800acf0:	3ff80000 	.word	0x3ff80000
 800acf4:	08188888 	.word	0x08188888
 800acf8:	0818878b 	.word	0x0818878b
 800acfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acfe:	9a00      	ldr	r2, [sp, #0]
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	9b01      	ldr	r3, [sp, #4]
 800ad04:	2b0e      	cmp	r3, #14
 800ad06:	f200 80ad 	bhi.w	800ae64 <_dtoa_r+0x484>
 800ad0a:	2d00      	cmp	r5, #0
 800ad0c:	f000 80aa 	beq.w	800ae64 <_dtoa_r+0x484>
 800ad10:	f1ba 0f00 	cmp.w	sl, #0
 800ad14:	dd36      	ble.n	800ad84 <_dtoa_r+0x3a4>
 800ad16:	4ac3      	ldr	r2, [pc, #780]	; (800b024 <_dtoa_r+0x644>)
 800ad18:	f00a 030f 	and.w	r3, sl, #15
 800ad1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad20:	ed93 7b00 	vldr	d7, [r3]
 800ad24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ad28:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ad2c:	eeb0 8a47 	vmov.f32	s16, s14
 800ad30:	eef0 8a67 	vmov.f32	s17, s15
 800ad34:	d016      	beq.n	800ad64 <_dtoa_r+0x384>
 800ad36:	4bbc      	ldr	r3, [pc, #752]	; (800b028 <_dtoa_r+0x648>)
 800ad38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad40:	f7f5 fd94 	bl	800086c <__aeabi_ddiv>
 800ad44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad48:	f007 070f 	and.w	r7, r7, #15
 800ad4c:	2503      	movs	r5, #3
 800ad4e:	4eb6      	ldr	r6, [pc, #728]	; (800b028 <_dtoa_r+0x648>)
 800ad50:	b957      	cbnz	r7, 800ad68 <_dtoa_r+0x388>
 800ad52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad56:	ec53 2b18 	vmov	r2, r3, d8
 800ad5a:	f7f5 fd87 	bl	800086c <__aeabi_ddiv>
 800ad5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad62:	e029      	b.n	800adb8 <_dtoa_r+0x3d8>
 800ad64:	2502      	movs	r5, #2
 800ad66:	e7f2      	b.n	800ad4e <_dtoa_r+0x36e>
 800ad68:	07f9      	lsls	r1, r7, #31
 800ad6a:	d508      	bpl.n	800ad7e <_dtoa_r+0x39e>
 800ad6c:	ec51 0b18 	vmov	r0, r1, d8
 800ad70:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad74:	f7f5 fc50 	bl	8000618 <__aeabi_dmul>
 800ad78:	ec41 0b18 	vmov	d8, r0, r1
 800ad7c:	3501      	adds	r5, #1
 800ad7e:	107f      	asrs	r7, r7, #1
 800ad80:	3608      	adds	r6, #8
 800ad82:	e7e5      	b.n	800ad50 <_dtoa_r+0x370>
 800ad84:	f000 80a6 	beq.w	800aed4 <_dtoa_r+0x4f4>
 800ad88:	f1ca 0600 	rsb	r6, sl, #0
 800ad8c:	4ba5      	ldr	r3, [pc, #660]	; (800b024 <_dtoa_r+0x644>)
 800ad8e:	4fa6      	ldr	r7, [pc, #664]	; (800b028 <_dtoa_r+0x648>)
 800ad90:	f006 020f 	and.w	r2, r6, #15
 800ad94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ada0:	f7f5 fc3a 	bl	8000618 <__aeabi_dmul>
 800ada4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ada8:	1136      	asrs	r6, r6, #4
 800adaa:	2300      	movs	r3, #0
 800adac:	2502      	movs	r5, #2
 800adae:	2e00      	cmp	r6, #0
 800adb0:	f040 8085 	bne.w	800aebe <_dtoa_r+0x4de>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1d2      	bne.n	800ad5e <_dtoa_r+0x37e>
 800adb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 808c 	beq.w	800aed8 <_dtoa_r+0x4f8>
 800adc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adc4:	4b99      	ldr	r3, [pc, #612]	; (800b02c <_dtoa_r+0x64c>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	4630      	mov	r0, r6
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 fe96 	bl	8000afc <__aeabi_dcmplt>
 800add0:	2800      	cmp	r0, #0
 800add2:	f000 8081 	beq.w	800aed8 <_dtoa_r+0x4f8>
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d07d      	beq.n	800aed8 <_dtoa_r+0x4f8>
 800addc:	f1b9 0f00 	cmp.w	r9, #0
 800ade0:	dd3c      	ble.n	800ae5c <_dtoa_r+0x47c>
 800ade2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ade6:	9307      	str	r3, [sp, #28]
 800ade8:	2200      	movs	r2, #0
 800adea:	4b91      	ldr	r3, [pc, #580]	; (800b030 <_dtoa_r+0x650>)
 800adec:	4630      	mov	r0, r6
 800adee:	4639      	mov	r1, r7
 800adf0:	f7f5 fc12 	bl	8000618 <__aeabi_dmul>
 800adf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adf8:	3501      	adds	r5, #1
 800adfa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800adfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae02:	4628      	mov	r0, r5
 800ae04:	f7f5 fb9e 	bl	8000544 <__aeabi_i2d>
 800ae08:	4632      	mov	r2, r6
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	f7f5 fc04 	bl	8000618 <__aeabi_dmul>
 800ae10:	4b88      	ldr	r3, [pc, #544]	; (800b034 <_dtoa_r+0x654>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	f7f5 fa4a 	bl	80002ac <__adddf3>
 800ae18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ae1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae20:	9303      	str	r3, [sp, #12]
 800ae22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d15c      	bne.n	800aee2 <_dtoa_r+0x502>
 800ae28:	4b83      	ldr	r3, [pc, #524]	; (800b038 <_dtoa_r+0x658>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	4639      	mov	r1, r7
 800ae30:	f7f5 fa3a 	bl	80002a8 <__aeabi_dsub>
 800ae34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae38:	4606      	mov	r6, r0
 800ae3a:	460f      	mov	r7, r1
 800ae3c:	f7f5 fe7c 	bl	8000b38 <__aeabi_dcmpgt>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f040 8296 	bne.w	800b372 <_dtoa_r+0x992>
 800ae46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae50:	4639      	mov	r1, r7
 800ae52:	f7f5 fe53 	bl	8000afc <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f040 8288 	bne.w	800b36c <_dtoa_r+0x98c>
 800ae5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f2c0 8158 	blt.w	800b11c <_dtoa_r+0x73c>
 800ae6c:	f1ba 0f0e 	cmp.w	sl, #14
 800ae70:	f300 8154 	bgt.w	800b11c <_dtoa_r+0x73c>
 800ae74:	4b6b      	ldr	r3, [pc, #428]	; (800b024 <_dtoa_r+0x644>)
 800ae76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f280 80e3 	bge.w	800b04c <_dtoa_r+0x66c>
 800ae86:	9b01      	ldr	r3, [sp, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f300 80df 	bgt.w	800b04c <_dtoa_r+0x66c>
 800ae8e:	f040 826d 	bne.w	800b36c <_dtoa_r+0x98c>
 800ae92:	4b69      	ldr	r3, [pc, #420]	; (800b038 <_dtoa_r+0x658>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	4640      	mov	r0, r8
 800ae98:	4649      	mov	r1, r9
 800ae9a:	f7f5 fbbd 	bl	8000618 <__aeabi_dmul>
 800ae9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aea2:	f7f5 fe3f 	bl	8000b24 <__aeabi_dcmpge>
 800aea6:	9e01      	ldr	r6, [sp, #4]
 800aea8:	4637      	mov	r7, r6
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	f040 8243 	bne.w	800b336 <_dtoa_r+0x956>
 800aeb0:	9d00      	ldr	r5, [sp, #0]
 800aeb2:	2331      	movs	r3, #49	; 0x31
 800aeb4:	f805 3b01 	strb.w	r3, [r5], #1
 800aeb8:	f10a 0a01 	add.w	sl, sl, #1
 800aebc:	e23f      	b.n	800b33e <_dtoa_r+0x95e>
 800aebe:	07f2      	lsls	r2, r6, #31
 800aec0:	d505      	bpl.n	800aece <_dtoa_r+0x4ee>
 800aec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aec6:	f7f5 fba7 	bl	8000618 <__aeabi_dmul>
 800aeca:	3501      	adds	r5, #1
 800aecc:	2301      	movs	r3, #1
 800aece:	1076      	asrs	r6, r6, #1
 800aed0:	3708      	adds	r7, #8
 800aed2:	e76c      	b.n	800adae <_dtoa_r+0x3ce>
 800aed4:	2502      	movs	r5, #2
 800aed6:	e76f      	b.n	800adb8 <_dtoa_r+0x3d8>
 800aed8:	9b01      	ldr	r3, [sp, #4]
 800aeda:	f8cd a01c 	str.w	sl, [sp, #28]
 800aede:	930c      	str	r3, [sp, #48]	; 0x30
 800aee0:	e78d      	b.n	800adfe <_dtoa_r+0x41e>
 800aee2:	9900      	ldr	r1, [sp, #0]
 800aee4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aee8:	4b4e      	ldr	r3, [pc, #312]	; (800b024 <_dtoa_r+0x644>)
 800aeea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aeee:	4401      	add	r1, r0
 800aef0:	9102      	str	r1, [sp, #8]
 800aef2:	9908      	ldr	r1, [sp, #32]
 800aef4:	eeb0 8a47 	vmov.f32	s16, s14
 800aef8:	eef0 8a67 	vmov.f32	s17, s15
 800aefc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af04:	2900      	cmp	r1, #0
 800af06:	d045      	beq.n	800af94 <_dtoa_r+0x5b4>
 800af08:	494c      	ldr	r1, [pc, #304]	; (800b03c <_dtoa_r+0x65c>)
 800af0a:	2000      	movs	r0, #0
 800af0c:	f7f5 fcae 	bl	800086c <__aeabi_ddiv>
 800af10:	ec53 2b18 	vmov	r2, r3, d8
 800af14:	f7f5 f9c8 	bl	80002a8 <__aeabi_dsub>
 800af18:	9d00      	ldr	r5, [sp, #0]
 800af1a:	ec41 0b18 	vmov	d8, r0, r1
 800af1e:	4639      	mov	r1, r7
 800af20:	4630      	mov	r0, r6
 800af22:	f7f5 fe29 	bl	8000b78 <__aeabi_d2iz>
 800af26:	900c      	str	r0, [sp, #48]	; 0x30
 800af28:	f7f5 fb0c 	bl	8000544 <__aeabi_i2d>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	4630      	mov	r0, r6
 800af32:	4639      	mov	r1, r7
 800af34:	f7f5 f9b8 	bl	80002a8 <__aeabi_dsub>
 800af38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af3a:	3330      	adds	r3, #48	; 0x30
 800af3c:	f805 3b01 	strb.w	r3, [r5], #1
 800af40:	ec53 2b18 	vmov	r2, r3, d8
 800af44:	4606      	mov	r6, r0
 800af46:	460f      	mov	r7, r1
 800af48:	f7f5 fdd8 	bl	8000afc <__aeabi_dcmplt>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d165      	bne.n	800b01c <_dtoa_r+0x63c>
 800af50:	4632      	mov	r2, r6
 800af52:	463b      	mov	r3, r7
 800af54:	4935      	ldr	r1, [pc, #212]	; (800b02c <_dtoa_r+0x64c>)
 800af56:	2000      	movs	r0, #0
 800af58:	f7f5 f9a6 	bl	80002a8 <__aeabi_dsub>
 800af5c:	ec53 2b18 	vmov	r2, r3, d8
 800af60:	f7f5 fdcc 	bl	8000afc <__aeabi_dcmplt>
 800af64:	2800      	cmp	r0, #0
 800af66:	f040 80b9 	bne.w	800b0dc <_dtoa_r+0x6fc>
 800af6a:	9b02      	ldr	r3, [sp, #8]
 800af6c:	429d      	cmp	r5, r3
 800af6e:	f43f af75 	beq.w	800ae5c <_dtoa_r+0x47c>
 800af72:	4b2f      	ldr	r3, [pc, #188]	; (800b030 <_dtoa_r+0x650>)
 800af74:	ec51 0b18 	vmov	r0, r1, d8
 800af78:	2200      	movs	r2, #0
 800af7a:	f7f5 fb4d 	bl	8000618 <__aeabi_dmul>
 800af7e:	4b2c      	ldr	r3, [pc, #176]	; (800b030 <_dtoa_r+0x650>)
 800af80:	ec41 0b18 	vmov	d8, r0, r1
 800af84:	2200      	movs	r2, #0
 800af86:	4630      	mov	r0, r6
 800af88:	4639      	mov	r1, r7
 800af8a:	f7f5 fb45 	bl	8000618 <__aeabi_dmul>
 800af8e:	4606      	mov	r6, r0
 800af90:	460f      	mov	r7, r1
 800af92:	e7c4      	b.n	800af1e <_dtoa_r+0x53e>
 800af94:	ec51 0b17 	vmov	r0, r1, d7
 800af98:	f7f5 fb3e 	bl	8000618 <__aeabi_dmul>
 800af9c:	9b02      	ldr	r3, [sp, #8]
 800af9e:	9d00      	ldr	r5, [sp, #0]
 800afa0:	930c      	str	r3, [sp, #48]	; 0x30
 800afa2:	ec41 0b18 	vmov	d8, r0, r1
 800afa6:	4639      	mov	r1, r7
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7f5 fde5 	bl	8000b78 <__aeabi_d2iz>
 800afae:	9011      	str	r0, [sp, #68]	; 0x44
 800afb0:	f7f5 fac8 	bl	8000544 <__aeabi_i2d>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4630      	mov	r0, r6
 800afba:	4639      	mov	r1, r7
 800afbc:	f7f5 f974 	bl	80002a8 <__aeabi_dsub>
 800afc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afc2:	3330      	adds	r3, #48	; 0x30
 800afc4:	f805 3b01 	strb.w	r3, [r5], #1
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	429d      	cmp	r5, r3
 800afcc:	4606      	mov	r6, r0
 800afce:	460f      	mov	r7, r1
 800afd0:	f04f 0200 	mov.w	r2, #0
 800afd4:	d134      	bne.n	800b040 <_dtoa_r+0x660>
 800afd6:	4b19      	ldr	r3, [pc, #100]	; (800b03c <_dtoa_r+0x65c>)
 800afd8:	ec51 0b18 	vmov	r0, r1, d8
 800afdc:	f7f5 f966 	bl	80002ac <__adddf3>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4630      	mov	r0, r6
 800afe6:	4639      	mov	r1, r7
 800afe8:	f7f5 fda6 	bl	8000b38 <__aeabi_dcmpgt>
 800afec:	2800      	cmp	r0, #0
 800afee:	d175      	bne.n	800b0dc <_dtoa_r+0x6fc>
 800aff0:	ec53 2b18 	vmov	r2, r3, d8
 800aff4:	4911      	ldr	r1, [pc, #68]	; (800b03c <_dtoa_r+0x65c>)
 800aff6:	2000      	movs	r0, #0
 800aff8:	f7f5 f956 	bl	80002a8 <__aeabi_dsub>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	f7f5 fd7a 	bl	8000afc <__aeabi_dcmplt>
 800b008:	2800      	cmp	r0, #0
 800b00a:	f43f af27 	beq.w	800ae5c <_dtoa_r+0x47c>
 800b00e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b010:	1e6b      	subs	r3, r5, #1
 800b012:	930c      	str	r3, [sp, #48]	; 0x30
 800b014:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b018:	2b30      	cmp	r3, #48	; 0x30
 800b01a:	d0f8      	beq.n	800b00e <_dtoa_r+0x62e>
 800b01c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b020:	e04a      	b.n	800b0b8 <_dtoa_r+0x6d8>
 800b022:	bf00      	nop
 800b024:	08188888 	.word	0x08188888
 800b028:	08188860 	.word	0x08188860
 800b02c:	3ff00000 	.word	0x3ff00000
 800b030:	40240000 	.word	0x40240000
 800b034:	401c0000 	.word	0x401c0000
 800b038:	40140000 	.word	0x40140000
 800b03c:	3fe00000 	.word	0x3fe00000
 800b040:	4baf      	ldr	r3, [pc, #700]	; (800b300 <_dtoa_r+0x920>)
 800b042:	f7f5 fae9 	bl	8000618 <__aeabi_dmul>
 800b046:	4606      	mov	r6, r0
 800b048:	460f      	mov	r7, r1
 800b04a:	e7ac      	b.n	800afa6 <_dtoa_r+0x5c6>
 800b04c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b050:	9d00      	ldr	r5, [sp, #0]
 800b052:	4642      	mov	r2, r8
 800b054:	464b      	mov	r3, r9
 800b056:	4630      	mov	r0, r6
 800b058:	4639      	mov	r1, r7
 800b05a:	f7f5 fc07 	bl	800086c <__aeabi_ddiv>
 800b05e:	f7f5 fd8b 	bl	8000b78 <__aeabi_d2iz>
 800b062:	9002      	str	r0, [sp, #8]
 800b064:	f7f5 fa6e 	bl	8000544 <__aeabi_i2d>
 800b068:	4642      	mov	r2, r8
 800b06a:	464b      	mov	r3, r9
 800b06c:	f7f5 fad4 	bl	8000618 <__aeabi_dmul>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4630      	mov	r0, r6
 800b076:	4639      	mov	r1, r7
 800b078:	f7f5 f916 	bl	80002a8 <__aeabi_dsub>
 800b07c:	9e02      	ldr	r6, [sp, #8]
 800b07e:	9f01      	ldr	r7, [sp, #4]
 800b080:	3630      	adds	r6, #48	; 0x30
 800b082:	f805 6b01 	strb.w	r6, [r5], #1
 800b086:	9e00      	ldr	r6, [sp, #0]
 800b088:	1bae      	subs	r6, r5, r6
 800b08a:	42b7      	cmp	r7, r6
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	d137      	bne.n	800b102 <_dtoa_r+0x722>
 800b092:	f7f5 f90b 	bl	80002ac <__adddf3>
 800b096:	4642      	mov	r2, r8
 800b098:	464b      	mov	r3, r9
 800b09a:	4606      	mov	r6, r0
 800b09c:	460f      	mov	r7, r1
 800b09e:	f7f5 fd4b 	bl	8000b38 <__aeabi_dcmpgt>
 800b0a2:	b9c8      	cbnz	r0, 800b0d8 <_dtoa_r+0x6f8>
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	f7f5 fd1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0b0:	b110      	cbz	r0, 800b0b8 <_dtoa_r+0x6d8>
 800b0b2:	9b02      	ldr	r3, [sp, #8]
 800b0b4:	07d9      	lsls	r1, r3, #31
 800b0b6:	d40f      	bmi.n	800b0d8 <_dtoa_r+0x6f8>
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4659      	mov	r1, fp
 800b0bc:	f000 fcec 	bl	800ba98 <_Bfree>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	702b      	strb	r3, [r5, #0]
 800b0c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0c6:	f10a 0001 	add.w	r0, sl, #1
 800b0ca:	6018      	str	r0, [r3, #0]
 800b0cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f43f acd8 	beq.w	800aa84 <_dtoa_r+0xa4>
 800b0d4:	601d      	str	r5, [r3, #0]
 800b0d6:	e4d5      	b.n	800aa84 <_dtoa_r+0xa4>
 800b0d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800b0dc:	462b      	mov	r3, r5
 800b0de:	461d      	mov	r5, r3
 800b0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0e4:	2a39      	cmp	r2, #57	; 0x39
 800b0e6:	d108      	bne.n	800b0fa <_dtoa_r+0x71a>
 800b0e8:	9a00      	ldr	r2, [sp, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d1f7      	bne.n	800b0de <_dtoa_r+0x6fe>
 800b0ee:	9a07      	ldr	r2, [sp, #28]
 800b0f0:	9900      	ldr	r1, [sp, #0]
 800b0f2:	3201      	adds	r2, #1
 800b0f4:	9207      	str	r2, [sp, #28]
 800b0f6:	2230      	movs	r2, #48	; 0x30
 800b0f8:	700a      	strb	r2, [r1, #0]
 800b0fa:	781a      	ldrb	r2, [r3, #0]
 800b0fc:	3201      	adds	r2, #1
 800b0fe:	701a      	strb	r2, [r3, #0]
 800b100:	e78c      	b.n	800b01c <_dtoa_r+0x63c>
 800b102:	4b7f      	ldr	r3, [pc, #508]	; (800b300 <_dtoa_r+0x920>)
 800b104:	2200      	movs	r2, #0
 800b106:	f7f5 fa87 	bl	8000618 <__aeabi_dmul>
 800b10a:	2200      	movs	r2, #0
 800b10c:	2300      	movs	r3, #0
 800b10e:	4606      	mov	r6, r0
 800b110:	460f      	mov	r7, r1
 800b112:	f7f5 fce9 	bl	8000ae8 <__aeabi_dcmpeq>
 800b116:	2800      	cmp	r0, #0
 800b118:	d09b      	beq.n	800b052 <_dtoa_r+0x672>
 800b11a:	e7cd      	b.n	800b0b8 <_dtoa_r+0x6d8>
 800b11c:	9a08      	ldr	r2, [sp, #32]
 800b11e:	2a00      	cmp	r2, #0
 800b120:	f000 80c4 	beq.w	800b2ac <_dtoa_r+0x8cc>
 800b124:	9a05      	ldr	r2, [sp, #20]
 800b126:	2a01      	cmp	r2, #1
 800b128:	f300 80a8 	bgt.w	800b27c <_dtoa_r+0x89c>
 800b12c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b12e:	2a00      	cmp	r2, #0
 800b130:	f000 80a0 	beq.w	800b274 <_dtoa_r+0x894>
 800b134:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b138:	9e06      	ldr	r6, [sp, #24]
 800b13a:	4645      	mov	r5, r8
 800b13c:	9a04      	ldr	r2, [sp, #16]
 800b13e:	2101      	movs	r1, #1
 800b140:	441a      	add	r2, r3
 800b142:	4620      	mov	r0, r4
 800b144:	4498      	add	r8, r3
 800b146:	9204      	str	r2, [sp, #16]
 800b148:	f000 fd62 	bl	800bc10 <__i2b>
 800b14c:	4607      	mov	r7, r0
 800b14e:	2d00      	cmp	r5, #0
 800b150:	dd0b      	ble.n	800b16a <_dtoa_r+0x78a>
 800b152:	9b04      	ldr	r3, [sp, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	dd08      	ble.n	800b16a <_dtoa_r+0x78a>
 800b158:	42ab      	cmp	r3, r5
 800b15a:	9a04      	ldr	r2, [sp, #16]
 800b15c:	bfa8      	it	ge
 800b15e:	462b      	movge	r3, r5
 800b160:	eba8 0803 	sub.w	r8, r8, r3
 800b164:	1aed      	subs	r5, r5, r3
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	9304      	str	r3, [sp, #16]
 800b16a:	9b06      	ldr	r3, [sp, #24]
 800b16c:	b1fb      	cbz	r3, 800b1ae <_dtoa_r+0x7ce>
 800b16e:	9b08      	ldr	r3, [sp, #32]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 809f 	beq.w	800b2b4 <_dtoa_r+0x8d4>
 800b176:	2e00      	cmp	r6, #0
 800b178:	dd11      	ble.n	800b19e <_dtoa_r+0x7be>
 800b17a:	4639      	mov	r1, r7
 800b17c:	4632      	mov	r2, r6
 800b17e:	4620      	mov	r0, r4
 800b180:	f000 fe02 	bl	800bd88 <__pow5mult>
 800b184:	465a      	mov	r2, fp
 800b186:	4601      	mov	r1, r0
 800b188:	4607      	mov	r7, r0
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 fd56 	bl	800bc3c <__multiply>
 800b190:	4659      	mov	r1, fp
 800b192:	9007      	str	r0, [sp, #28]
 800b194:	4620      	mov	r0, r4
 800b196:	f000 fc7f 	bl	800ba98 <_Bfree>
 800b19a:	9b07      	ldr	r3, [sp, #28]
 800b19c:	469b      	mov	fp, r3
 800b19e:	9b06      	ldr	r3, [sp, #24]
 800b1a0:	1b9a      	subs	r2, r3, r6
 800b1a2:	d004      	beq.n	800b1ae <_dtoa_r+0x7ce>
 800b1a4:	4659      	mov	r1, fp
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 fdee 	bl	800bd88 <__pow5mult>
 800b1ac:	4683      	mov	fp, r0
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 fd2d 	bl	800bc10 <__i2b>
 800b1b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	dd7c      	ble.n	800b2b8 <_dtoa_r+0x8d8>
 800b1be:	461a      	mov	r2, r3
 800b1c0:	4601      	mov	r1, r0
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 fde0 	bl	800bd88 <__pow5mult>
 800b1c8:	9b05      	ldr	r3, [sp, #20]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	dd76      	ble.n	800b2be <_dtoa_r+0x8de>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	9306      	str	r3, [sp, #24]
 800b1d4:	6933      	ldr	r3, [r6, #16]
 800b1d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1da:	6918      	ldr	r0, [r3, #16]
 800b1dc:	f000 fcc8 	bl	800bb70 <__hi0bits>
 800b1e0:	f1c0 0020 	rsb	r0, r0, #32
 800b1e4:	9b04      	ldr	r3, [sp, #16]
 800b1e6:	4418      	add	r0, r3
 800b1e8:	f010 001f 	ands.w	r0, r0, #31
 800b1ec:	f000 8086 	beq.w	800b2fc <_dtoa_r+0x91c>
 800b1f0:	f1c0 0320 	rsb	r3, r0, #32
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	dd7f      	ble.n	800b2f8 <_dtoa_r+0x918>
 800b1f8:	f1c0 001c 	rsb	r0, r0, #28
 800b1fc:	9b04      	ldr	r3, [sp, #16]
 800b1fe:	4403      	add	r3, r0
 800b200:	4480      	add	r8, r0
 800b202:	4405      	add	r5, r0
 800b204:	9304      	str	r3, [sp, #16]
 800b206:	f1b8 0f00 	cmp.w	r8, #0
 800b20a:	dd05      	ble.n	800b218 <_dtoa_r+0x838>
 800b20c:	4659      	mov	r1, fp
 800b20e:	4642      	mov	r2, r8
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fe13 	bl	800be3c <__lshift>
 800b216:	4683      	mov	fp, r0
 800b218:	9b04      	ldr	r3, [sp, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	dd05      	ble.n	800b22a <_dtoa_r+0x84a>
 800b21e:	4631      	mov	r1, r6
 800b220:	461a      	mov	r2, r3
 800b222:	4620      	mov	r0, r4
 800b224:	f000 fe0a 	bl	800be3c <__lshift>
 800b228:	4606      	mov	r6, r0
 800b22a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d069      	beq.n	800b304 <_dtoa_r+0x924>
 800b230:	4631      	mov	r1, r6
 800b232:	4658      	mov	r0, fp
 800b234:	f000 fe6e 	bl	800bf14 <__mcmp>
 800b238:	2800      	cmp	r0, #0
 800b23a:	da63      	bge.n	800b304 <_dtoa_r+0x924>
 800b23c:	2300      	movs	r3, #0
 800b23e:	4659      	mov	r1, fp
 800b240:	220a      	movs	r2, #10
 800b242:	4620      	mov	r0, r4
 800b244:	f000 fc4a 	bl	800badc <__multadd>
 800b248:	9b08      	ldr	r3, [sp, #32]
 800b24a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b24e:	4683      	mov	fp, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 818f 	beq.w	800b574 <_dtoa_r+0xb94>
 800b256:	4639      	mov	r1, r7
 800b258:	2300      	movs	r3, #0
 800b25a:	220a      	movs	r2, #10
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fc3d 	bl	800badc <__multadd>
 800b262:	f1b9 0f00 	cmp.w	r9, #0
 800b266:	4607      	mov	r7, r0
 800b268:	f300 808e 	bgt.w	800b388 <_dtoa_r+0x9a8>
 800b26c:	9b05      	ldr	r3, [sp, #20]
 800b26e:	2b02      	cmp	r3, #2
 800b270:	dc50      	bgt.n	800b314 <_dtoa_r+0x934>
 800b272:	e089      	b.n	800b388 <_dtoa_r+0x9a8>
 800b274:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b27a:	e75d      	b.n	800b138 <_dtoa_r+0x758>
 800b27c:	9b01      	ldr	r3, [sp, #4]
 800b27e:	1e5e      	subs	r6, r3, #1
 800b280:	9b06      	ldr	r3, [sp, #24]
 800b282:	42b3      	cmp	r3, r6
 800b284:	bfbf      	itttt	lt
 800b286:	9b06      	ldrlt	r3, [sp, #24]
 800b288:	9606      	strlt	r6, [sp, #24]
 800b28a:	1af2      	sublt	r2, r6, r3
 800b28c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b28e:	bfb6      	itet	lt
 800b290:	189b      	addlt	r3, r3, r2
 800b292:	1b9e      	subge	r6, r3, r6
 800b294:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b296:	9b01      	ldr	r3, [sp, #4]
 800b298:	bfb8      	it	lt
 800b29a:	2600      	movlt	r6, #0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bfb5      	itete	lt
 800b2a0:	eba8 0503 	sublt.w	r5, r8, r3
 800b2a4:	9b01      	ldrge	r3, [sp, #4]
 800b2a6:	2300      	movlt	r3, #0
 800b2a8:	4645      	movge	r5, r8
 800b2aa:	e747      	b.n	800b13c <_dtoa_r+0x75c>
 800b2ac:	9e06      	ldr	r6, [sp, #24]
 800b2ae:	9f08      	ldr	r7, [sp, #32]
 800b2b0:	4645      	mov	r5, r8
 800b2b2:	e74c      	b.n	800b14e <_dtoa_r+0x76e>
 800b2b4:	9a06      	ldr	r2, [sp, #24]
 800b2b6:	e775      	b.n	800b1a4 <_dtoa_r+0x7c4>
 800b2b8:	9b05      	ldr	r3, [sp, #20]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	dc18      	bgt.n	800b2f0 <_dtoa_r+0x910>
 800b2be:	9b02      	ldr	r3, [sp, #8]
 800b2c0:	b9b3      	cbnz	r3, 800b2f0 <_dtoa_r+0x910>
 800b2c2:	9b03      	ldr	r3, [sp, #12]
 800b2c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2c8:	b9a3      	cbnz	r3, 800b2f4 <_dtoa_r+0x914>
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2d0:	0d1b      	lsrs	r3, r3, #20
 800b2d2:	051b      	lsls	r3, r3, #20
 800b2d4:	b12b      	cbz	r3, 800b2e2 <_dtoa_r+0x902>
 800b2d6:	9b04      	ldr	r3, [sp, #16]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	9304      	str	r3, [sp, #16]
 800b2dc:	f108 0801 	add.w	r8, r8, #1
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	9306      	str	r3, [sp, #24]
 800b2e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f47f af74 	bne.w	800b1d4 <_dtoa_r+0x7f4>
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	e779      	b.n	800b1e4 <_dtoa_r+0x804>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e7f6      	b.n	800b2e2 <_dtoa_r+0x902>
 800b2f4:	9b02      	ldr	r3, [sp, #8]
 800b2f6:	e7f4      	b.n	800b2e2 <_dtoa_r+0x902>
 800b2f8:	d085      	beq.n	800b206 <_dtoa_r+0x826>
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	301c      	adds	r0, #28
 800b2fe:	e77d      	b.n	800b1fc <_dtoa_r+0x81c>
 800b300:	40240000 	.word	0x40240000
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	dc38      	bgt.n	800b37c <_dtoa_r+0x99c>
 800b30a:	9b05      	ldr	r3, [sp, #20]
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	dd35      	ble.n	800b37c <_dtoa_r+0x99c>
 800b310:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b314:	f1b9 0f00 	cmp.w	r9, #0
 800b318:	d10d      	bne.n	800b336 <_dtoa_r+0x956>
 800b31a:	4631      	mov	r1, r6
 800b31c:	464b      	mov	r3, r9
 800b31e:	2205      	movs	r2, #5
 800b320:	4620      	mov	r0, r4
 800b322:	f000 fbdb 	bl	800badc <__multadd>
 800b326:	4601      	mov	r1, r0
 800b328:	4606      	mov	r6, r0
 800b32a:	4658      	mov	r0, fp
 800b32c:	f000 fdf2 	bl	800bf14 <__mcmp>
 800b330:	2800      	cmp	r0, #0
 800b332:	f73f adbd 	bgt.w	800aeb0 <_dtoa_r+0x4d0>
 800b336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b338:	9d00      	ldr	r5, [sp, #0]
 800b33a:	ea6f 0a03 	mvn.w	sl, r3
 800b33e:	f04f 0800 	mov.w	r8, #0
 800b342:	4631      	mov	r1, r6
 800b344:	4620      	mov	r0, r4
 800b346:	f000 fba7 	bl	800ba98 <_Bfree>
 800b34a:	2f00      	cmp	r7, #0
 800b34c:	f43f aeb4 	beq.w	800b0b8 <_dtoa_r+0x6d8>
 800b350:	f1b8 0f00 	cmp.w	r8, #0
 800b354:	d005      	beq.n	800b362 <_dtoa_r+0x982>
 800b356:	45b8      	cmp	r8, r7
 800b358:	d003      	beq.n	800b362 <_dtoa_r+0x982>
 800b35a:	4641      	mov	r1, r8
 800b35c:	4620      	mov	r0, r4
 800b35e:	f000 fb9b 	bl	800ba98 <_Bfree>
 800b362:	4639      	mov	r1, r7
 800b364:	4620      	mov	r0, r4
 800b366:	f000 fb97 	bl	800ba98 <_Bfree>
 800b36a:	e6a5      	b.n	800b0b8 <_dtoa_r+0x6d8>
 800b36c:	2600      	movs	r6, #0
 800b36e:	4637      	mov	r7, r6
 800b370:	e7e1      	b.n	800b336 <_dtoa_r+0x956>
 800b372:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b374:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b378:	4637      	mov	r7, r6
 800b37a:	e599      	b.n	800aeb0 <_dtoa_r+0x4d0>
 800b37c:	9b08      	ldr	r3, [sp, #32]
 800b37e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 80fd 	beq.w	800b582 <_dtoa_r+0xba2>
 800b388:	2d00      	cmp	r5, #0
 800b38a:	dd05      	ble.n	800b398 <_dtoa_r+0x9b8>
 800b38c:	4639      	mov	r1, r7
 800b38e:	462a      	mov	r2, r5
 800b390:	4620      	mov	r0, r4
 800b392:	f000 fd53 	bl	800be3c <__lshift>
 800b396:	4607      	mov	r7, r0
 800b398:	9b06      	ldr	r3, [sp, #24]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d05c      	beq.n	800b458 <_dtoa_r+0xa78>
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fb39 	bl	800ba18 <_Balloc>
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	b928      	cbnz	r0, 800b3b6 <_dtoa_r+0x9d6>
 800b3aa:	4b80      	ldr	r3, [pc, #512]	; (800b5ac <_dtoa_r+0xbcc>)
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3b2:	f7ff bb2e 	b.w	800aa12 <_dtoa_r+0x32>
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	3202      	adds	r2, #2
 800b3ba:	0092      	lsls	r2, r2, #2
 800b3bc:	f107 010c 	add.w	r1, r7, #12
 800b3c0:	300c      	adds	r0, #12
 800b3c2:	f7fe fb13 	bl	80099ec <memcpy>
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 fd36 	bl	800be3c <__lshift>
 800b3d0:	9b00      	ldr	r3, [sp, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	9b00      	ldr	r3, [sp, #0]
 800b3d8:	444b      	add	r3, r9
 800b3da:	9307      	str	r3, [sp, #28]
 800b3dc:	9b02      	ldr	r3, [sp, #8]
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	46b8      	mov	r8, r7
 800b3e4:	9306      	str	r3, [sp, #24]
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	9b01      	ldr	r3, [sp, #4]
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	4658      	mov	r0, fp
 800b3f0:	9302      	str	r3, [sp, #8]
 800b3f2:	f7ff fa69 	bl	800a8c8 <quorem>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	3330      	adds	r3, #48	; 0x30
 800b3fa:	9004      	str	r0, [sp, #16]
 800b3fc:	4641      	mov	r1, r8
 800b3fe:	4658      	mov	r0, fp
 800b400:	9308      	str	r3, [sp, #32]
 800b402:	f000 fd87 	bl	800bf14 <__mcmp>
 800b406:	463a      	mov	r2, r7
 800b408:	4681      	mov	r9, r0
 800b40a:	4631      	mov	r1, r6
 800b40c:	4620      	mov	r0, r4
 800b40e:	f000 fd9d 	bl	800bf4c <__mdiff>
 800b412:	68c2      	ldr	r2, [r0, #12]
 800b414:	9b08      	ldr	r3, [sp, #32]
 800b416:	4605      	mov	r5, r0
 800b418:	bb02      	cbnz	r2, 800b45c <_dtoa_r+0xa7c>
 800b41a:	4601      	mov	r1, r0
 800b41c:	4658      	mov	r0, fp
 800b41e:	f000 fd79 	bl	800bf14 <__mcmp>
 800b422:	9b08      	ldr	r3, [sp, #32]
 800b424:	4602      	mov	r2, r0
 800b426:	4629      	mov	r1, r5
 800b428:	4620      	mov	r0, r4
 800b42a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b42e:	f000 fb33 	bl	800ba98 <_Bfree>
 800b432:	9b05      	ldr	r3, [sp, #20]
 800b434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b436:	9d01      	ldr	r5, [sp, #4]
 800b438:	ea43 0102 	orr.w	r1, r3, r2
 800b43c:	9b06      	ldr	r3, [sp, #24]
 800b43e:	430b      	orrs	r3, r1
 800b440:	9b08      	ldr	r3, [sp, #32]
 800b442:	d10d      	bne.n	800b460 <_dtoa_r+0xa80>
 800b444:	2b39      	cmp	r3, #57	; 0x39
 800b446:	d029      	beq.n	800b49c <_dtoa_r+0xabc>
 800b448:	f1b9 0f00 	cmp.w	r9, #0
 800b44c:	dd01      	ble.n	800b452 <_dtoa_r+0xa72>
 800b44e:	9b04      	ldr	r3, [sp, #16]
 800b450:	3331      	adds	r3, #49	; 0x31
 800b452:	9a02      	ldr	r2, [sp, #8]
 800b454:	7013      	strb	r3, [r2, #0]
 800b456:	e774      	b.n	800b342 <_dtoa_r+0x962>
 800b458:	4638      	mov	r0, r7
 800b45a:	e7b9      	b.n	800b3d0 <_dtoa_r+0x9f0>
 800b45c:	2201      	movs	r2, #1
 800b45e:	e7e2      	b.n	800b426 <_dtoa_r+0xa46>
 800b460:	f1b9 0f00 	cmp.w	r9, #0
 800b464:	db06      	blt.n	800b474 <_dtoa_r+0xa94>
 800b466:	9905      	ldr	r1, [sp, #20]
 800b468:	ea41 0909 	orr.w	r9, r1, r9
 800b46c:	9906      	ldr	r1, [sp, #24]
 800b46e:	ea59 0101 	orrs.w	r1, r9, r1
 800b472:	d120      	bne.n	800b4b6 <_dtoa_r+0xad6>
 800b474:	2a00      	cmp	r2, #0
 800b476:	ddec      	ble.n	800b452 <_dtoa_r+0xa72>
 800b478:	4659      	mov	r1, fp
 800b47a:	2201      	movs	r2, #1
 800b47c:	4620      	mov	r0, r4
 800b47e:	9301      	str	r3, [sp, #4]
 800b480:	f000 fcdc 	bl	800be3c <__lshift>
 800b484:	4631      	mov	r1, r6
 800b486:	4683      	mov	fp, r0
 800b488:	f000 fd44 	bl	800bf14 <__mcmp>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	dc02      	bgt.n	800b498 <_dtoa_r+0xab8>
 800b492:	d1de      	bne.n	800b452 <_dtoa_r+0xa72>
 800b494:	07da      	lsls	r2, r3, #31
 800b496:	d5dc      	bpl.n	800b452 <_dtoa_r+0xa72>
 800b498:	2b39      	cmp	r3, #57	; 0x39
 800b49a:	d1d8      	bne.n	800b44e <_dtoa_r+0xa6e>
 800b49c:	9a02      	ldr	r2, [sp, #8]
 800b49e:	2339      	movs	r3, #57	; 0x39
 800b4a0:	7013      	strb	r3, [r2, #0]
 800b4a2:	462b      	mov	r3, r5
 800b4a4:	461d      	mov	r5, r3
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4ac:	2a39      	cmp	r2, #57	; 0x39
 800b4ae:	d050      	beq.n	800b552 <_dtoa_r+0xb72>
 800b4b0:	3201      	adds	r2, #1
 800b4b2:	701a      	strb	r2, [r3, #0]
 800b4b4:	e745      	b.n	800b342 <_dtoa_r+0x962>
 800b4b6:	2a00      	cmp	r2, #0
 800b4b8:	dd03      	ble.n	800b4c2 <_dtoa_r+0xae2>
 800b4ba:	2b39      	cmp	r3, #57	; 0x39
 800b4bc:	d0ee      	beq.n	800b49c <_dtoa_r+0xabc>
 800b4be:	3301      	adds	r3, #1
 800b4c0:	e7c7      	b.n	800b452 <_dtoa_r+0xa72>
 800b4c2:	9a01      	ldr	r2, [sp, #4]
 800b4c4:	9907      	ldr	r1, [sp, #28]
 800b4c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4ca:	428a      	cmp	r2, r1
 800b4cc:	d02a      	beq.n	800b524 <_dtoa_r+0xb44>
 800b4ce:	4659      	mov	r1, fp
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	220a      	movs	r2, #10
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f000 fb01 	bl	800badc <__multadd>
 800b4da:	45b8      	cmp	r8, r7
 800b4dc:	4683      	mov	fp, r0
 800b4de:	f04f 0300 	mov.w	r3, #0
 800b4e2:	f04f 020a 	mov.w	r2, #10
 800b4e6:	4641      	mov	r1, r8
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	d107      	bne.n	800b4fc <_dtoa_r+0xb1c>
 800b4ec:	f000 faf6 	bl	800badc <__multadd>
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4607      	mov	r7, r0
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	9301      	str	r3, [sp, #4]
 800b4fa:	e775      	b.n	800b3e8 <_dtoa_r+0xa08>
 800b4fc:	f000 faee 	bl	800badc <__multadd>
 800b500:	4639      	mov	r1, r7
 800b502:	4680      	mov	r8, r0
 800b504:	2300      	movs	r3, #0
 800b506:	220a      	movs	r2, #10
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 fae7 	bl	800badc <__multadd>
 800b50e:	4607      	mov	r7, r0
 800b510:	e7f0      	b.n	800b4f4 <_dtoa_r+0xb14>
 800b512:	f1b9 0f00 	cmp.w	r9, #0
 800b516:	9a00      	ldr	r2, [sp, #0]
 800b518:	bfcc      	ite	gt
 800b51a:	464d      	movgt	r5, r9
 800b51c:	2501      	movle	r5, #1
 800b51e:	4415      	add	r5, r2
 800b520:	f04f 0800 	mov.w	r8, #0
 800b524:	4659      	mov	r1, fp
 800b526:	2201      	movs	r2, #1
 800b528:	4620      	mov	r0, r4
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	f000 fc86 	bl	800be3c <__lshift>
 800b530:	4631      	mov	r1, r6
 800b532:	4683      	mov	fp, r0
 800b534:	f000 fcee 	bl	800bf14 <__mcmp>
 800b538:	2800      	cmp	r0, #0
 800b53a:	dcb2      	bgt.n	800b4a2 <_dtoa_r+0xac2>
 800b53c:	d102      	bne.n	800b544 <_dtoa_r+0xb64>
 800b53e:	9b01      	ldr	r3, [sp, #4]
 800b540:	07db      	lsls	r3, r3, #31
 800b542:	d4ae      	bmi.n	800b4a2 <_dtoa_r+0xac2>
 800b544:	462b      	mov	r3, r5
 800b546:	461d      	mov	r5, r3
 800b548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b54c:	2a30      	cmp	r2, #48	; 0x30
 800b54e:	d0fa      	beq.n	800b546 <_dtoa_r+0xb66>
 800b550:	e6f7      	b.n	800b342 <_dtoa_r+0x962>
 800b552:	9a00      	ldr	r2, [sp, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	d1a5      	bne.n	800b4a4 <_dtoa_r+0xac4>
 800b558:	f10a 0a01 	add.w	sl, sl, #1
 800b55c:	2331      	movs	r3, #49	; 0x31
 800b55e:	e779      	b.n	800b454 <_dtoa_r+0xa74>
 800b560:	4b13      	ldr	r3, [pc, #76]	; (800b5b0 <_dtoa_r+0xbd0>)
 800b562:	f7ff baaf 	b.w	800aac4 <_dtoa_r+0xe4>
 800b566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f47f aa86 	bne.w	800aa7a <_dtoa_r+0x9a>
 800b56e:	4b11      	ldr	r3, [pc, #68]	; (800b5b4 <_dtoa_r+0xbd4>)
 800b570:	f7ff baa8 	b.w	800aac4 <_dtoa_r+0xe4>
 800b574:	f1b9 0f00 	cmp.w	r9, #0
 800b578:	dc03      	bgt.n	800b582 <_dtoa_r+0xba2>
 800b57a:	9b05      	ldr	r3, [sp, #20]
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	f73f aec9 	bgt.w	800b314 <_dtoa_r+0x934>
 800b582:	9d00      	ldr	r5, [sp, #0]
 800b584:	4631      	mov	r1, r6
 800b586:	4658      	mov	r0, fp
 800b588:	f7ff f99e 	bl	800a8c8 <quorem>
 800b58c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b590:	f805 3b01 	strb.w	r3, [r5], #1
 800b594:	9a00      	ldr	r2, [sp, #0]
 800b596:	1aaa      	subs	r2, r5, r2
 800b598:	4591      	cmp	r9, r2
 800b59a:	ddba      	ble.n	800b512 <_dtoa_r+0xb32>
 800b59c:	4659      	mov	r1, fp
 800b59e:	2300      	movs	r3, #0
 800b5a0:	220a      	movs	r2, #10
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 fa9a 	bl	800badc <__multadd>
 800b5a8:	4683      	mov	fp, r0
 800b5aa:	e7eb      	b.n	800b584 <_dtoa_r+0xba4>
 800b5ac:	0818878b 	.word	0x0818878b
 800b5b0:	081886e4 	.word	0x081886e4
 800b5b4:	08188708 	.word	0x08188708

0800b5b8 <__sflush_r>:
 800b5b8:	898a      	ldrh	r2, [r1, #12]
 800b5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5be:	4605      	mov	r5, r0
 800b5c0:	0710      	lsls	r0, r2, #28
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	d458      	bmi.n	800b678 <__sflush_r+0xc0>
 800b5c6:	684b      	ldr	r3, [r1, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	dc05      	bgt.n	800b5d8 <__sflush_r+0x20>
 800b5cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	dc02      	bgt.n	800b5d8 <__sflush_r+0x20>
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5da:	2e00      	cmp	r6, #0
 800b5dc:	d0f9      	beq.n	800b5d2 <__sflush_r+0x1a>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5e4:	682f      	ldr	r7, [r5, #0]
 800b5e6:	602b      	str	r3, [r5, #0]
 800b5e8:	d032      	beq.n	800b650 <__sflush_r+0x98>
 800b5ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	075a      	lsls	r2, r3, #29
 800b5f0:	d505      	bpl.n	800b5fe <__sflush_r+0x46>
 800b5f2:	6863      	ldr	r3, [r4, #4]
 800b5f4:	1ac0      	subs	r0, r0, r3
 800b5f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5f8:	b10b      	cbz	r3, 800b5fe <__sflush_r+0x46>
 800b5fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5fc:	1ac0      	subs	r0, r0, r3
 800b5fe:	2300      	movs	r3, #0
 800b600:	4602      	mov	r2, r0
 800b602:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b604:	6a21      	ldr	r1, [r4, #32]
 800b606:	4628      	mov	r0, r5
 800b608:	47b0      	blx	r6
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	d106      	bne.n	800b61e <__sflush_r+0x66>
 800b610:	6829      	ldr	r1, [r5, #0]
 800b612:	291d      	cmp	r1, #29
 800b614:	d82c      	bhi.n	800b670 <__sflush_r+0xb8>
 800b616:	4a2a      	ldr	r2, [pc, #168]	; (800b6c0 <__sflush_r+0x108>)
 800b618:	40ca      	lsrs	r2, r1
 800b61a:	07d6      	lsls	r6, r2, #31
 800b61c:	d528      	bpl.n	800b670 <__sflush_r+0xb8>
 800b61e:	2200      	movs	r2, #0
 800b620:	6062      	str	r2, [r4, #4]
 800b622:	04d9      	lsls	r1, r3, #19
 800b624:	6922      	ldr	r2, [r4, #16]
 800b626:	6022      	str	r2, [r4, #0]
 800b628:	d504      	bpl.n	800b634 <__sflush_r+0x7c>
 800b62a:	1c42      	adds	r2, r0, #1
 800b62c:	d101      	bne.n	800b632 <__sflush_r+0x7a>
 800b62e:	682b      	ldr	r3, [r5, #0]
 800b630:	b903      	cbnz	r3, 800b634 <__sflush_r+0x7c>
 800b632:	6560      	str	r0, [r4, #84]	; 0x54
 800b634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b636:	602f      	str	r7, [r5, #0]
 800b638:	2900      	cmp	r1, #0
 800b63a:	d0ca      	beq.n	800b5d2 <__sflush_r+0x1a>
 800b63c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b640:	4299      	cmp	r1, r3
 800b642:	d002      	beq.n	800b64a <__sflush_r+0x92>
 800b644:	4628      	mov	r0, r5
 800b646:	f7fe f9e7 	bl	8009a18 <_free_r>
 800b64a:	2000      	movs	r0, #0
 800b64c:	6360      	str	r0, [r4, #52]	; 0x34
 800b64e:	e7c1      	b.n	800b5d4 <__sflush_r+0x1c>
 800b650:	6a21      	ldr	r1, [r4, #32]
 800b652:	2301      	movs	r3, #1
 800b654:	4628      	mov	r0, r5
 800b656:	47b0      	blx	r6
 800b658:	1c41      	adds	r1, r0, #1
 800b65a:	d1c7      	bne.n	800b5ec <__sflush_r+0x34>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0c4      	beq.n	800b5ec <__sflush_r+0x34>
 800b662:	2b1d      	cmp	r3, #29
 800b664:	d001      	beq.n	800b66a <__sflush_r+0xb2>
 800b666:	2b16      	cmp	r3, #22
 800b668:	d101      	bne.n	800b66e <__sflush_r+0xb6>
 800b66a:	602f      	str	r7, [r5, #0]
 800b66c:	e7b1      	b.n	800b5d2 <__sflush_r+0x1a>
 800b66e:	89a3      	ldrh	r3, [r4, #12]
 800b670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b674:	81a3      	strh	r3, [r4, #12]
 800b676:	e7ad      	b.n	800b5d4 <__sflush_r+0x1c>
 800b678:	690f      	ldr	r7, [r1, #16]
 800b67a:	2f00      	cmp	r7, #0
 800b67c:	d0a9      	beq.n	800b5d2 <__sflush_r+0x1a>
 800b67e:	0793      	lsls	r3, r2, #30
 800b680:	680e      	ldr	r6, [r1, #0]
 800b682:	bf08      	it	eq
 800b684:	694b      	ldreq	r3, [r1, #20]
 800b686:	600f      	str	r7, [r1, #0]
 800b688:	bf18      	it	ne
 800b68a:	2300      	movne	r3, #0
 800b68c:	eba6 0807 	sub.w	r8, r6, r7
 800b690:	608b      	str	r3, [r1, #8]
 800b692:	f1b8 0f00 	cmp.w	r8, #0
 800b696:	dd9c      	ble.n	800b5d2 <__sflush_r+0x1a>
 800b698:	6a21      	ldr	r1, [r4, #32]
 800b69a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b69c:	4643      	mov	r3, r8
 800b69e:	463a      	mov	r2, r7
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b0      	blx	r6
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	dc06      	bgt.n	800b6b6 <__sflush_r+0xfe>
 800b6a8:	89a3      	ldrh	r3, [r4, #12]
 800b6aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ae:	81a3      	strh	r3, [r4, #12]
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	e78e      	b.n	800b5d4 <__sflush_r+0x1c>
 800b6b6:	4407      	add	r7, r0
 800b6b8:	eba8 0800 	sub.w	r8, r8, r0
 800b6bc:	e7e9      	b.n	800b692 <__sflush_r+0xda>
 800b6be:	bf00      	nop
 800b6c0:	20400001 	.word	0x20400001

0800b6c4 <_fflush_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	690b      	ldr	r3, [r1, #16]
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	b913      	cbnz	r3, 800b6d4 <_fflush_r+0x10>
 800b6ce:	2500      	movs	r5, #0
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	b118      	cbz	r0, 800b6de <_fflush_r+0x1a>
 800b6d6:	6983      	ldr	r3, [r0, #24]
 800b6d8:	b90b      	cbnz	r3, 800b6de <_fflush_r+0x1a>
 800b6da:	f000 f887 	bl	800b7ec <__sinit>
 800b6de:	4b14      	ldr	r3, [pc, #80]	; (800b730 <_fflush_r+0x6c>)
 800b6e0:	429c      	cmp	r4, r3
 800b6e2:	d11b      	bne.n	800b71c <_fflush_r+0x58>
 800b6e4:	686c      	ldr	r4, [r5, #4]
 800b6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0ef      	beq.n	800b6ce <_fflush_r+0xa>
 800b6ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6f0:	07d0      	lsls	r0, r2, #31
 800b6f2:	d404      	bmi.n	800b6fe <_fflush_r+0x3a>
 800b6f4:	0599      	lsls	r1, r3, #22
 800b6f6:	d402      	bmi.n	800b6fe <_fflush_r+0x3a>
 800b6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6fa:	f000 f91a 	bl	800b932 <__retarget_lock_acquire_recursive>
 800b6fe:	4628      	mov	r0, r5
 800b700:	4621      	mov	r1, r4
 800b702:	f7ff ff59 	bl	800b5b8 <__sflush_r>
 800b706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b708:	07da      	lsls	r2, r3, #31
 800b70a:	4605      	mov	r5, r0
 800b70c:	d4e0      	bmi.n	800b6d0 <_fflush_r+0xc>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	059b      	lsls	r3, r3, #22
 800b712:	d4dd      	bmi.n	800b6d0 <_fflush_r+0xc>
 800b714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b716:	f000 f90d 	bl	800b934 <__retarget_lock_release_recursive>
 800b71a:	e7d9      	b.n	800b6d0 <_fflush_r+0xc>
 800b71c:	4b05      	ldr	r3, [pc, #20]	; (800b734 <_fflush_r+0x70>)
 800b71e:	429c      	cmp	r4, r3
 800b720:	d101      	bne.n	800b726 <_fflush_r+0x62>
 800b722:	68ac      	ldr	r4, [r5, #8]
 800b724:	e7df      	b.n	800b6e6 <_fflush_r+0x22>
 800b726:	4b04      	ldr	r3, [pc, #16]	; (800b738 <_fflush_r+0x74>)
 800b728:	429c      	cmp	r4, r3
 800b72a:	bf08      	it	eq
 800b72c:	68ec      	ldreq	r4, [r5, #12]
 800b72e:	e7da      	b.n	800b6e6 <_fflush_r+0x22>
 800b730:	081887bc 	.word	0x081887bc
 800b734:	081887dc 	.word	0x081887dc
 800b738:	0818879c 	.word	0x0818879c

0800b73c <std>:
 800b73c:	2300      	movs	r3, #0
 800b73e:	b510      	push	{r4, lr}
 800b740:	4604      	mov	r4, r0
 800b742:	e9c0 3300 	strd	r3, r3, [r0]
 800b746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b74a:	6083      	str	r3, [r0, #8]
 800b74c:	8181      	strh	r1, [r0, #12]
 800b74e:	6643      	str	r3, [r0, #100]	; 0x64
 800b750:	81c2      	strh	r2, [r0, #14]
 800b752:	6183      	str	r3, [r0, #24]
 800b754:	4619      	mov	r1, r3
 800b756:	2208      	movs	r2, #8
 800b758:	305c      	adds	r0, #92	; 0x5c
 800b75a:	f7fe f955 	bl	8009a08 <memset>
 800b75e:	4b05      	ldr	r3, [pc, #20]	; (800b774 <std+0x38>)
 800b760:	6263      	str	r3, [r4, #36]	; 0x24
 800b762:	4b05      	ldr	r3, [pc, #20]	; (800b778 <std+0x3c>)
 800b764:	62a3      	str	r3, [r4, #40]	; 0x28
 800b766:	4b05      	ldr	r3, [pc, #20]	; (800b77c <std+0x40>)
 800b768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b76a:	4b05      	ldr	r3, [pc, #20]	; (800b780 <std+0x44>)
 800b76c:	6224      	str	r4, [r4, #32]
 800b76e:	6323      	str	r3, [r4, #48]	; 0x30
 800b770:	bd10      	pop	{r4, pc}
 800b772:	bf00      	nop
 800b774:	0800c6e9 	.word	0x0800c6e9
 800b778:	0800c70b 	.word	0x0800c70b
 800b77c:	0800c743 	.word	0x0800c743
 800b780:	0800c767 	.word	0x0800c767

0800b784 <_cleanup_r>:
 800b784:	4901      	ldr	r1, [pc, #4]	; (800b78c <_cleanup_r+0x8>)
 800b786:	f000 b8af 	b.w	800b8e8 <_fwalk_reent>
 800b78a:	bf00      	nop
 800b78c:	0800b6c5 	.word	0x0800b6c5

0800b790 <__sfmoreglue>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	1e4a      	subs	r2, r1, #1
 800b794:	2568      	movs	r5, #104	; 0x68
 800b796:	4355      	muls	r5, r2
 800b798:	460e      	mov	r6, r1
 800b79a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b79e:	f7fe f98b 	bl	8009ab8 <_malloc_r>
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	b140      	cbz	r0, 800b7b8 <__sfmoreglue+0x28>
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b7ac:	300c      	adds	r0, #12
 800b7ae:	60a0      	str	r0, [r4, #8]
 800b7b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7b4:	f7fe f928 	bl	8009a08 <memset>
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}

0800b7bc <__sfp_lock_acquire>:
 800b7bc:	4801      	ldr	r0, [pc, #4]	; (800b7c4 <__sfp_lock_acquire+0x8>)
 800b7be:	f000 b8b8 	b.w	800b932 <__retarget_lock_acquire_recursive>
 800b7c2:	bf00      	nop
 800b7c4:	2000d2e8 	.word	0x2000d2e8

0800b7c8 <__sfp_lock_release>:
 800b7c8:	4801      	ldr	r0, [pc, #4]	; (800b7d0 <__sfp_lock_release+0x8>)
 800b7ca:	f000 b8b3 	b.w	800b934 <__retarget_lock_release_recursive>
 800b7ce:	bf00      	nop
 800b7d0:	2000d2e8 	.word	0x2000d2e8

0800b7d4 <__sinit_lock_acquire>:
 800b7d4:	4801      	ldr	r0, [pc, #4]	; (800b7dc <__sinit_lock_acquire+0x8>)
 800b7d6:	f000 b8ac 	b.w	800b932 <__retarget_lock_acquire_recursive>
 800b7da:	bf00      	nop
 800b7dc:	2000d2e3 	.word	0x2000d2e3

0800b7e0 <__sinit_lock_release>:
 800b7e0:	4801      	ldr	r0, [pc, #4]	; (800b7e8 <__sinit_lock_release+0x8>)
 800b7e2:	f000 b8a7 	b.w	800b934 <__retarget_lock_release_recursive>
 800b7e6:	bf00      	nop
 800b7e8:	2000d2e3 	.word	0x2000d2e3

0800b7ec <__sinit>:
 800b7ec:	b510      	push	{r4, lr}
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	f7ff fff0 	bl	800b7d4 <__sinit_lock_acquire>
 800b7f4:	69a3      	ldr	r3, [r4, #24]
 800b7f6:	b11b      	cbz	r3, 800b800 <__sinit+0x14>
 800b7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7fc:	f7ff bff0 	b.w	800b7e0 <__sinit_lock_release>
 800b800:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b804:	6523      	str	r3, [r4, #80]	; 0x50
 800b806:	4b13      	ldr	r3, [pc, #76]	; (800b854 <__sinit+0x68>)
 800b808:	4a13      	ldr	r2, [pc, #76]	; (800b858 <__sinit+0x6c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b80e:	42a3      	cmp	r3, r4
 800b810:	bf04      	itt	eq
 800b812:	2301      	moveq	r3, #1
 800b814:	61a3      	streq	r3, [r4, #24]
 800b816:	4620      	mov	r0, r4
 800b818:	f000 f820 	bl	800b85c <__sfp>
 800b81c:	6060      	str	r0, [r4, #4]
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 f81c 	bl	800b85c <__sfp>
 800b824:	60a0      	str	r0, [r4, #8]
 800b826:	4620      	mov	r0, r4
 800b828:	f000 f818 	bl	800b85c <__sfp>
 800b82c:	2200      	movs	r2, #0
 800b82e:	60e0      	str	r0, [r4, #12]
 800b830:	2104      	movs	r1, #4
 800b832:	6860      	ldr	r0, [r4, #4]
 800b834:	f7ff ff82 	bl	800b73c <std>
 800b838:	68a0      	ldr	r0, [r4, #8]
 800b83a:	2201      	movs	r2, #1
 800b83c:	2109      	movs	r1, #9
 800b83e:	f7ff ff7d 	bl	800b73c <std>
 800b842:	68e0      	ldr	r0, [r4, #12]
 800b844:	2202      	movs	r2, #2
 800b846:	2112      	movs	r1, #18
 800b848:	f7ff ff78 	bl	800b73c <std>
 800b84c:	2301      	movs	r3, #1
 800b84e:	61a3      	str	r3, [r4, #24]
 800b850:	e7d2      	b.n	800b7f8 <__sinit+0xc>
 800b852:	bf00      	nop
 800b854:	081886d0 	.word	0x081886d0
 800b858:	0800b785 	.word	0x0800b785

0800b85c <__sfp>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	4607      	mov	r7, r0
 800b860:	f7ff ffac 	bl	800b7bc <__sfp_lock_acquire>
 800b864:	4b1e      	ldr	r3, [pc, #120]	; (800b8e0 <__sfp+0x84>)
 800b866:	681e      	ldr	r6, [r3, #0]
 800b868:	69b3      	ldr	r3, [r6, #24]
 800b86a:	b913      	cbnz	r3, 800b872 <__sfp+0x16>
 800b86c:	4630      	mov	r0, r6
 800b86e:	f7ff ffbd 	bl	800b7ec <__sinit>
 800b872:	3648      	adds	r6, #72	; 0x48
 800b874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b878:	3b01      	subs	r3, #1
 800b87a:	d503      	bpl.n	800b884 <__sfp+0x28>
 800b87c:	6833      	ldr	r3, [r6, #0]
 800b87e:	b30b      	cbz	r3, 800b8c4 <__sfp+0x68>
 800b880:	6836      	ldr	r6, [r6, #0]
 800b882:	e7f7      	b.n	800b874 <__sfp+0x18>
 800b884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b888:	b9d5      	cbnz	r5, 800b8c0 <__sfp+0x64>
 800b88a:	4b16      	ldr	r3, [pc, #88]	; (800b8e4 <__sfp+0x88>)
 800b88c:	60e3      	str	r3, [r4, #12]
 800b88e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b892:	6665      	str	r5, [r4, #100]	; 0x64
 800b894:	f000 f84c 	bl	800b930 <__retarget_lock_init_recursive>
 800b898:	f7ff ff96 	bl	800b7c8 <__sfp_lock_release>
 800b89c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8a4:	6025      	str	r5, [r4, #0]
 800b8a6:	61a5      	str	r5, [r4, #24]
 800b8a8:	2208      	movs	r2, #8
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8b0:	f7fe f8aa 	bl	8009a08 <memset>
 800b8b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8bc:	4620      	mov	r0, r4
 800b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c0:	3468      	adds	r4, #104	; 0x68
 800b8c2:	e7d9      	b.n	800b878 <__sfp+0x1c>
 800b8c4:	2104      	movs	r1, #4
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	f7ff ff62 	bl	800b790 <__sfmoreglue>
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	6030      	str	r0, [r6, #0]
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d1d5      	bne.n	800b880 <__sfp+0x24>
 800b8d4:	f7ff ff78 	bl	800b7c8 <__sfp_lock_release>
 800b8d8:	230c      	movs	r3, #12
 800b8da:	603b      	str	r3, [r7, #0]
 800b8dc:	e7ee      	b.n	800b8bc <__sfp+0x60>
 800b8de:	bf00      	nop
 800b8e0:	081886d0 	.word	0x081886d0
 800b8e4:	ffff0001 	.word	0xffff0001

0800b8e8 <_fwalk_reent>:
 800b8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	4688      	mov	r8, r1
 800b8f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8f4:	2700      	movs	r7, #0
 800b8f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8fa:	f1b9 0901 	subs.w	r9, r9, #1
 800b8fe:	d505      	bpl.n	800b90c <_fwalk_reent+0x24>
 800b900:	6824      	ldr	r4, [r4, #0]
 800b902:	2c00      	cmp	r4, #0
 800b904:	d1f7      	bne.n	800b8f6 <_fwalk_reent+0xe>
 800b906:	4638      	mov	r0, r7
 800b908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b90c:	89ab      	ldrh	r3, [r5, #12]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d907      	bls.n	800b922 <_fwalk_reent+0x3a>
 800b912:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b916:	3301      	adds	r3, #1
 800b918:	d003      	beq.n	800b922 <_fwalk_reent+0x3a>
 800b91a:	4629      	mov	r1, r5
 800b91c:	4630      	mov	r0, r6
 800b91e:	47c0      	blx	r8
 800b920:	4307      	orrs	r7, r0
 800b922:	3568      	adds	r5, #104	; 0x68
 800b924:	e7e9      	b.n	800b8fa <_fwalk_reent+0x12>
	...

0800b928 <_localeconv_r>:
 800b928:	4800      	ldr	r0, [pc, #0]	; (800b92c <_localeconv_r+0x4>)
 800b92a:	4770      	bx	lr
 800b92c:	20000d14 	.word	0x20000d14

0800b930 <__retarget_lock_init_recursive>:
 800b930:	4770      	bx	lr

0800b932 <__retarget_lock_acquire_recursive>:
 800b932:	4770      	bx	lr

0800b934 <__retarget_lock_release_recursive>:
 800b934:	4770      	bx	lr

0800b936 <__swhatbuf_r>:
 800b936:	b570      	push	{r4, r5, r6, lr}
 800b938:	460e      	mov	r6, r1
 800b93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b93e:	2900      	cmp	r1, #0
 800b940:	b096      	sub	sp, #88	; 0x58
 800b942:	4614      	mov	r4, r2
 800b944:	461d      	mov	r5, r3
 800b946:	da07      	bge.n	800b958 <__swhatbuf_r+0x22>
 800b948:	2300      	movs	r3, #0
 800b94a:	602b      	str	r3, [r5, #0]
 800b94c:	89b3      	ldrh	r3, [r6, #12]
 800b94e:	061a      	lsls	r2, r3, #24
 800b950:	d410      	bmi.n	800b974 <__swhatbuf_r+0x3e>
 800b952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b956:	e00e      	b.n	800b976 <__swhatbuf_r+0x40>
 800b958:	466a      	mov	r2, sp
 800b95a:	f000 ff5b 	bl	800c814 <_fstat_r>
 800b95e:	2800      	cmp	r0, #0
 800b960:	dbf2      	blt.n	800b948 <__swhatbuf_r+0x12>
 800b962:	9a01      	ldr	r2, [sp, #4]
 800b964:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b968:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b96c:	425a      	negs	r2, r3
 800b96e:	415a      	adcs	r2, r3
 800b970:	602a      	str	r2, [r5, #0]
 800b972:	e7ee      	b.n	800b952 <__swhatbuf_r+0x1c>
 800b974:	2340      	movs	r3, #64	; 0x40
 800b976:	2000      	movs	r0, #0
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	b016      	add	sp, #88	; 0x58
 800b97c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b980 <__smakebuf_r>:
 800b980:	898b      	ldrh	r3, [r1, #12]
 800b982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b984:	079d      	lsls	r5, r3, #30
 800b986:	4606      	mov	r6, r0
 800b988:	460c      	mov	r4, r1
 800b98a:	d507      	bpl.n	800b99c <__smakebuf_r+0x1c>
 800b98c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	6123      	str	r3, [r4, #16]
 800b994:	2301      	movs	r3, #1
 800b996:	6163      	str	r3, [r4, #20]
 800b998:	b002      	add	sp, #8
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	ab01      	add	r3, sp, #4
 800b99e:	466a      	mov	r2, sp
 800b9a0:	f7ff ffc9 	bl	800b936 <__swhatbuf_r>
 800b9a4:	9900      	ldr	r1, [sp, #0]
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7fe f885 	bl	8009ab8 <_malloc_r>
 800b9ae:	b948      	cbnz	r0, 800b9c4 <__smakebuf_r+0x44>
 800b9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b4:	059a      	lsls	r2, r3, #22
 800b9b6:	d4ef      	bmi.n	800b998 <__smakebuf_r+0x18>
 800b9b8:	f023 0303 	bic.w	r3, r3, #3
 800b9bc:	f043 0302 	orr.w	r3, r3, #2
 800b9c0:	81a3      	strh	r3, [r4, #12]
 800b9c2:	e7e3      	b.n	800b98c <__smakebuf_r+0xc>
 800b9c4:	4b0d      	ldr	r3, [pc, #52]	; (800b9fc <__smakebuf_r+0x7c>)
 800b9c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	6020      	str	r0, [r4, #0]
 800b9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d0:	81a3      	strh	r3, [r4, #12]
 800b9d2:	9b00      	ldr	r3, [sp, #0]
 800b9d4:	6163      	str	r3, [r4, #20]
 800b9d6:	9b01      	ldr	r3, [sp, #4]
 800b9d8:	6120      	str	r0, [r4, #16]
 800b9da:	b15b      	cbz	r3, 800b9f4 <__smakebuf_r+0x74>
 800b9dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	f000 ff29 	bl	800c838 <_isatty_r>
 800b9e6:	b128      	cbz	r0, 800b9f4 <__smakebuf_r+0x74>
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	f023 0303 	bic.w	r3, r3, #3
 800b9ee:	f043 0301 	orr.w	r3, r3, #1
 800b9f2:	81a3      	strh	r3, [r4, #12]
 800b9f4:	89a0      	ldrh	r0, [r4, #12]
 800b9f6:	4305      	orrs	r5, r0
 800b9f8:	81a5      	strh	r5, [r4, #12]
 800b9fa:	e7cd      	b.n	800b998 <__smakebuf_r+0x18>
 800b9fc:	0800b785 	.word	0x0800b785

0800ba00 <__malloc_lock>:
 800ba00:	4801      	ldr	r0, [pc, #4]	; (800ba08 <__malloc_lock+0x8>)
 800ba02:	f7ff bf96 	b.w	800b932 <__retarget_lock_acquire_recursive>
 800ba06:	bf00      	nop
 800ba08:	2000d2e4 	.word	0x2000d2e4

0800ba0c <__malloc_unlock>:
 800ba0c:	4801      	ldr	r0, [pc, #4]	; (800ba14 <__malloc_unlock+0x8>)
 800ba0e:	f7ff bf91 	b.w	800b934 <__retarget_lock_release_recursive>
 800ba12:	bf00      	nop
 800ba14:	2000d2e4 	.word	0x2000d2e4

0800ba18 <_Balloc>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	460d      	mov	r5, r1
 800ba20:	b976      	cbnz	r6, 800ba40 <_Balloc+0x28>
 800ba22:	2010      	movs	r0, #16
 800ba24:	f7fd ffda 	bl	80099dc <malloc>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	6260      	str	r0, [r4, #36]	; 0x24
 800ba2c:	b920      	cbnz	r0, 800ba38 <_Balloc+0x20>
 800ba2e:	4b18      	ldr	r3, [pc, #96]	; (800ba90 <_Balloc+0x78>)
 800ba30:	4818      	ldr	r0, [pc, #96]	; (800ba94 <_Balloc+0x7c>)
 800ba32:	2166      	movs	r1, #102	; 0x66
 800ba34:	f000 feae 	bl	800c794 <__assert_func>
 800ba38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba3c:	6006      	str	r6, [r0, #0]
 800ba3e:	60c6      	str	r6, [r0, #12]
 800ba40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba42:	68f3      	ldr	r3, [r6, #12]
 800ba44:	b183      	cbz	r3, 800ba68 <_Balloc+0x50>
 800ba46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba4e:	b9b8      	cbnz	r0, 800ba80 <_Balloc+0x68>
 800ba50:	2101      	movs	r1, #1
 800ba52:	fa01 f605 	lsl.w	r6, r1, r5
 800ba56:	1d72      	adds	r2, r6, #5
 800ba58:	0092      	lsls	r2, r2, #2
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 fb5a 	bl	800c114 <_calloc_r>
 800ba60:	b160      	cbz	r0, 800ba7c <_Balloc+0x64>
 800ba62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba66:	e00e      	b.n	800ba86 <_Balloc+0x6e>
 800ba68:	2221      	movs	r2, #33	; 0x21
 800ba6a:	2104      	movs	r1, #4
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f000 fb51 	bl	800c114 <_calloc_r>
 800ba72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba74:	60f0      	str	r0, [r6, #12]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1e4      	bne.n	800ba46 <_Balloc+0x2e>
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}
 800ba80:	6802      	ldr	r2, [r0, #0]
 800ba82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba86:	2300      	movs	r3, #0
 800ba88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba8c:	e7f7      	b.n	800ba7e <_Balloc+0x66>
 800ba8e:	bf00      	nop
 800ba90:	08188715 	.word	0x08188715
 800ba94:	081887fc 	.word	0x081887fc

0800ba98 <_Bfree>:
 800ba98:	b570      	push	{r4, r5, r6, lr}
 800ba9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba9c:	4605      	mov	r5, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	b976      	cbnz	r6, 800bac0 <_Bfree+0x28>
 800baa2:	2010      	movs	r0, #16
 800baa4:	f7fd ff9a 	bl	80099dc <malloc>
 800baa8:	4602      	mov	r2, r0
 800baaa:	6268      	str	r0, [r5, #36]	; 0x24
 800baac:	b920      	cbnz	r0, 800bab8 <_Bfree+0x20>
 800baae:	4b09      	ldr	r3, [pc, #36]	; (800bad4 <_Bfree+0x3c>)
 800bab0:	4809      	ldr	r0, [pc, #36]	; (800bad8 <_Bfree+0x40>)
 800bab2:	218a      	movs	r1, #138	; 0x8a
 800bab4:	f000 fe6e 	bl	800c794 <__assert_func>
 800bab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800babc:	6006      	str	r6, [r0, #0]
 800babe:	60c6      	str	r6, [r0, #12]
 800bac0:	b13c      	cbz	r4, 800bad2 <_Bfree+0x3a>
 800bac2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bac4:	6862      	ldr	r2, [r4, #4]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bacc:	6021      	str	r1, [r4, #0]
 800bace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
 800bad4:	08188715 	.word	0x08188715
 800bad8:	081887fc 	.word	0x081887fc

0800badc <__multadd>:
 800badc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae0:	690e      	ldr	r6, [r1, #16]
 800bae2:	4607      	mov	r7, r0
 800bae4:	4698      	mov	r8, r3
 800bae6:	460c      	mov	r4, r1
 800bae8:	f101 0014 	add.w	r0, r1, #20
 800baec:	2300      	movs	r3, #0
 800baee:	6805      	ldr	r5, [r0, #0]
 800baf0:	b2a9      	uxth	r1, r5
 800baf2:	fb02 8101 	mla	r1, r2, r1, r8
 800baf6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bafa:	0c2d      	lsrs	r5, r5, #16
 800bafc:	fb02 c505 	mla	r5, r2, r5, ip
 800bb00:	b289      	uxth	r1, r1
 800bb02:	3301      	adds	r3, #1
 800bb04:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bb08:	429e      	cmp	r6, r3
 800bb0a:	f840 1b04 	str.w	r1, [r0], #4
 800bb0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bb12:	dcec      	bgt.n	800baee <__multadd+0x12>
 800bb14:	f1b8 0f00 	cmp.w	r8, #0
 800bb18:	d022      	beq.n	800bb60 <__multadd+0x84>
 800bb1a:	68a3      	ldr	r3, [r4, #8]
 800bb1c:	42b3      	cmp	r3, r6
 800bb1e:	dc19      	bgt.n	800bb54 <__multadd+0x78>
 800bb20:	6861      	ldr	r1, [r4, #4]
 800bb22:	4638      	mov	r0, r7
 800bb24:	3101      	adds	r1, #1
 800bb26:	f7ff ff77 	bl	800ba18 <_Balloc>
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	b928      	cbnz	r0, 800bb3a <__multadd+0x5e>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	4b0d      	ldr	r3, [pc, #52]	; (800bb68 <__multadd+0x8c>)
 800bb32:	480e      	ldr	r0, [pc, #56]	; (800bb6c <__multadd+0x90>)
 800bb34:	21b5      	movs	r1, #181	; 0xb5
 800bb36:	f000 fe2d 	bl	800c794 <__assert_func>
 800bb3a:	6922      	ldr	r2, [r4, #16]
 800bb3c:	3202      	adds	r2, #2
 800bb3e:	f104 010c 	add.w	r1, r4, #12
 800bb42:	0092      	lsls	r2, r2, #2
 800bb44:	300c      	adds	r0, #12
 800bb46:	f7fd ff51 	bl	80099ec <memcpy>
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	f7ff ffa3 	bl	800ba98 <_Bfree>
 800bb52:	462c      	mov	r4, r5
 800bb54:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bb58:	3601      	adds	r6, #1
 800bb5a:	f8c3 8014 	str.w	r8, [r3, #20]
 800bb5e:	6126      	str	r6, [r4, #16]
 800bb60:	4620      	mov	r0, r4
 800bb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb66:	bf00      	nop
 800bb68:	0818878b 	.word	0x0818878b
 800bb6c:	081887fc 	.word	0x081887fc

0800bb70 <__hi0bits>:
 800bb70:	0c03      	lsrs	r3, r0, #16
 800bb72:	041b      	lsls	r3, r3, #16
 800bb74:	b9d3      	cbnz	r3, 800bbac <__hi0bits+0x3c>
 800bb76:	0400      	lsls	r0, r0, #16
 800bb78:	2310      	movs	r3, #16
 800bb7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb7e:	bf04      	itt	eq
 800bb80:	0200      	lsleq	r0, r0, #8
 800bb82:	3308      	addeq	r3, #8
 800bb84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb88:	bf04      	itt	eq
 800bb8a:	0100      	lsleq	r0, r0, #4
 800bb8c:	3304      	addeq	r3, #4
 800bb8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb92:	bf04      	itt	eq
 800bb94:	0080      	lsleq	r0, r0, #2
 800bb96:	3302      	addeq	r3, #2
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	db05      	blt.n	800bba8 <__hi0bits+0x38>
 800bb9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bba0:	f103 0301 	add.w	r3, r3, #1
 800bba4:	bf08      	it	eq
 800bba6:	2320      	moveq	r3, #32
 800bba8:	4618      	mov	r0, r3
 800bbaa:	4770      	bx	lr
 800bbac:	2300      	movs	r3, #0
 800bbae:	e7e4      	b.n	800bb7a <__hi0bits+0xa>

0800bbb0 <__lo0bits>:
 800bbb0:	6803      	ldr	r3, [r0, #0]
 800bbb2:	f013 0207 	ands.w	r2, r3, #7
 800bbb6:	4601      	mov	r1, r0
 800bbb8:	d00b      	beq.n	800bbd2 <__lo0bits+0x22>
 800bbba:	07da      	lsls	r2, r3, #31
 800bbbc:	d424      	bmi.n	800bc08 <__lo0bits+0x58>
 800bbbe:	0798      	lsls	r0, r3, #30
 800bbc0:	bf49      	itett	mi
 800bbc2:	085b      	lsrmi	r3, r3, #1
 800bbc4:	089b      	lsrpl	r3, r3, #2
 800bbc6:	2001      	movmi	r0, #1
 800bbc8:	600b      	strmi	r3, [r1, #0]
 800bbca:	bf5c      	itt	pl
 800bbcc:	600b      	strpl	r3, [r1, #0]
 800bbce:	2002      	movpl	r0, #2
 800bbd0:	4770      	bx	lr
 800bbd2:	b298      	uxth	r0, r3
 800bbd4:	b9b0      	cbnz	r0, 800bc04 <__lo0bits+0x54>
 800bbd6:	0c1b      	lsrs	r3, r3, #16
 800bbd8:	2010      	movs	r0, #16
 800bbda:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bbde:	bf04      	itt	eq
 800bbe0:	0a1b      	lsreq	r3, r3, #8
 800bbe2:	3008      	addeq	r0, #8
 800bbe4:	071a      	lsls	r2, r3, #28
 800bbe6:	bf04      	itt	eq
 800bbe8:	091b      	lsreq	r3, r3, #4
 800bbea:	3004      	addeq	r0, #4
 800bbec:	079a      	lsls	r2, r3, #30
 800bbee:	bf04      	itt	eq
 800bbf0:	089b      	lsreq	r3, r3, #2
 800bbf2:	3002      	addeq	r0, #2
 800bbf4:	07da      	lsls	r2, r3, #31
 800bbf6:	d403      	bmi.n	800bc00 <__lo0bits+0x50>
 800bbf8:	085b      	lsrs	r3, r3, #1
 800bbfa:	f100 0001 	add.w	r0, r0, #1
 800bbfe:	d005      	beq.n	800bc0c <__lo0bits+0x5c>
 800bc00:	600b      	str	r3, [r1, #0]
 800bc02:	4770      	bx	lr
 800bc04:	4610      	mov	r0, r2
 800bc06:	e7e8      	b.n	800bbda <__lo0bits+0x2a>
 800bc08:	2000      	movs	r0, #0
 800bc0a:	4770      	bx	lr
 800bc0c:	2020      	movs	r0, #32
 800bc0e:	4770      	bx	lr

0800bc10 <__i2b>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	460c      	mov	r4, r1
 800bc14:	2101      	movs	r1, #1
 800bc16:	f7ff feff 	bl	800ba18 <_Balloc>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	b928      	cbnz	r0, 800bc2a <__i2b+0x1a>
 800bc1e:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <__i2b+0x24>)
 800bc20:	4805      	ldr	r0, [pc, #20]	; (800bc38 <__i2b+0x28>)
 800bc22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc26:	f000 fdb5 	bl	800c794 <__assert_func>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	6144      	str	r4, [r0, #20]
 800bc2e:	6103      	str	r3, [r0, #16]
 800bc30:	bd10      	pop	{r4, pc}
 800bc32:	bf00      	nop
 800bc34:	0818878b 	.word	0x0818878b
 800bc38:	081887fc 	.word	0x081887fc

0800bc3c <__multiply>:
 800bc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	4614      	mov	r4, r2
 800bc42:	690a      	ldr	r2, [r1, #16]
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	bfb8      	it	lt
 800bc4a:	460b      	movlt	r3, r1
 800bc4c:	460d      	mov	r5, r1
 800bc4e:	bfbc      	itt	lt
 800bc50:	4625      	movlt	r5, r4
 800bc52:	461c      	movlt	r4, r3
 800bc54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bc58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bc5c:	68ab      	ldr	r3, [r5, #8]
 800bc5e:	6869      	ldr	r1, [r5, #4]
 800bc60:	eb0a 0709 	add.w	r7, sl, r9
 800bc64:	42bb      	cmp	r3, r7
 800bc66:	b085      	sub	sp, #20
 800bc68:	bfb8      	it	lt
 800bc6a:	3101      	addlt	r1, #1
 800bc6c:	f7ff fed4 	bl	800ba18 <_Balloc>
 800bc70:	b930      	cbnz	r0, 800bc80 <__multiply+0x44>
 800bc72:	4602      	mov	r2, r0
 800bc74:	4b42      	ldr	r3, [pc, #264]	; (800bd80 <__multiply+0x144>)
 800bc76:	4843      	ldr	r0, [pc, #268]	; (800bd84 <__multiply+0x148>)
 800bc78:	f240 115d 	movw	r1, #349	; 0x15d
 800bc7c:	f000 fd8a 	bl	800c794 <__assert_func>
 800bc80:	f100 0614 	add.w	r6, r0, #20
 800bc84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bc88:	4633      	mov	r3, r6
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4543      	cmp	r3, r8
 800bc8e:	d31e      	bcc.n	800bcce <__multiply+0x92>
 800bc90:	f105 0c14 	add.w	ip, r5, #20
 800bc94:	f104 0314 	add.w	r3, r4, #20
 800bc98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bc9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bca0:	9202      	str	r2, [sp, #8]
 800bca2:	ebac 0205 	sub.w	r2, ip, r5
 800bca6:	3a15      	subs	r2, #21
 800bca8:	f022 0203 	bic.w	r2, r2, #3
 800bcac:	3204      	adds	r2, #4
 800bcae:	f105 0115 	add.w	r1, r5, #21
 800bcb2:	458c      	cmp	ip, r1
 800bcb4:	bf38      	it	cc
 800bcb6:	2204      	movcc	r2, #4
 800bcb8:	9201      	str	r2, [sp, #4]
 800bcba:	9a02      	ldr	r2, [sp, #8]
 800bcbc:	9303      	str	r3, [sp, #12]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d808      	bhi.n	800bcd4 <__multiply+0x98>
 800bcc2:	2f00      	cmp	r7, #0
 800bcc4:	dc55      	bgt.n	800bd72 <__multiply+0x136>
 800bcc6:	6107      	str	r7, [r0, #16]
 800bcc8:	b005      	add	sp, #20
 800bcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcce:	f843 2b04 	str.w	r2, [r3], #4
 800bcd2:	e7db      	b.n	800bc8c <__multiply+0x50>
 800bcd4:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcd8:	f1ba 0f00 	cmp.w	sl, #0
 800bcdc:	d020      	beq.n	800bd20 <__multiply+0xe4>
 800bcde:	f105 0e14 	add.w	lr, r5, #20
 800bce2:	46b1      	mov	r9, r6
 800bce4:	2200      	movs	r2, #0
 800bce6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bcea:	f8d9 b000 	ldr.w	fp, [r9]
 800bcee:	b2a1      	uxth	r1, r4
 800bcf0:	fa1f fb8b 	uxth.w	fp, fp
 800bcf4:	fb0a b101 	mla	r1, sl, r1, fp
 800bcf8:	4411      	add	r1, r2
 800bcfa:	f8d9 2000 	ldr.w	r2, [r9]
 800bcfe:	0c24      	lsrs	r4, r4, #16
 800bd00:	0c12      	lsrs	r2, r2, #16
 800bd02:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd06:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd0a:	b289      	uxth	r1, r1
 800bd0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd10:	45f4      	cmp	ip, lr
 800bd12:	f849 1b04 	str.w	r1, [r9], #4
 800bd16:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd1a:	d8e4      	bhi.n	800bce6 <__multiply+0xaa>
 800bd1c:	9901      	ldr	r1, [sp, #4]
 800bd1e:	5072      	str	r2, [r6, r1]
 800bd20:	9a03      	ldr	r2, [sp, #12]
 800bd22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd26:	3304      	adds	r3, #4
 800bd28:	f1b9 0f00 	cmp.w	r9, #0
 800bd2c:	d01f      	beq.n	800bd6e <__multiply+0x132>
 800bd2e:	6834      	ldr	r4, [r6, #0]
 800bd30:	f105 0114 	add.w	r1, r5, #20
 800bd34:	46b6      	mov	lr, r6
 800bd36:	f04f 0a00 	mov.w	sl, #0
 800bd3a:	880a      	ldrh	r2, [r1, #0]
 800bd3c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bd40:	fb09 b202 	mla	r2, r9, r2, fp
 800bd44:	4492      	add	sl, r2
 800bd46:	b2a4      	uxth	r4, r4
 800bd48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bd4c:	f84e 4b04 	str.w	r4, [lr], #4
 800bd50:	f851 4b04 	ldr.w	r4, [r1], #4
 800bd54:	f8be 2000 	ldrh.w	r2, [lr]
 800bd58:	0c24      	lsrs	r4, r4, #16
 800bd5a:	fb09 2404 	mla	r4, r9, r4, r2
 800bd5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bd62:	458c      	cmp	ip, r1
 800bd64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bd68:	d8e7      	bhi.n	800bd3a <__multiply+0xfe>
 800bd6a:	9a01      	ldr	r2, [sp, #4]
 800bd6c:	50b4      	str	r4, [r6, r2]
 800bd6e:	3604      	adds	r6, #4
 800bd70:	e7a3      	b.n	800bcba <__multiply+0x7e>
 800bd72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1a5      	bne.n	800bcc6 <__multiply+0x8a>
 800bd7a:	3f01      	subs	r7, #1
 800bd7c:	e7a1      	b.n	800bcc2 <__multiply+0x86>
 800bd7e:	bf00      	nop
 800bd80:	0818878b 	.word	0x0818878b
 800bd84:	081887fc 	.word	0x081887fc

0800bd88 <__pow5mult>:
 800bd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd8c:	4615      	mov	r5, r2
 800bd8e:	f012 0203 	ands.w	r2, r2, #3
 800bd92:	4606      	mov	r6, r0
 800bd94:	460f      	mov	r7, r1
 800bd96:	d007      	beq.n	800bda8 <__pow5mult+0x20>
 800bd98:	4c25      	ldr	r4, [pc, #148]	; (800be30 <__pow5mult+0xa8>)
 800bd9a:	3a01      	subs	r2, #1
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bda2:	f7ff fe9b 	bl	800badc <__multadd>
 800bda6:	4607      	mov	r7, r0
 800bda8:	10ad      	asrs	r5, r5, #2
 800bdaa:	d03d      	beq.n	800be28 <__pow5mult+0xa0>
 800bdac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdae:	b97c      	cbnz	r4, 800bdd0 <__pow5mult+0x48>
 800bdb0:	2010      	movs	r0, #16
 800bdb2:	f7fd fe13 	bl	80099dc <malloc>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	6270      	str	r0, [r6, #36]	; 0x24
 800bdba:	b928      	cbnz	r0, 800bdc8 <__pow5mult+0x40>
 800bdbc:	4b1d      	ldr	r3, [pc, #116]	; (800be34 <__pow5mult+0xac>)
 800bdbe:	481e      	ldr	r0, [pc, #120]	; (800be38 <__pow5mult+0xb0>)
 800bdc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bdc4:	f000 fce6 	bl	800c794 <__assert_func>
 800bdc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdcc:	6004      	str	r4, [r0, #0]
 800bdce:	60c4      	str	r4, [r0, #12]
 800bdd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bdd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdd8:	b94c      	cbnz	r4, 800bdee <__pow5mult+0x66>
 800bdda:	f240 2171 	movw	r1, #625	; 0x271
 800bdde:	4630      	mov	r0, r6
 800bde0:	f7ff ff16 	bl	800bc10 <__i2b>
 800bde4:	2300      	movs	r3, #0
 800bde6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdea:	4604      	mov	r4, r0
 800bdec:	6003      	str	r3, [r0, #0]
 800bdee:	f04f 0900 	mov.w	r9, #0
 800bdf2:	07eb      	lsls	r3, r5, #31
 800bdf4:	d50a      	bpl.n	800be0c <__pow5mult+0x84>
 800bdf6:	4639      	mov	r1, r7
 800bdf8:	4622      	mov	r2, r4
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7ff ff1e 	bl	800bc3c <__multiply>
 800be00:	4639      	mov	r1, r7
 800be02:	4680      	mov	r8, r0
 800be04:	4630      	mov	r0, r6
 800be06:	f7ff fe47 	bl	800ba98 <_Bfree>
 800be0a:	4647      	mov	r7, r8
 800be0c:	106d      	asrs	r5, r5, #1
 800be0e:	d00b      	beq.n	800be28 <__pow5mult+0xa0>
 800be10:	6820      	ldr	r0, [r4, #0]
 800be12:	b938      	cbnz	r0, 800be24 <__pow5mult+0x9c>
 800be14:	4622      	mov	r2, r4
 800be16:	4621      	mov	r1, r4
 800be18:	4630      	mov	r0, r6
 800be1a:	f7ff ff0f 	bl	800bc3c <__multiply>
 800be1e:	6020      	str	r0, [r4, #0]
 800be20:	f8c0 9000 	str.w	r9, [r0]
 800be24:	4604      	mov	r4, r0
 800be26:	e7e4      	b.n	800bdf2 <__pow5mult+0x6a>
 800be28:	4638      	mov	r0, r7
 800be2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2e:	bf00      	nop
 800be30:	08188950 	.word	0x08188950
 800be34:	08188715 	.word	0x08188715
 800be38:	081887fc 	.word	0x081887fc

0800be3c <__lshift>:
 800be3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be40:	460c      	mov	r4, r1
 800be42:	6849      	ldr	r1, [r1, #4]
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be4a:	68a3      	ldr	r3, [r4, #8]
 800be4c:	4607      	mov	r7, r0
 800be4e:	4691      	mov	r9, r2
 800be50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be54:	f108 0601 	add.w	r6, r8, #1
 800be58:	42b3      	cmp	r3, r6
 800be5a:	db0b      	blt.n	800be74 <__lshift+0x38>
 800be5c:	4638      	mov	r0, r7
 800be5e:	f7ff fddb 	bl	800ba18 <_Balloc>
 800be62:	4605      	mov	r5, r0
 800be64:	b948      	cbnz	r0, 800be7a <__lshift+0x3e>
 800be66:	4602      	mov	r2, r0
 800be68:	4b28      	ldr	r3, [pc, #160]	; (800bf0c <__lshift+0xd0>)
 800be6a:	4829      	ldr	r0, [pc, #164]	; (800bf10 <__lshift+0xd4>)
 800be6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be70:	f000 fc90 	bl	800c794 <__assert_func>
 800be74:	3101      	adds	r1, #1
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	e7ee      	b.n	800be58 <__lshift+0x1c>
 800be7a:	2300      	movs	r3, #0
 800be7c:	f100 0114 	add.w	r1, r0, #20
 800be80:	f100 0210 	add.w	r2, r0, #16
 800be84:	4618      	mov	r0, r3
 800be86:	4553      	cmp	r3, sl
 800be88:	db33      	blt.n	800bef2 <__lshift+0xb6>
 800be8a:	6920      	ldr	r0, [r4, #16]
 800be8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be90:	f104 0314 	add.w	r3, r4, #20
 800be94:	f019 091f 	ands.w	r9, r9, #31
 800be98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bea0:	d02b      	beq.n	800befa <__lshift+0xbe>
 800bea2:	f1c9 0e20 	rsb	lr, r9, #32
 800bea6:	468a      	mov	sl, r1
 800bea8:	2200      	movs	r2, #0
 800beaa:	6818      	ldr	r0, [r3, #0]
 800beac:	fa00 f009 	lsl.w	r0, r0, r9
 800beb0:	4302      	orrs	r2, r0
 800beb2:	f84a 2b04 	str.w	r2, [sl], #4
 800beb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beba:	459c      	cmp	ip, r3
 800bebc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bec0:	d8f3      	bhi.n	800beaa <__lshift+0x6e>
 800bec2:	ebac 0304 	sub.w	r3, ip, r4
 800bec6:	3b15      	subs	r3, #21
 800bec8:	f023 0303 	bic.w	r3, r3, #3
 800becc:	3304      	adds	r3, #4
 800bece:	f104 0015 	add.w	r0, r4, #21
 800bed2:	4584      	cmp	ip, r0
 800bed4:	bf38      	it	cc
 800bed6:	2304      	movcc	r3, #4
 800bed8:	50ca      	str	r2, [r1, r3]
 800beda:	b10a      	cbz	r2, 800bee0 <__lshift+0xa4>
 800bedc:	f108 0602 	add.w	r6, r8, #2
 800bee0:	3e01      	subs	r6, #1
 800bee2:	4638      	mov	r0, r7
 800bee4:	612e      	str	r6, [r5, #16]
 800bee6:	4621      	mov	r1, r4
 800bee8:	f7ff fdd6 	bl	800ba98 <_Bfree>
 800beec:	4628      	mov	r0, r5
 800beee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bef6:	3301      	adds	r3, #1
 800bef8:	e7c5      	b.n	800be86 <__lshift+0x4a>
 800befa:	3904      	subs	r1, #4
 800befc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf00:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf04:	459c      	cmp	ip, r3
 800bf06:	d8f9      	bhi.n	800befc <__lshift+0xc0>
 800bf08:	e7ea      	b.n	800bee0 <__lshift+0xa4>
 800bf0a:	bf00      	nop
 800bf0c:	0818878b 	.word	0x0818878b
 800bf10:	081887fc 	.word	0x081887fc

0800bf14 <__mcmp>:
 800bf14:	b530      	push	{r4, r5, lr}
 800bf16:	6902      	ldr	r2, [r0, #16]
 800bf18:	690c      	ldr	r4, [r1, #16]
 800bf1a:	1b12      	subs	r2, r2, r4
 800bf1c:	d10e      	bne.n	800bf3c <__mcmp+0x28>
 800bf1e:	f100 0314 	add.w	r3, r0, #20
 800bf22:	3114      	adds	r1, #20
 800bf24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf34:	42a5      	cmp	r5, r4
 800bf36:	d003      	beq.n	800bf40 <__mcmp+0x2c>
 800bf38:	d305      	bcc.n	800bf46 <__mcmp+0x32>
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	bd30      	pop	{r4, r5, pc}
 800bf40:	4283      	cmp	r3, r0
 800bf42:	d3f3      	bcc.n	800bf2c <__mcmp+0x18>
 800bf44:	e7fa      	b.n	800bf3c <__mcmp+0x28>
 800bf46:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4a:	e7f7      	b.n	800bf3c <__mcmp+0x28>

0800bf4c <__mdiff>:
 800bf4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf50:	460c      	mov	r4, r1
 800bf52:	4606      	mov	r6, r0
 800bf54:	4611      	mov	r1, r2
 800bf56:	4620      	mov	r0, r4
 800bf58:	4617      	mov	r7, r2
 800bf5a:	f7ff ffdb 	bl	800bf14 <__mcmp>
 800bf5e:	1e05      	subs	r5, r0, #0
 800bf60:	d110      	bne.n	800bf84 <__mdiff+0x38>
 800bf62:	4629      	mov	r1, r5
 800bf64:	4630      	mov	r0, r6
 800bf66:	f7ff fd57 	bl	800ba18 <_Balloc>
 800bf6a:	b930      	cbnz	r0, 800bf7a <__mdiff+0x2e>
 800bf6c:	4b39      	ldr	r3, [pc, #228]	; (800c054 <__mdiff+0x108>)
 800bf6e:	4602      	mov	r2, r0
 800bf70:	f240 2132 	movw	r1, #562	; 0x232
 800bf74:	4838      	ldr	r0, [pc, #224]	; (800c058 <__mdiff+0x10c>)
 800bf76:	f000 fc0d 	bl	800c794 <__assert_func>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf84:	bfa4      	itt	ge
 800bf86:	463b      	movge	r3, r7
 800bf88:	4627      	movge	r7, r4
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	6879      	ldr	r1, [r7, #4]
 800bf8e:	bfa6      	itte	ge
 800bf90:	461c      	movge	r4, r3
 800bf92:	2500      	movge	r5, #0
 800bf94:	2501      	movlt	r5, #1
 800bf96:	f7ff fd3f 	bl	800ba18 <_Balloc>
 800bf9a:	b920      	cbnz	r0, 800bfa6 <__mdiff+0x5a>
 800bf9c:	4b2d      	ldr	r3, [pc, #180]	; (800c054 <__mdiff+0x108>)
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bfa4:	e7e6      	b.n	800bf74 <__mdiff+0x28>
 800bfa6:	693e      	ldr	r6, [r7, #16]
 800bfa8:	60c5      	str	r5, [r0, #12]
 800bfaa:	6925      	ldr	r5, [r4, #16]
 800bfac:	f107 0114 	add.w	r1, r7, #20
 800bfb0:	f104 0914 	add.w	r9, r4, #20
 800bfb4:	f100 0e14 	add.w	lr, r0, #20
 800bfb8:	f107 0210 	add.w	r2, r7, #16
 800bfbc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bfc0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bfc4:	46f2      	mov	sl, lr
 800bfc6:	2700      	movs	r7, #0
 800bfc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bfd0:	fa1f f883 	uxth.w	r8, r3
 800bfd4:	fa17 f78b 	uxtah	r7, r7, fp
 800bfd8:	0c1b      	lsrs	r3, r3, #16
 800bfda:	eba7 0808 	sub.w	r8, r7, r8
 800bfde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bfe2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bfe6:	fa1f f888 	uxth.w	r8, r8
 800bfea:	141f      	asrs	r7, r3, #16
 800bfec:	454d      	cmp	r5, r9
 800bfee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bff2:	f84a 3b04 	str.w	r3, [sl], #4
 800bff6:	d8e7      	bhi.n	800bfc8 <__mdiff+0x7c>
 800bff8:	1b2b      	subs	r3, r5, r4
 800bffa:	3b15      	subs	r3, #21
 800bffc:	f023 0303 	bic.w	r3, r3, #3
 800c000:	3304      	adds	r3, #4
 800c002:	3415      	adds	r4, #21
 800c004:	42a5      	cmp	r5, r4
 800c006:	bf38      	it	cc
 800c008:	2304      	movcc	r3, #4
 800c00a:	4419      	add	r1, r3
 800c00c:	4473      	add	r3, lr
 800c00e:	469e      	mov	lr, r3
 800c010:	460d      	mov	r5, r1
 800c012:	4565      	cmp	r5, ip
 800c014:	d30e      	bcc.n	800c034 <__mdiff+0xe8>
 800c016:	f10c 0203 	add.w	r2, ip, #3
 800c01a:	1a52      	subs	r2, r2, r1
 800c01c:	f022 0203 	bic.w	r2, r2, #3
 800c020:	3903      	subs	r1, #3
 800c022:	458c      	cmp	ip, r1
 800c024:	bf38      	it	cc
 800c026:	2200      	movcc	r2, #0
 800c028:	441a      	add	r2, r3
 800c02a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c02e:	b17b      	cbz	r3, 800c050 <__mdiff+0x104>
 800c030:	6106      	str	r6, [r0, #16]
 800c032:	e7a5      	b.n	800bf80 <__mdiff+0x34>
 800c034:	f855 8b04 	ldr.w	r8, [r5], #4
 800c038:	fa17 f488 	uxtah	r4, r7, r8
 800c03c:	1422      	asrs	r2, r4, #16
 800c03e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c042:	b2a4      	uxth	r4, r4
 800c044:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c048:	f84e 4b04 	str.w	r4, [lr], #4
 800c04c:	1417      	asrs	r7, r2, #16
 800c04e:	e7e0      	b.n	800c012 <__mdiff+0xc6>
 800c050:	3e01      	subs	r6, #1
 800c052:	e7ea      	b.n	800c02a <__mdiff+0xde>
 800c054:	0818878b 	.word	0x0818878b
 800c058:	081887fc 	.word	0x081887fc

0800c05c <__d2b>:
 800c05c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c060:	4689      	mov	r9, r1
 800c062:	2101      	movs	r1, #1
 800c064:	ec57 6b10 	vmov	r6, r7, d0
 800c068:	4690      	mov	r8, r2
 800c06a:	f7ff fcd5 	bl	800ba18 <_Balloc>
 800c06e:	4604      	mov	r4, r0
 800c070:	b930      	cbnz	r0, 800c080 <__d2b+0x24>
 800c072:	4602      	mov	r2, r0
 800c074:	4b25      	ldr	r3, [pc, #148]	; (800c10c <__d2b+0xb0>)
 800c076:	4826      	ldr	r0, [pc, #152]	; (800c110 <__d2b+0xb4>)
 800c078:	f240 310a 	movw	r1, #778	; 0x30a
 800c07c:	f000 fb8a 	bl	800c794 <__assert_func>
 800c080:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c084:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c088:	bb35      	cbnz	r5, 800c0d8 <__d2b+0x7c>
 800c08a:	2e00      	cmp	r6, #0
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	d028      	beq.n	800c0e2 <__d2b+0x86>
 800c090:	4668      	mov	r0, sp
 800c092:	9600      	str	r6, [sp, #0]
 800c094:	f7ff fd8c 	bl	800bbb0 <__lo0bits>
 800c098:	9900      	ldr	r1, [sp, #0]
 800c09a:	b300      	cbz	r0, 800c0de <__d2b+0x82>
 800c09c:	9a01      	ldr	r2, [sp, #4]
 800c09e:	f1c0 0320 	rsb	r3, r0, #32
 800c0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a6:	430b      	orrs	r3, r1
 800c0a8:	40c2      	lsrs	r2, r0
 800c0aa:	6163      	str	r3, [r4, #20]
 800c0ac:	9201      	str	r2, [sp, #4]
 800c0ae:	9b01      	ldr	r3, [sp, #4]
 800c0b0:	61a3      	str	r3, [r4, #24]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	bf14      	ite	ne
 800c0b6:	2202      	movne	r2, #2
 800c0b8:	2201      	moveq	r2, #1
 800c0ba:	6122      	str	r2, [r4, #16]
 800c0bc:	b1d5      	cbz	r5, 800c0f4 <__d2b+0x98>
 800c0be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0c2:	4405      	add	r5, r0
 800c0c4:	f8c9 5000 	str.w	r5, [r9]
 800c0c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0cc:	f8c8 0000 	str.w	r0, [r8]
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	b003      	add	sp, #12
 800c0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0dc:	e7d5      	b.n	800c08a <__d2b+0x2e>
 800c0de:	6161      	str	r1, [r4, #20]
 800c0e0:	e7e5      	b.n	800c0ae <__d2b+0x52>
 800c0e2:	a801      	add	r0, sp, #4
 800c0e4:	f7ff fd64 	bl	800bbb0 <__lo0bits>
 800c0e8:	9b01      	ldr	r3, [sp, #4]
 800c0ea:	6163      	str	r3, [r4, #20]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	6122      	str	r2, [r4, #16]
 800c0f0:	3020      	adds	r0, #32
 800c0f2:	e7e3      	b.n	800c0bc <__d2b+0x60>
 800c0f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0fc:	f8c9 0000 	str.w	r0, [r9]
 800c100:	6918      	ldr	r0, [r3, #16]
 800c102:	f7ff fd35 	bl	800bb70 <__hi0bits>
 800c106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c10a:	e7df      	b.n	800c0cc <__d2b+0x70>
 800c10c:	0818878b 	.word	0x0818878b
 800c110:	081887fc 	.word	0x081887fc

0800c114 <_calloc_r>:
 800c114:	b513      	push	{r0, r1, r4, lr}
 800c116:	434a      	muls	r2, r1
 800c118:	4611      	mov	r1, r2
 800c11a:	9201      	str	r2, [sp, #4]
 800c11c:	f7fd fccc 	bl	8009ab8 <_malloc_r>
 800c120:	4604      	mov	r4, r0
 800c122:	b118      	cbz	r0, 800c12c <_calloc_r+0x18>
 800c124:	9a01      	ldr	r2, [sp, #4]
 800c126:	2100      	movs	r1, #0
 800c128:	f7fd fc6e 	bl	8009a08 <memset>
 800c12c:	4620      	mov	r0, r4
 800c12e:	b002      	add	sp, #8
 800c130:	bd10      	pop	{r4, pc}

0800c132 <_realloc_r>:
 800c132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c134:	4607      	mov	r7, r0
 800c136:	4614      	mov	r4, r2
 800c138:	460e      	mov	r6, r1
 800c13a:	b921      	cbnz	r1, 800c146 <_realloc_r+0x14>
 800c13c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c140:	4611      	mov	r1, r2
 800c142:	f7fd bcb9 	b.w	8009ab8 <_malloc_r>
 800c146:	b922      	cbnz	r2, 800c152 <_realloc_r+0x20>
 800c148:	f7fd fc66 	bl	8009a18 <_free_r>
 800c14c:	4625      	mov	r5, r4
 800c14e:	4628      	mov	r0, r5
 800c150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c152:	f000 fbbf 	bl	800c8d4 <_malloc_usable_size_r>
 800c156:	42a0      	cmp	r0, r4
 800c158:	d20f      	bcs.n	800c17a <_realloc_r+0x48>
 800c15a:	4621      	mov	r1, r4
 800c15c:	4638      	mov	r0, r7
 800c15e:	f7fd fcab 	bl	8009ab8 <_malloc_r>
 800c162:	4605      	mov	r5, r0
 800c164:	2800      	cmp	r0, #0
 800c166:	d0f2      	beq.n	800c14e <_realloc_r+0x1c>
 800c168:	4631      	mov	r1, r6
 800c16a:	4622      	mov	r2, r4
 800c16c:	f7fd fc3e 	bl	80099ec <memcpy>
 800c170:	4631      	mov	r1, r6
 800c172:	4638      	mov	r0, r7
 800c174:	f7fd fc50 	bl	8009a18 <_free_r>
 800c178:	e7e9      	b.n	800c14e <_realloc_r+0x1c>
 800c17a:	4635      	mov	r5, r6
 800c17c:	e7e7      	b.n	800c14e <_realloc_r+0x1c>

0800c17e <__ssputs_r>:
 800c17e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c182:	688e      	ldr	r6, [r1, #8]
 800c184:	429e      	cmp	r6, r3
 800c186:	4682      	mov	sl, r0
 800c188:	460c      	mov	r4, r1
 800c18a:	4690      	mov	r8, r2
 800c18c:	461f      	mov	r7, r3
 800c18e:	d838      	bhi.n	800c202 <__ssputs_r+0x84>
 800c190:	898a      	ldrh	r2, [r1, #12]
 800c192:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c196:	d032      	beq.n	800c1fe <__ssputs_r+0x80>
 800c198:	6825      	ldr	r5, [r4, #0]
 800c19a:	6909      	ldr	r1, [r1, #16]
 800c19c:	eba5 0901 	sub.w	r9, r5, r1
 800c1a0:	6965      	ldr	r5, [r4, #20]
 800c1a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	444b      	add	r3, r9
 800c1ae:	106d      	asrs	r5, r5, #1
 800c1b0:	429d      	cmp	r5, r3
 800c1b2:	bf38      	it	cc
 800c1b4:	461d      	movcc	r5, r3
 800c1b6:	0553      	lsls	r3, r2, #21
 800c1b8:	d531      	bpl.n	800c21e <__ssputs_r+0xa0>
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	f7fd fc7c 	bl	8009ab8 <_malloc_r>
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	b950      	cbnz	r0, 800c1da <__ssputs_r+0x5c>
 800c1c4:	230c      	movs	r3, #12
 800c1c6:	f8ca 3000 	str.w	r3, [sl]
 800c1ca:	89a3      	ldrh	r3, [r4, #12]
 800c1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1d0:	81a3      	strh	r3, [r4, #12]
 800c1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1da:	6921      	ldr	r1, [r4, #16]
 800c1dc:	464a      	mov	r2, r9
 800c1de:	f7fd fc05 	bl	80099ec <memcpy>
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ec:	81a3      	strh	r3, [r4, #12]
 800c1ee:	6126      	str	r6, [r4, #16]
 800c1f0:	6165      	str	r5, [r4, #20]
 800c1f2:	444e      	add	r6, r9
 800c1f4:	eba5 0509 	sub.w	r5, r5, r9
 800c1f8:	6026      	str	r6, [r4, #0]
 800c1fa:	60a5      	str	r5, [r4, #8]
 800c1fc:	463e      	mov	r6, r7
 800c1fe:	42be      	cmp	r6, r7
 800c200:	d900      	bls.n	800c204 <__ssputs_r+0x86>
 800c202:	463e      	mov	r6, r7
 800c204:	4632      	mov	r2, r6
 800c206:	6820      	ldr	r0, [r4, #0]
 800c208:	4641      	mov	r1, r8
 800c20a:	f000 fb49 	bl	800c8a0 <memmove>
 800c20e:	68a3      	ldr	r3, [r4, #8]
 800c210:	6822      	ldr	r2, [r4, #0]
 800c212:	1b9b      	subs	r3, r3, r6
 800c214:	4432      	add	r2, r6
 800c216:	60a3      	str	r3, [r4, #8]
 800c218:	6022      	str	r2, [r4, #0]
 800c21a:	2000      	movs	r0, #0
 800c21c:	e7db      	b.n	800c1d6 <__ssputs_r+0x58>
 800c21e:	462a      	mov	r2, r5
 800c220:	f7ff ff87 	bl	800c132 <_realloc_r>
 800c224:	4606      	mov	r6, r0
 800c226:	2800      	cmp	r0, #0
 800c228:	d1e1      	bne.n	800c1ee <__ssputs_r+0x70>
 800c22a:	6921      	ldr	r1, [r4, #16]
 800c22c:	4650      	mov	r0, sl
 800c22e:	f7fd fbf3 	bl	8009a18 <_free_r>
 800c232:	e7c7      	b.n	800c1c4 <__ssputs_r+0x46>

0800c234 <_svfiprintf_r>:
 800c234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	4698      	mov	r8, r3
 800c23a:	898b      	ldrh	r3, [r1, #12]
 800c23c:	061b      	lsls	r3, r3, #24
 800c23e:	b09d      	sub	sp, #116	; 0x74
 800c240:	4607      	mov	r7, r0
 800c242:	460d      	mov	r5, r1
 800c244:	4614      	mov	r4, r2
 800c246:	d50e      	bpl.n	800c266 <_svfiprintf_r+0x32>
 800c248:	690b      	ldr	r3, [r1, #16]
 800c24a:	b963      	cbnz	r3, 800c266 <_svfiprintf_r+0x32>
 800c24c:	2140      	movs	r1, #64	; 0x40
 800c24e:	f7fd fc33 	bl	8009ab8 <_malloc_r>
 800c252:	6028      	str	r0, [r5, #0]
 800c254:	6128      	str	r0, [r5, #16]
 800c256:	b920      	cbnz	r0, 800c262 <_svfiprintf_r+0x2e>
 800c258:	230c      	movs	r3, #12
 800c25a:	603b      	str	r3, [r7, #0]
 800c25c:	f04f 30ff 	mov.w	r0, #4294967295
 800c260:	e0d1      	b.n	800c406 <_svfiprintf_r+0x1d2>
 800c262:	2340      	movs	r3, #64	; 0x40
 800c264:	616b      	str	r3, [r5, #20]
 800c266:	2300      	movs	r3, #0
 800c268:	9309      	str	r3, [sp, #36]	; 0x24
 800c26a:	2320      	movs	r3, #32
 800c26c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c270:	f8cd 800c 	str.w	r8, [sp, #12]
 800c274:	2330      	movs	r3, #48	; 0x30
 800c276:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c420 <_svfiprintf_r+0x1ec>
 800c27a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c27e:	f04f 0901 	mov.w	r9, #1
 800c282:	4623      	mov	r3, r4
 800c284:	469a      	mov	sl, r3
 800c286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c28a:	b10a      	cbz	r2, 800c290 <_svfiprintf_r+0x5c>
 800c28c:	2a25      	cmp	r2, #37	; 0x25
 800c28e:	d1f9      	bne.n	800c284 <_svfiprintf_r+0x50>
 800c290:	ebba 0b04 	subs.w	fp, sl, r4
 800c294:	d00b      	beq.n	800c2ae <_svfiprintf_r+0x7a>
 800c296:	465b      	mov	r3, fp
 800c298:	4622      	mov	r2, r4
 800c29a:	4629      	mov	r1, r5
 800c29c:	4638      	mov	r0, r7
 800c29e:	f7ff ff6e 	bl	800c17e <__ssputs_r>
 800c2a2:	3001      	adds	r0, #1
 800c2a4:	f000 80aa 	beq.w	800c3fc <_svfiprintf_r+0x1c8>
 800c2a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2aa:	445a      	add	r2, fp
 800c2ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f000 80a2 	beq.w	800c3fc <_svfiprintf_r+0x1c8>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c2be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2c2:	f10a 0a01 	add.w	sl, sl, #1
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	9307      	str	r3, [sp, #28]
 800c2ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c2d0:	4654      	mov	r4, sl
 800c2d2:	2205      	movs	r2, #5
 800c2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d8:	4851      	ldr	r0, [pc, #324]	; (800c420 <_svfiprintf_r+0x1ec>)
 800c2da:	f7f3 ff91 	bl	8000200 <memchr>
 800c2de:	9a04      	ldr	r2, [sp, #16]
 800c2e0:	b9d8      	cbnz	r0, 800c31a <_svfiprintf_r+0xe6>
 800c2e2:	06d0      	lsls	r0, r2, #27
 800c2e4:	bf44      	itt	mi
 800c2e6:	2320      	movmi	r3, #32
 800c2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ec:	0711      	lsls	r1, r2, #28
 800c2ee:	bf44      	itt	mi
 800c2f0:	232b      	movmi	r3, #43	; 0x2b
 800c2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c2fc:	d015      	beq.n	800c32a <_svfiprintf_r+0xf6>
 800c2fe:	9a07      	ldr	r2, [sp, #28]
 800c300:	4654      	mov	r4, sl
 800c302:	2000      	movs	r0, #0
 800c304:	f04f 0c0a 	mov.w	ip, #10
 800c308:	4621      	mov	r1, r4
 800c30a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c30e:	3b30      	subs	r3, #48	; 0x30
 800c310:	2b09      	cmp	r3, #9
 800c312:	d94e      	bls.n	800c3b2 <_svfiprintf_r+0x17e>
 800c314:	b1b0      	cbz	r0, 800c344 <_svfiprintf_r+0x110>
 800c316:	9207      	str	r2, [sp, #28]
 800c318:	e014      	b.n	800c344 <_svfiprintf_r+0x110>
 800c31a:	eba0 0308 	sub.w	r3, r0, r8
 800c31e:	fa09 f303 	lsl.w	r3, r9, r3
 800c322:	4313      	orrs	r3, r2
 800c324:	9304      	str	r3, [sp, #16]
 800c326:	46a2      	mov	sl, r4
 800c328:	e7d2      	b.n	800c2d0 <_svfiprintf_r+0x9c>
 800c32a:	9b03      	ldr	r3, [sp, #12]
 800c32c:	1d19      	adds	r1, r3, #4
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	9103      	str	r1, [sp, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	bfbb      	ittet	lt
 800c336:	425b      	neglt	r3, r3
 800c338:	f042 0202 	orrlt.w	r2, r2, #2
 800c33c:	9307      	strge	r3, [sp, #28]
 800c33e:	9307      	strlt	r3, [sp, #28]
 800c340:	bfb8      	it	lt
 800c342:	9204      	strlt	r2, [sp, #16]
 800c344:	7823      	ldrb	r3, [r4, #0]
 800c346:	2b2e      	cmp	r3, #46	; 0x2e
 800c348:	d10c      	bne.n	800c364 <_svfiprintf_r+0x130>
 800c34a:	7863      	ldrb	r3, [r4, #1]
 800c34c:	2b2a      	cmp	r3, #42	; 0x2a
 800c34e:	d135      	bne.n	800c3bc <_svfiprintf_r+0x188>
 800c350:	9b03      	ldr	r3, [sp, #12]
 800c352:	1d1a      	adds	r2, r3, #4
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	9203      	str	r2, [sp, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	bfb8      	it	lt
 800c35c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c360:	3402      	adds	r4, #2
 800c362:	9305      	str	r3, [sp, #20]
 800c364:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c430 <_svfiprintf_r+0x1fc>
 800c368:	7821      	ldrb	r1, [r4, #0]
 800c36a:	2203      	movs	r2, #3
 800c36c:	4650      	mov	r0, sl
 800c36e:	f7f3 ff47 	bl	8000200 <memchr>
 800c372:	b140      	cbz	r0, 800c386 <_svfiprintf_r+0x152>
 800c374:	2340      	movs	r3, #64	; 0x40
 800c376:	eba0 000a 	sub.w	r0, r0, sl
 800c37a:	fa03 f000 	lsl.w	r0, r3, r0
 800c37e:	9b04      	ldr	r3, [sp, #16]
 800c380:	4303      	orrs	r3, r0
 800c382:	3401      	adds	r4, #1
 800c384:	9304      	str	r3, [sp, #16]
 800c386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c38a:	4826      	ldr	r0, [pc, #152]	; (800c424 <_svfiprintf_r+0x1f0>)
 800c38c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c390:	2206      	movs	r2, #6
 800c392:	f7f3 ff35 	bl	8000200 <memchr>
 800c396:	2800      	cmp	r0, #0
 800c398:	d038      	beq.n	800c40c <_svfiprintf_r+0x1d8>
 800c39a:	4b23      	ldr	r3, [pc, #140]	; (800c428 <_svfiprintf_r+0x1f4>)
 800c39c:	bb1b      	cbnz	r3, 800c3e6 <_svfiprintf_r+0x1b2>
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	3307      	adds	r3, #7
 800c3a2:	f023 0307 	bic.w	r3, r3, #7
 800c3a6:	3308      	adds	r3, #8
 800c3a8:	9303      	str	r3, [sp, #12]
 800c3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ac:	4433      	add	r3, r6
 800c3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b0:	e767      	b.n	800c282 <_svfiprintf_r+0x4e>
 800c3b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	2001      	movs	r0, #1
 800c3ba:	e7a5      	b.n	800c308 <_svfiprintf_r+0xd4>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	3401      	adds	r4, #1
 800c3c0:	9305      	str	r3, [sp, #20]
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	f04f 0c0a 	mov.w	ip, #10
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ce:	3a30      	subs	r2, #48	; 0x30
 800c3d0:	2a09      	cmp	r2, #9
 800c3d2:	d903      	bls.n	800c3dc <_svfiprintf_r+0x1a8>
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d0c5      	beq.n	800c364 <_svfiprintf_r+0x130>
 800c3d8:	9105      	str	r1, [sp, #20]
 800c3da:	e7c3      	b.n	800c364 <_svfiprintf_r+0x130>
 800c3dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e7f0      	b.n	800c3c8 <_svfiprintf_r+0x194>
 800c3e6:	ab03      	add	r3, sp, #12
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	462a      	mov	r2, r5
 800c3ec:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <_svfiprintf_r+0x1f8>)
 800c3ee:	a904      	add	r1, sp, #16
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	f7fd fc5b 	bl	8009cac <_printf_float>
 800c3f6:	1c42      	adds	r2, r0, #1
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	d1d6      	bne.n	800c3aa <_svfiprintf_r+0x176>
 800c3fc:	89ab      	ldrh	r3, [r5, #12]
 800c3fe:	065b      	lsls	r3, r3, #25
 800c400:	f53f af2c 	bmi.w	800c25c <_svfiprintf_r+0x28>
 800c404:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c406:	b01d      	add	sp, #116	; 0x74
 800c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40c:	ab03      	add	r3, sp, #12
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	462a      	mov	r2, r5
 800c412:	4b06      	ldr	r3, [pc, #24]	; (800c42c <_svfiprintf_r+0x1f8>)
 800c414:	a904      	add	r1, sp, #16
 800c416:	4638      	mov	r0, r7
 800c418:	f7fd feec 	bl	800a1f4 <_printf_i>
 800c41c:	e7eb      	b.n	800c3f6 <_svfiprintf_r+0x1c2>
 800c41e:	bf00      	nop
 800c420:	0818895c 	.word	0x0818895c
 800c424:	08188966 	.word	0x08188966
 800c428:	08009cad 	.word	0x08009cad
 800c42c:	0800c17f 	.word	0x0800c17f
 800c430:	08188962 	.word	0x08188962

0800c434 <__sfputc_r>:
 800c434:	6893      	ldr	r3, [r2, #8]
 800c436:	3b01      	subs	r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	b410      	push	{r4}
 800c43c:	6093      	str	r3, [r2, #8]
 800c43e:	da08      	bge.n	800c452 <__sfputc_r+0x1e>
 800c440:	6994      	ldr	r4, [r2, #24]
 800c442:	42a3      	cmp	r3, r4
 800c444:	db01      	blt.n	800c44a <__sfputc_r+0x16>
 800c446:	290a      	cmp	r1, #10
 800c448:	d103      	bne.n	800c452 <__sfputc_r+0x1e>
 800c44a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c44e:	f7fe b97b 	b.w	800a748 <__swbuf_r>
 800c452:	6813      	ldr	r3, [r2, #0]
 800c454:	1c58      	adds	r0, r3, #1
 800c456:	6010      	str	r0, [r2, #0]
 800c458:	7019      	strb	r1, [r3, #0]
 800c45a:	4608      	mov	r0, r1
 800c45c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <__sfputs_r>:
 800c462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c464:	4606      	mov	r6, r0
 800c466:	460f      	mov	r7, r1
 800c468:	4614      	mov	r4, r2
 800c46a:	18d5      	adds	r5, r2, r3
 800c46c:	42ac      	cmp	r4, r5
 800c46e:	d101      	bne.n	800c474 <__sfputs_r+0x12>
 800c470:	2000      	movs	r0, #0
 800c472:	e007      	b.n	800c484 <__sfputs_r+0x22>
 800c474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c478:	463a      	mov	r2, r7
 800c47a:	4630      	mov	r0, r6
 800c47c:	f7ff ffda 	bl	800c434 <__sfputc_r>
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	d1f3      	bne.n	800c46c <__sfputs_r+0xa>
 800c484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c488 <_vfiprintf_r>:
 800c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	460d      	mov	r5, r1
 800c48e:	b09d      	sub	sp, #116	; 0x74
 800c490:	4614      	mov	r4, r2
 800c492:	4698      	mov	r8, r3
 800c494:	4606      	mov	r6, r0
 800c496:	b118      	cbz	r0, 800c4a0 <_vfiprintf_r+0x18>
 800c498:	6983      	ldr	r3, [r0, #24]
 800c49a:	b90b      	cbnz	r3, 800c4a0 <_vfiprintf_r+0x18>
 800c49c:	f7ff f9a6 	bl	800b7ec <__sinit>
 800c4a0:	4b89      	ldr	r3, [pc, #548]	; (800c6c8 <_vfiprintf_r+0x240>)
 800c4a2:	429d      	cmp	r5, r3
 800c4a4:	d11b      	bne.n	800c4de <_vfiprintf_r+0x56>
 800c4a6:	6875      	ldr	r5, [r6, #4]
 800c4a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4aa:	07d9      	lsls	r1, r3, #31
 800c4ac:	d405      	bmi.n	800c4ba <_vfiprintf_r+0x32>
 800c4ae:	89ab      	ldrh	r3, [r5, #12]
 800c4b0:	059a      	lsls	r2, r3, #22
 800c4b2:	d402      	bmi.n	800c4ba <_vfiprintf_r+0x32>
 800c4b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4b6:	f7ff fa3c 	bl	800b932 <__retarget_lock_acquire_recursive>
 800c4ba:	89ab      	ldrh	r3, [r5, #12]
 800c4bc:	071b      	lsls	r3, r3, #28
 800c4be:	d501      	bpl.n	800c4c4 <_vfiprintf_r+0x3c>
 800c4c0:	692b      	ldr	r3, [r5, #16]
 800c4c2:	b9eb      	cbnz	r3, 800c500 <_vfiprintf_r+0x78>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f7fe f990 	bl	800a7ec <__swsetup_r>
 800c4cc:	b1c0      	cbz	r0, 800c500 <_vfiprintf_r+0x78>
 800c4ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4d0:	07dc      	lsls	r4, r3, #31
 800c4d2:	d50e      	bpl.n	800c4f2 <_vfiprintf_r+0x6a>
 800c4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d8:	b01d      	add	sp, #116	; 0x74
 800c4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4de:	4b7b      	ldr	r3, [pc, #492]	; (800c6cc <_vfiprintf_r+0x244>)
 800c4e0:	429d      	cmp	r5, r3
 800c4e2:	d101      	bne.n	800c4e8 <_vfiprintf_r+0x60>
 800c4e4:	68b5      	ldr	r5, [r6, #8]
 800c4e6:	e7df      	b.n	800c4a8 <_vfiprintf_r+0x20>
 800c4e8:	4b79      	ldr	r3, [pc, #484]	; (800c6d0 <_vfiprintf_r+0x248>)
 800c4ea:	429d      	cmp	r5, r3
 800c4ec:	bf08      	it	eq
 800c4ee:	68f5      	ldreq	r5, [r6, #12]
 800c4f0:	e7da      	b.n	800c4a8 <_vfiprintf_r+0x20>
 800c4f2:	89ab      	ldrh	r3, [r5, #12]
 800c4f4:	0598      	lsls	r0, r3, #22
 800c4f6:	d4ed      	bmi.n	800c4d4 <_vfiprintf_r+0x4c>
 800c4f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4fa:	f7ff fa1b 	bl	800b934 <__retarget_lock_release_recursive>
 800c4fe:	e7e9      	b.n	800c4d4 <_vfiprintf_r+0x4c>
 800c500:	2300      	movs	r3, #0
 800c502:	9309      	str	r3, [sp, #36]	; 0x24
 800c504:	2320      	movs	r3, #32
 800c506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c50a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c50e:	2330      	movs	r3, #48	; 0x30
 800c510:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6d4 <_vfiprintf_r+0x24c>
 800c514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c518:	f04f 0901 	mov.w	r9, #1
 800c51c:	4623      	mov	r3, r4
 800c51e:	469a      	mov	sl, r3
 800c520:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c524:	b10a      	cbz	r2, 800c52a <_vfiprintf_r+0xa2>
 800c526:	2a25      	cmp	r2, #37	; 0x25
 800c528:	d1f9      	bne.n	800c51e <_vfiprintf_r+0x96>
 800c52a:	ebba 0b04 	subs.w	fp, sl, r4
 800c52e:	d00b      	beq.n	800c548 <_vfiprintf_r+0xc0>
 800c530:	465b      	mov	r3, fp
 800c532:	4622      	mov	r2, r4
 800c534:	4629      	mov	r1, r5
 800c536:	4630      	mov	r0, r6
 800c538:	f7ff ff93 	bl	800c462 <__sfputs_r>
 800c53c:	3001      	adds	r0, #1
 800c53e:	f000 80aa 	beq.w	800c696 <_vfiprintf_r+0x20e>
 800c542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c544:	445a      	add	r2, fp
 800c546:	9209      	str	r2, [sp, #36]	; 0x24
 800c548:	f89a 3000 	ldrb.w	r3, [sl]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f000 80a2 	beq.w	800c696 <_vfiprintf_r+0x20e>
 800c552:	2300      	movs	r3, #0
 800c554:	f04f 32ff 	mov.w	r2, #4294967295
 800c558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c55c:	f10a 0a01 	add.w	sl, sl, #1
 800c560:	9304      	str	r3, [sp, #16]
 800c562:	9307      	str	r3, [sp, #28]
 800c564:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c568:	931a      	str	r3, [sp, #104]	; 0x68
 800c56a:	4654      	mov	r4, sl
 800c56c:	2205      	movs	r2, #5
 800c56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c572:	4858      	ldr	r0, [pc, #352]	; (800c6d4 <_vfiprintf_r+0x24c>)
 800c574:	f7f3 fe44 	bl	8000200 <memchr>
 800c578:	9a04      	ldr	r2, [sp, #16]
 800c57a:	b9d8      	cbnz	r0, 800c5b4 <_vfiprintf_r+0x12c>
 800c57c:	06d1      	lsls	r1, r2, #27
 800c57e:	bf44      	itt	mi
 800c580:	2320      	movmi	r3, #32
 800c582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c586:	0713      	lsls	r3, r2, #28
 800c588:	bf44      	itt	mi
 800c58a:	232b      	movmi	r3, #43	; 0x2b
 800c58c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c590:	f89a 3000 	ldrb.w	r3, [sl]
 800c594:	2b2a      	cmp	r3, #42	; 0x2a
 800c596:	d015      	beq.n	800c5c4 <_vfiprintf_r+0x13c>
 800c598:	9a07      	ldr	r2, [sp, #28]
 800c59a:	4654      	mov	r4, sl
 800c59c:	2000      	movs	r0, #0
 800c59e:	f04f 0c0a 	mov.w	ip, #10
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5a8:	3b30      	subs	r3, #48	; 0x30
 800c5aa:	2b09      	cmp	r3, #9
 800c5ac:	d94e      	bls.n	800c64c <_vfiprintf_r+0x1c4>
 800c5ae:	b1b0      	cbz	r0, 800c5de <_vfiprintf_r+0x156>
 800c5b0:	9207      	str	r2, [sp, #28]
 800c5b2:	e014      	b.n	800c5de <_vfiprintf_r+0x156>
 800c5b4:	eba0 0308 	sub.w	r3, r0, r8
 800c5b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	9304      	str	r3, [sp, #16]
 800c5c0:	46a2      	mov	sl, r4
 800c5c2:	e7d2      	b.n	800c56a <_vfiprintf_r+0xe2>
 800c5c4:	9b03      	ldr	r3, [sp, #12]
 800c5c6:	1d19      	adds	r1, r3, #4
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	9103      	str	r1, [sp, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	bfbb      	ittet	lt
 800c5d0:	425b      	neglt	r3, r3
 800c5d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5d6:	9307      	strge	r3, [sp, #28]
 800c5d8:	9307      	strlt	r3, [sp, #28]
 800c5da:	bfb8      	it	lt
 800c5dc:	9204      	strlt	r2, [sp, #16]
 800c5de:	7823      	ldrb	r3, [r4, #0]
 800c5e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5e2:	d10c      	bne.n	800c5fe <_vfiprintf_r+0x176>
 800c5e4:	7863      	ldrb	r3, [r4, #1]
 800c5e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e8:	d135      	bne.n	800c656 <_vfiprintf_r+0x1ce>
 800c5ea:	9b03      	ldr	r3, [sp, #12]
 800c5ec:	1d1a      	adds	r2, r3, #4
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	9203      	str	r2, [sp, #12]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	bfb8      	it	lt
 800c5f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5fa:	3402      	adds	r4, #2
 800c5fc:	9305      	str	r3, [sp, #20]
 800c5fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c6e4 <_vfiprintf_r+0x25c>
 800c602:	7821      	ldrb	r1, [r4, #0]
 800c604:	2203      	movs	r2, #3
 800c606:	4650      	mov	r0, sl
 800c608:	f7f3 fdfa 	bl	8000200 <memchr>
 800c60c:	b140      	cbz	r0, 800c620 <_vfiprintf_r+0x198>
 800c60e:	2340      	movs	r3, #64	; 0x40
 800c610:	eba0 000a 	sub.w	r0, r0, sl
 800c614:	fa03 f000 	lsl.w	r0, r3, r0
 800c618:	9b04      	ldr	r3, [sp, #16]
 800c61a:	4303      	orrs	r3, r0
 800c61c:	3401      	adds	r4, #1
 800c61e:	9304      	str	r3, [sp, #16]
 800c620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c624:	482c      	ldr	r0, [pc, #176]	; (800c6d8 <_vfiprintf_r+0x250>)
 800c626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c62a:	2206      	movs	r2, #6
 800c62c:	f7f3 fde8 	bl	8000200 <memchr>
 800c630:	2800      	cmp	r0, #0
 800c632:	d03f      	beq.n	800c6b4 <_vfiprintf_r+0x22c>
 800c634:	4b29      	ldr	r3, [pc, #164]	; (800c6dc <_vfiprintf_r+0x254>)
 800c636:	bb1b      	cbnz	r3, 800c680 <_vfiprintf_r+0x1f8>
 800c638:	9b03      	ldr	r3, [sp, #12]
 800c63a:	3307      	adds	r3, #7
 800c63c:	f023 0307 	bic.w	r3, r3, #7
 800c640:	3308      	adds	r3, #8
 800c642:	9303      	str	r3, [sp, #12]
 800c644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c646:	443b      	add	r3, r7
 800c648:	9309      	str	r3, [sp, #36]	; 0x24
 800c64a:	e767      	b.n	800c51c <_vfiprintf_r+0x94>
 800c64c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c650:	460c      	mov	r4, r1
 800c652:	2001      	movs	r0, #1
 800c654:	e7a5      	b.n	800c5a2 <_vfiprintf_r+0x11a>
 800c656:	2300      	movs	r3, #0
 800c658:	3401      	adds	r4, #1
 800c65a:	9305      	str	r3, [sp, #20]
 800c65c:	4619      	mov	r1, r3
 800c65e:	f04f 0c0a 	mov.w	ip, #10
 800c662:	4620      	mov	r0, r4
 800c664:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c668:	3a30      	subs	r2, #48	; 0x30
 800c66a:	2a09      	cmp	r2, #9
 800c66c:	d903      	bls.n	800c676 <_vfiprintf_r+0x1ee>
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d0c5      	beq.n	800c5fe <_vfiprintf_r+0x176>
 800c672:	9105      	str	r1, [sp, #20]
 800c674:	e7c3      	b.n	800c5fe <_vfiprintf_r+0x176>
 800c676:	fb0c 2101 	mla	r1, ip, r1, r2
 800c67a:	4604      	mov	r4, r0
 800c67c:	2301      	movs	r3, #1
 800c67e:	e7f0      	b.n	800c662 <_vfiprintf_r+0x1da>
 800c680:	ab03      	add	r3, sp, #12
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	462a      	mov	r2, r5
 800c686:	4b16      	ldr	r3, [pc, #88]	; (800c6e0 <_vfiprintf_r+0x258>)
 800c688:	a904      	add	r1, sp, #16
 800c68a:	4630      	mov	r0, r6
 800c68c:	f7fd fb0e 	bl	8009cac <_printf_float>
 800c690:	4607      	mov	r7, r0
 800c692:	1c78      	adds	r0, r7, #1
 800c694:	d1d6      	bne.n	800c644 <_vfiprintf_r+0x1bc>
 800c696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c698:	07d9      	lsls	r1, r3, #31
 800c69a:	d405      	bmi.n	800c6a8 <_vfiprintf_r+0x220>
 800c69c:	89ab      	ldrh	r3, [r5, #12]
 800c69e:	059a      	lsls	r2, r3, #22
 800c6a0:	d402      	bmi.n	800c6a8 <_vfiprintf_r+0x220>
 800c6a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6a4:	f7ff f946 	bl	800b934 <__retarget_lock_release_recursive>
 800c6a8:	89ab      	ldrh	r3, [r5, #12]
 800c6aa:	065b      	lsls	r3, r3, #25
 800c6ac:	f53f af12 	bmi.w	800c4d4 <_vfiprintf_r+0x4c>
 800c6b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6b2:	e711      	b.n	800c4d8 <_vfiprintf_r+0x50>
 800c6b4:	ab03      	add	r3, sp, #12
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	462a      	mov	r2, r5
 800c6ba:	4b09      	ldr	r3, [pc, #36]	; (800c6e0 <_vfiprintf_r+0x258>)
 800c6bc:	a904      	add	r1, sp, #16
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f7fd fd98 	bl	800a1f4 <_printf_i>
 800c6c4:	e7e4      	b.n	800c690 <_vfiprintf_r+0x208>
 800c6c6:	bf00      	nop
 800c6c8:	081887bc 	.word	0x081887bc
 800c6cc:	081887dc 	.word	0x081887dc
 800c6d0:	0818879c 	.word	0x0818879c
 800c6d4:	0818895c 	.word	0x0818895c
 800c6d8:	08188966 	.word	0x08188966
 800c6dc:	08009cad 	.word	0x08009cad
 800c6e0:	0800c463 	.word	0x0800c463
 800c6e4:	08188962 	.word	0x08188962

0800c6e8 <__sread>:
 800c6e8:	b510      	push	{r4, lr}
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f0:	f000 f8f8 	bl	800c8e4 <_read_r>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	bfab      	itete	ge
 800c6f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c6fc:	181b      	addge	r3, r3, r0
 800c6fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c702:	bfac      	ite	ge
 800c704:	6563      	strge	r3, [r4, #84]	; 0x54
 800c706:	81a3      	strhlt	r3, [r4, #12]
 800c708:	bd10      	pop	{r4, pc}

0800c70a <__swrite>:
 800c70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70e:	461f      	mov	r7, r3
 800c710:	898b      	ldrh	r3, [r1, #12]
 800c712:	05db      	lsls	r3, r3, #23
 800c714:	4605      	mov	r5, r0
 800c716:	460c      	mov	r4, r1
 800c718:	4616      	mov	r6, r2
 800c71a:	d505      	bpl.n	800c728 <__swrite+0x1e>
 800c71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c720:	2302      	movs	r3, #2
 800c722:	2200      	movs	r2, #0
 800c724:	f000 f898 	bl	800c858 <_lseek_r>
 800c728:	89a3      	ldrh	r3, [r4, #12]
 800c72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c72e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c732:	81a3      	strh	r3, [r4, #12]
 800c734:	4632      	mov	r2, r6
 800c736:	463b      	mov	r3, r7
 800c738:	4628      	mov	r0, r5
 800c73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c73e:	f000 b817 	b.w	800c770 <_write_r>

0800c742 <__sseek>:
 800c742:	b510      	push	{r4, lr}
 800c744:	460c      	mov	r4, r1
 800c746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74a:	f000 f885 	bl	800c858 <_lseek_r>
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	bf15      	itete	ne
 800c754:	6560      	strne	r0, [r4, #84]	; 0x54
 800c756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c75a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c75e:	81a3      	strheq	r3, [r4, #12]
 800c760:	bf18      	it	ne
 800c762:	81a3      	strhne	r3, [r4, #12]
 800c764:	bd10      	pop	{r4, pc}

0800c766 <__sclose>:
 800c766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c76a:	f000 b831 	b.w	800c7d0 <_close_r>
	...

0800c770 <_write_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	4d07      	ldr	r5, [pc, #28]	; (800c790 <_write_r+0x20>)
 800c774:	4604      	mov	r4, r0
 800c776:	4608      	mov	r0, r1
 800c778:	4611      	mov	r1, r2
 800c77a:	2200      	movs	r2, #0
 800c77c:	602a      	str	r2, [r5, #0]
 800c77e:	461a      	mov	r2, r3
 800c780:	f7fa fc76 	bl	8007070 <_write>
 800c784:	1c43      	adds	r3, r0, #1
 800c786:	d102      	bne.n	800c78e <_write_r+0x1e>
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	b103      	cbz	r3, 800c78e <_write_r+0x1e>
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	bd38      	pop	{r3, r4, r5, pc}
 800c790:	2000d2ec 	.word	0x2000d2ec

0800c794 <__assert_func>:
 800c794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c796:	4614      	mov	r4, r2
 800c798:	461a      	mov	r2, r3
 800c79a:	4b09      	ldr	r3, [pc, #36]	; (800c7c0 <__assert_func+0x2c>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4605      	mov	r5, r0
 800c7a0:	68d8      	ldr	r0, [r3, #12]
 800c7a2:	b14c      	cbz	r4, 800c7b8 <__assert_func+0x24>
 800c7a4:	4b07      	ldr	r3, [pc, #28]	; (800c7c4 <__assert_func+0x30>)
 800c7a6:	9100      	str	r1, [sp, #0]
 800c7a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7ac:	4906      	ldr	r1, [pc, #24]	; (800c7c8 <__assert_func+0x34>)
 800c7ae:	462b      	mov	r3, r5
 800c7b0:	f000 f81e 	bl	800c7f0 <fiprintf>
 800c7b4:	f000 f8b5 	bl	800c922 <abort>
 800c7b8:	4b04      	ldr	r3, [pc, #16]	; (800c7cc <__assert_func+0x38>)
 800c7ba:	461c      	mov	r4, r3
 800c7bc:	e7f3      	b.n	800c7a6 <__assert_func+0x12>
 800c7be:	bf00      	nop
 800c7c0:	20000bc0 	.word	0x20000bc0
 800c7c4:	0818896d 	.word	0x0818896d
 800c7c8:	0818897a 	.word	0x0818897a
 800c7cc:	081889a8 	.word	0x081889a8

0800c7d0 <_close_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d06      	ldr	r5, [pc, #24]	; (800c7ec <_close_r+0x1c>)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	602b      	str	r3, [r5, #0]
 800c7dc:	f7fa fc74 	bl	80070c8 <_close>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d102      	bne.n	800c7ea <_close_r+0x1a>
 800c7e4:	682b      	ldr	r3, [r5, #0]
 800c7e6:	b103      	cbz	r3, 800c7ea <_close_r+0x1a>
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	bd38      	pop	{r3, r4, r5, pc}
 800c7ec:	2000d2ec 	.word	0x2000d2ec

0800c7f0 <fiprintf>:
 800c7f0:	b40e      	push	{r1, r2, r3}
 800c7f2:	b503      	push	{r0, r1, lr}
 800c7f4:	4601      	mov	r1, r0
 800c7f6:	ab03      	add	r3, sp, #12
 800c7f8:	4805      	ldr	r0, [pc, #20]	; (800c810 <fiprintf+0x20>)
 800c7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7fe:	6800      	ldr	r0, [r0, #0]
 800c800:	9301      	str	r3, [sp, #4]
 800c802:	f7ff fe41 	bl	800c488 <_vfiprintf_r>
 800c806:	b002      	add	sp, #8
 800c808:	f85d eb04 	ldr.w	lr, [sp], #4
 800c80c:	b003      	add	sp, #12
 800c80e:	4770      	bx	lr
 800c810:	20000bc0 	.word	0x20000bc0

0800c814 <_fstat_r>:
 800c814:	b538      	push	{r3, r4, r5, lr}
 800c816:	4d07      	ldr	r5, [pc, #28]	; (800c834 <_fstat_r+0x20>)
 800c818:	2300      	movs	r3, #0
 800c81a:	4604      	mov	r4, r0
 800c81c:	4608      	mov	r0, r1
 800c81e:	4611      	mov	r1, r2
 800c820:	602b      	str	r3, [r5, #0]
 800c822:	f7fa fc54 	bl	80070ce <_fstat>
 800c826:	1c43      	adds	r3, r0, #1
 800c828:	d102      	bne.n	800c830 <_fstat_r+0x1c>
 800c82a:	682b      	ldr	r3, [r5, #0]
 800c82c:	b103      	cbz	r3, 800c830 <_fstat_r+0x1c>
 800c82e:	6023      	str	r3, [r4, #0]
 800c830:	bd38      	pop	{r3, r4, r5, pc}
 800c832:	bf00      	nop
 800c834:	2000d2ec 	.word	0x2000d2ec

0800c838 <_isatty_r>:
 800c838:	b538      	push	{r3, r4, r5, lr}
 800c83a:	4d06      	ldr	r5, [pc, #24]	; (800c854 <_isatty_r+0x1c>)
 800c83c:	2300      	movs	r3, #0
 800c83e:	4604      	mov	r4, r0
 800c840:	4608      	mov	r0, r1
 800c842:	602b      	str	r3, [r5, #0]
 800c844:	f7fa fc48 	bl	80070d8 <_isatty>
 800c848:	1c43      	adds	r3, r0, #1
 800c84a:	d102      	bne.n	800c852 <_isatty_r+0x1a>
 800c84c:	682b      	ldr	r3, [r5, #0]
 800c84e:	b103      	cbz	r3, 800c852 <_isatty_r+0x1a>
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	bd38      	pop	{r3, r4, r5, pc}
 800c854:	2000d2ec 	.word	0x2000d2ec

0800c858 <_lseek_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4d07      	ldr	r5, [pc, #28]	; (800c878 <_lseek_r+0x20>)
 800c85c:	4604      	mov	r4, r0
 800c85e:	4608      	mov	r0, r1
 800c860:	4611      	mov	r1, r2
 800c862:	2200      	movs	r2, #0
 800c864:	602a      	str	r2, [r5, #0]
 800c866:	461a      	mov	r2, r3
 800c868:	f7fa fc38 	bl	80070dc <_lseek>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	d102      	bne.n	800c876 <_lseek_r+0x1e>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	b103      	cbz	r3, 800c876 <_lseek_r+0x1e>
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	2000d2ec 	.word	0x2000d2ec

0800c87c <__ascii_mbtowc>:
 800c87c:	b082      	sub	sp, #8
 800c87e:	b901      	cbnz	r1, 800c882 <__ascii_mbtowc+0x6>
 800c880:	a901      	add	r1, sp, #4
 800c882:	b142      	cbz	r2, 800c896 <__ascii_mbtowc+0x1a>
 800c884:	b14b      	cbz	r3, 800c89a <__ascii_mbtowc+0x1e>
 800c886:	7813      	ldrb	r3, [r2, #0]
 800c888:	600b      	str	r3, [r1, #0]
 800c88a:	7812      	ldrb	r2, [r2, #0]
 800c88c:	1e10      	subs	r0, r2, #0
 800c88e:	bf18      	it	ne
 800c890:	2001      	movne	r0, #1
 800c892:	b002      	add	sp, #8
 800c894:	4770      	bx	lr
 800c896:	4610      	mov	r0, r2
 800c898:	e7fb      	b.n	800c892 <__ascii_mbtowc+0x16>
 800c89a:	f06f 0001 	mvn.w	r0, #1
 800c89e:	e7f8      	b.n	800c892 <__ascii_mbtowc+0x16>

0800c8a0 <memmove>:
 800c8a0:	4288      	cmp	r0, r1
 800c8a2:	b510      	push	{r4, lr}
 800c8a4:	eb01 0402 	add.w	r4, r1, r2
 800c8a8:	d902      	bls.n	800c8b0 <memmove+0x10>
 800c8aa:	4284      	cmp	r4, r0
 800c8ac:	4623      	mov	r3, r4
 800c8ae:	d807      	bhi.n	800c8c0 <memmove+0x20>
 800c8b0:	1e43      	subs	r3, r0, #1
 800c8b2:	42a1      	cmp	r1, r4
 800c8b4:	d008      	beq.n	800c8c8 <memmove+0x28>
 800c8b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8be:	e7f8      	b.n	800c8b2 <memmove+0x12>
 800c8c0:	4402      	add	r2, r0
 800c8c2:	4601      	mov	r1, r0
 800c8c4:	428a      	cmp	r2, r1
 800c8c6:	d100      	bne.n	800c8ca <memmove+0x2a>
 800c8c8:	bd10      	pop	{r4, pc}
 800c8ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8d2:	e7f7      	b.n	800c8c4 <memmove+0x24>

0800c8d4 <_malloc_usable_size_r>:
 800c8d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8d8:	1f18      	subs	r0, r3, #4
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	bfbc      	itt	lt
 800c8de:	580b      	ldrlt	r3, [r1, r0]
 800c8e0:	18c0      	addlt	r0, r0, r3
 800c8e2:	4770      	bx	lr

0800c8e4 <_read_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	4d07      	ldr	r5, [pc, #28]	; (800c904 <_read_r+0x20>)
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	4608      	mov	r0, r1
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	602a      	str	r2, [r5, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	f7fa fbac 	bl	8007050 <_read>
 800c8f8:	1c43      	adds	r3, r0, #1
 800c8fa:	d102      	bne.n	800c902 <_read_r+0x1e>
 800c8fc:	682b      	ldr	r3, [r5, #0]
 800c8fe:	b103      	cbz	r3, 800c902 <_read_r+0x1e>
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	2000d2ec 	.word	0x2000d2ec

0800c908 <__ascii_wctomb>:
 800c908:	b149      	cbz	r1, 800c91e <__ascii_wctomb+0x16>
 800c90a:	2aff      	cmp	r2, #255	; 0xff
 800c90c:	bf85      	ittet	hi
 800c90e:	238a      	movhi	r3, #138	; 0x8a
 800c910:	6003      	strhi	r3, [r0, #0]
 800c912:	700a      	strbls	r2, [r1, #0]
 800c914:	f04f 30ff 	movhi.w	r0, #4294967295
 800c918:	bf98      	it	ls
 800c91a:	2001      	movls	r0, #1
 800c91c:	4770      	bx	lr
 800c91e:	4608      	mov	r0, r1
 800c920:	4770      	bx	lr

0800c922 <abort>:
 800c922:	b508      	push	{r3, lr}
 800c924:	2006      	movs	r0, #6
 800c926:	f000 f82b 	bl	800c980 <raise>
 800c92a:	2001      	movs	r0, #1
 800c92c:	f7fa fb8a 	bl	8007044 <_exit>

0800c930 <_raise_r>:
 800c930:	291f      	cmp	r1, #31
 800c932:	b538      	push	{r3, r4, r5, lr}
 800c934:	4604      	mov	r4, r0
 800c936:	460d      	mov	r5, r1
 800c938:	d904      	bls.n	800c944 <_raise_r+0x14>
 800c93a:	2316      	movs	r3, #22
 800c93c:	6003      	str	r3, [r0, #0]
 800c93e:	f04f 30ff 	mov.w	r0, #4294967295
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c946:	b112      	cbz	r2, 800c94e <_raise_r+0x1e>
 800c948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c94c:	b94b      	cbnz	r3, 800c962 <_raise_r+0x32>
 800c94e:	4620      	mov	r0, r4
 800c950:	f000 f830 	bl	800c9b4 <_getpid_r>
 800c954:	462a      	mov	r2, r5
 800c956:	4601      	mov	r1, r0
 800c958:	4620      	mov	r0, r4
 800c95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c95e:	f000 b817 	b.w	800c990 <_kill_r>
 800c962:	2b01      	cmp	r3, #1
 800c964:	d00a      	beq.n	800c97c <_raise_r+0x4c>
 800c966:	1c59      	adds	r1, r3, #1
 800c968:	d103      	bne.n	800c972 <_raise_r+0x42>
 800c96a:	2316      	movs	r3, #22
 800c96c:	6003      	str	r3, [r0, #0]
 800c96e:	2001      	movs	r0, #1
 800c970:	e7e7      	b.n	800c942 <_raise_r+0x12>
 800c972:	2400      	movs	r4, #0
 800c974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c978:	4628      	mov	r0, r5
 800c97a:	4798      	blx	r3
 800c97c:	2000      	movs	r0, #0
 800c97e:	e7e0      	b.n	800c942 <_raise_r+0x12>

0800c980 <raise>:
 800c980:	4b02      	ldr	r3, [pc, #8]	; (800c98c <raise+0xc>)
 800c982:	4601      	mov	r1, r0
 800c984:	6818      	ldr	r0, [r3, #0]
 800c986:	f7ff bfd3 	b.w	800c930 <_raise_r>
 800c98a:	bf00      	nop
 800c98c:	20000bc0 	.word	0x20000bc0

0800c990 <_kill_r>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	4d07      	ldr	r5, [pc, #28]	; (800c9b0 <_kill_r+0x20>)
 800c994:	2300      	movs	r3, #0
 800c996:	4604      	mov	r4, r0
 800c998:	4608      	mov	r0, r1
 800c99a:	4611      	mov	r1, r2
 800c99c:	602b      	str	r3, [r5, #0]
 800c99e:	f7fa fb49 	bl	8007034 <_kill>
 800c9a2:	1c43      	adds	r3, r0, #1
 800c9a4:	d102      	bne.n	800c9ac <_kill_r+0x1c>
 800c9a6:	682b      	ldr	r3, [r5, #0]
 800c9a8:	b103      	cbz	r3, 800c9ac <_kill_r+0x1c>
 800c9aa:	6023      	str	r3, [r4, #0]
 800c9ac:	bd38      	pop	{r3, r4, r5, pc}
 800c9ae:	bf00      	nop
 800c9b0:	2000d2ec 	.word	0x2000d2ec

0800c9b4 <_getpid_r>:
 800c9b4:	f7fa bb3c 	b.w	8007030 <_getpid>

0800c9b8 <_init>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	bf00      	nop
 800c9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9be:	bc08      	pop	{r3}
 800c9c0:	469e      	mov	lr, r3
 800c9c2:	4770      	bx	lr

0800c9c4 <_fini>:
 800c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c6:	bf00      	nop
 800c9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ca:	bc08      	pop	{r3}
 800c9cc:	469e      	mov	lr, r3
 800c9ce:	4770      	bx	lr
